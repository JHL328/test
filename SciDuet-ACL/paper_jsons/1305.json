{"title": "Straight to the Tree: Constituency Parsing with Neural Syntactic Distance", "abstract": "In this work, we propose a novel constituency parsing scheme. The model predicts a vector of real-valued scalars, named syntactic distances, for each split position in the input sentence. The syntactic distances specify the order in which the split points will be selected, recursively partitioning the input, in a top-down fashion. Compared to traditional shiftreduce parsing schemes, our approach is free from the potential problem of compounding errors, while being faster and easier to parallelize. Our model achieves competitive performance amongst single model, discriminative parsers in the PTB dataset and outperforms previous models in the CTB dataset. * Equal contribution. Corresponding authors: yikang.shen@umontreal.ca, zhouhan.lin@umontreal.ca. \u2020 Work done while at Microsoft Research, Montreal.", "text": [{"id": 0, "string": "Introduction Devising fast and accurate constituency parsing algorithms is an important, long-standing problem in natural language processing."}, {"id": 1, "string": "Parsing has been useful for incorporating linguistic prior in several related tasks, such as relation extraction, paraphrase detection (Callison-Burch, 2008) , and more recently, natural language inference (Bowman et al., 2016) and machine translation (Eriguchi et al., 2017) ."}, {"id": 2, "string": "Neural network-based approaches relying on dense input representations have recently achieved competitive results for constituency parsing (Vinyals et al., 2015; Cross and Huang, 2016; Liu and Zhang, 2017b; Stern et al., 2017a) ."}, {"id": 3, "string": "Generally speaking, either these approaches produce the parse tree sequentially, by governing Figure 1: An example of how syntactic distances (d1 and d2) describe the structure of a parse tree: consecutive words with larger predicted distance are split earlier than those with smaller distances, in a process akin to divisive clustering."}, {"id": 4, "string": "the sequence of transitions in a transition-based parser (Nivre, 2004; Zhu et al., 2013; Chen and Manning, 2014; Cross and Huang, 2016) , or use a chart-based approach by estimating non-linear potentials and performing exact structured inference by dynamic programming (Finkel et al., 2008; Durrett and Klein, 2015; Stern et al., 2017a) ."}, {"id": 5, "string": "Transition-based models decompose the structured prediction problem into a sequence of local decisions."}, {"id": 6, "string": "This enables fast greedy decoding but also leads to compounding errors because the model is never exposed to its own mistakes during training (Daum\u00e9 et al., 2009 )."}, {"id": 7, "string": "Solutions to this problem usually complexify the training procedure by using structured training through beamsearch (Weiss et al., 2015; Andor et al., 2016) and dynamic oracles (Goldberg and Nivre, 2012; Cross and Huang, 2016) ."}, {"id": 8, "string": "On the other hand, chartbased models can incorporate structured loss functions during training and benefit from exact inference via the CYK algorithm but suffer from higher computational cost during decoding (Durrett and Klein, 2015; Stern et al., 2017a) ."}, {"id": 9, "string": "In this paper, we propose a novel, fully-parallel model for constituency parsing, based on the concept of \"syntactic distance\", recently introduced by (Shen et al., 2017) for language modeling."}, {"id": 10, "string": "To construct a parse tree from a sentence, one can proceed in a top-down manner, recursively splitting larger constituents into smaller constituents, where the order of the splits defines the hierarchical structure."}, {"id": 11, "string": "The syntactic distances are defined for each possible split point in the sentence."}, {"id": 12, "string": "The order induced by the syntactic distances fully specifies the order in which the sentence needs to be recursively split into smaller constituents (Figure 1) : in case of a binary tree, there exists a oneto-one correspondence between the ordering and the tree."}, {"id": 13, "string": "Therefore, our model is trained to reproduce the ordering between split points induced by the ground-truth distances by means of a margin rank loss (Weston et al., 2011) ."}, {"id": 14, "string": "Crucially, our model works in parallel: the estimated distance for each split point is produced independently from the others, which allows for an easy parallelization in modern parallel computing architectures for deep learning, such as GPUs."}, {"id": 15, "string": "Along with the distances, we also train the model to produce the constituent labels, which are used to build the fully labeled tree."}, {"id": 16, "string": "Our model is fully parallel and thus does not require computationally expensive structured inference during training."}, {"id": 17, "string": "Mapping from syntactic distances to a tree can be efficiently done in O(n log n), which makes the decoding computationally attractive."}, {"id": 18, "string": "Despite our strong conditional independence assumption on the output predictions, we achieve good performance for single model discriminative parsing in PTB (91.8 F1) and CTB (86.5 F1) matching, and sometimes outperforming, recent chart-based and transition-based parsing models."}, {"id": 19, "string": "Syntactic Distances of a Parse Tree In this section, we start from the concept of syntactic distance introduced in Shen et al."}, {"id": 20, "string": "(2017) for unsupervised parsing via language modeling and we extend it to the supervised setting."}, {"id": 21, "string": "We propose two algorithms, one to convert a parse tree into a compact representation based on distances between consecutive words, and another to map the inferred representation back to a complete parse tree."}, {"id": 22, "string": "The representation will later be used for supervised training."}, {"id": 23, "string": "We formally define the syntactic distances of a parse tree as follows: d l , c l , t l , h l \u2190 Distance(child l ) 10: d r , c r , t r , h r \u2190 Distance(child r ) 11: h \u2190 max(h l , h r ) + 1 12: d \u2190 d l \u222a [h] \u222a d r 13: c \u2190 c l \u222a [node.label] \u222a c r 14: t \u2190 t l \u222a t r 15: end if 16: return d, c, t, h 17: end function Definition 2.1."}, {"id": 24, "string": "Let T be a parse tree that contains a set of leaves (w 0 , ..., w n )."}, {"id": 25, "string": "The height of the lowest common ancestor for two leaves (w i , w j ) is noted asd i j ."}, {"id": 26, "string": "The syntactic distances of T can be any vector of scalars d = (d 1 , ..., d n ) that satisfy: sign(d i \u2212 d j ) = sign(d i\u22121 i \u2212d j\u22121 j ) (1) In other words, d induces the same ranking order as the quantitiesd j i computed between pairs of consecutive words in the sequence, i.e."}, {"id": 27, "string": "(d 0 1 , ...,d n\u22121 n )."}, {"id": 28, "string": "Note that there are n \u2212 1 syntactic distances for a sentence of length n. Example 2.1."}, {"id": 29, "string": "Consider the tree in Fig."}, {"id": 30, "string": "1 for which d 0 1 = 2,d 1 2 = 1."}, {"id": 31, "string": "An example of valid syntactic distances for this tree is any d = (d 1 , d 2 ) such that d 1 > d 2 ."}, {"id": 32, "string": "Given this definition, the parsing model predicts a sequence of scalars, which is a more natural setting for models based on neural networks, rather than predicting a set of spans."}, {"id": 33, "string": "For comparison, in most of the current neural parsing methods, the model needs to output a sequence of transitions (Cross and Huang, 2016; Chen and Manning, 2014) ."}, {"id": 34, "string": "Let us first consider the case of a binary parse tree."}, {"id": 35, "string": "Algorithm 1 provides a way to convert it to a tuple (d, c, t), where d contains the height of the inner nodes in the tree following a left-to-right (in order) traversal, c the constituent labels for each node in the same order and t the part-of-speech  Starting with the full sentence, we pick split point 1 (as it is assigned to the larger distance) and assign label S to span (0,5)."}, {"id": 36, "string": "The left child span (0,1) is assigned with a tag PRP and a label NP, which produces an unary node and a terminal node."}, {"id": 37, "string": "The right child span (1,5) is assigned the label \u2205, coming from implicit binarization, which indicates that the span is not a real constituent and all of its children are instead direct children of its parent."}, {"id": 38, "string": "For the span (1,5), the split point 4 is selected."}, {"id": 39, "string": "The recursion of splitting and labeling continues until the process reaches a terminal node."}, {"id": 40, "string": "Algorithm 2 Distance to Binary Parse Tree 1: function TREE(d,c,t) 2: if d = [] then 3: node \u2190 Leaf(t) 4: else 5: i \u2190 arg max i (d) 6: child l \u2190 Tree(d <i , c <i , t <i ) 7: child r \u2190 Tree(d >i , c >i , t \u2265i ) 8: node \u2190 Node(child l , child r , c i ) 9: end if 10: return node 11: end function (POS) tags of each word in the left-to-right order."}, {"id": 41, "string": "d is a valid vector of syntactic distances satisfying Definition 2.1."}, {"id": 42, "string": "Once a model has learned to predict these variables, Algorithm 2 can reconstruct a unique binary tree from the output of the model (d,\u0109,t)."}, {"id": 43, "string": "The idea in Algorithm 2 is similar to the top-down parsing method proposed by Stern et al."}, {"id": 44, "string": "(2017a) , but differs in one key aspect: at each recursive call, there is no need to estimate the confidence for every split point."}, {"id": 45, "string": "The algorithm simply chooses the split point i with the maximumd i , and assigns to the span the predicted label\u0109 i ."}, {"id": 46, "string": "This makes the running time of our algorithm to be in O(n log n), compared to the O(n 2 ) of the greedy top-down algorithm by (Stern et al., 2017a) ."}, {"id": 47, "string": "Figure 2 shows an example of the reconstruction of parse tree."}, {"id": 48, "string": "Alternatively, the tree reconstruction process can also be done in a bottom-up manner, which requires the recursive composition of adjacent spans according to the ranking induced by their syntactic distance, a process akin to agglomerative clustering."}, {"id": 49, "string": "One potential issue is the existence of unary and n-ary nodes."}, {"id": 50, "string": "We follow the method proposed by Stern et al."}, {"id": 51, "string": "(2017a) and add a special empty label \u2205 to spans that are not themselves full constituents but simply arise during the course of implicit binarization."}, {"id": 52, "string": "For the unary nodes that contains one nonterminal node, we take the common approach of treating these as additional atomic labels alongside all elementary nonterminals (Stern et al., 2017a) ."}, {"id": 53, "string": "For all terminal nodes, we determine whether it belongs to a unary chain or not by predicting an additional label."}, {"id": 54, "string": "If it is predicted with a label different from the empty label, we conclude that it is a direct child of a unary constituent with that label."}, {"id": 55, "string": "Otherwise if it is predicted to have an empty label, we conclude that it is a child of a bigger constituent which has other constituents or words as its siblings."}, {"id": 56, "string": "An n-ary node can arbitrarily be split into binary nodes."}, {"id": 57, "string": "We choose to use the leftmost split point."}, {"id": 58, "string": "The split point may also be chosen based on model prediction during training."}, {"id": 59, "string": "Recovering an n-ary parse tree from the predicted binary tree simply requires removing the empty nodes and split combined labels corresponding to unary chains."}, {"id": 60, "string": "Algorithm 2 is a divide-and-conquer algorithm."}, {"id": 61, "string": "The running time of this procedure is O(n log n)."}, {"id": 62, "string": "However, the algorithm is naturally adapted for execution in a parallel environment, which can further reduce its running time to O(log n)."}, {"id": 63, "string": "Learning Syntactic Distances We use neural networks to estimate the vector of syntactic distances for a given sentence."}, {"id": 64, "string": "We use a modified hinge loss, where the target distances are generated by the tree-to-distance conversion given by Algorithm 1."}, {"id": 65, "string": "Section 3.1 will describe in detail the model architecture, and Section 3.2 describes the loss we use in this setting."}, {"id": 66, "string": "Model Architecture Given input words w = (w 0 , w 1 , ..., w n ), we predict the tuple (d, c, t)."}, {"id": 67, "string": "The POS tags t are given by an external Part-Of-Speech (POS) tagger."}, {"id": 68, "string": "The syntactic distances d and constituent labels c are predicted using a neural network architecture that stacks recurrent (LSTM (Hochreiter and Schmidhuber, 1997) ) and convolutional layers."}, {"id": 69, "string": "Words and tags are first mapped to sequences of embeddings e w 0 , ..., e w n and e t 0 , ..., e t n ."}, {"id": 70, "string": "Then the word embeddings and the tag embeddings are concatenated together as inputs for a stack of bidirectional LSTM layers: h w 0 , ..., h w n = BiLSTM w ([e w 0 , e t 0 ], ..., [e w n , e t n ]) (2) where BiLSTM w (\u00b7) is the word-level bidirectional layer, which gives the model enough capacity to capture long-term syntactical relations between words."}, {"id": 71, "string": "To predict the constituent labels for each word, we pass the hidden states representations h w 0 , ..., h w n through a 2-layer network FF w c , with softmax output: p(c w i |w) = softmax(FF w c (h w i )) (3) To compose the necessary information for inferring the syntactic distances and the constituency label information, we perform an additional convolution: g s 1 , ."}, {"id": 72, "string": "."}, {"id": 73, "string": "."}, {"id": 74, "string": ", g s n = CONV(h w 0 , ..., h w n ) (4) where g s i can be seen as a draft representation for each split position in Algorithm 2."}, {"id": 75, "string": "Note that the subscripts of g s i s start with 1, since we have n \u2212 1 positions as non-terminal constituents."}, {"id": 76, "string": "Then, we stack a bidirectional LSTM layer on top of g s i : h s 1 , ..., h s n = BiLSTM s (g s 1 , ."}, {"id": 77, "string": "."}, {"id": 78, "string": "."}, {"id": 79, "string": ", g s n ) (5) where BiLSTM s fine-tunes the representation by conditioning on other split position representations."}, {"id": 80, "string": "Interleaving between LSTM and convolution layers turned out empirically to be the best choice over multiple variations of the model, including using self-attention (Vaswani et al., 2017) instead of LSTM."}, {"id": 81, "string": "To calculate the syntactic distances for each position, the vectors h s 1 , ."}, {"id": 82, "string": "."}, {"id": 83, "string": "."}, {"id": 84, "string": ", h s n are transformed through a 2-layer feed-forward network FF d with a single output unit (this can be done in parallel with 1x1 convolutions), with no activation function at the output layer: d i = FF d (h s i ), (6) For predicting the constituent labels, we pass the same representations h s 1 , ."}, {"id": 85, "string": "."}, {"id": 86, "string": "."}, {"id": 87, "string": ", h s n through another 2-layer network FF s c , with softmax output."}, {"id": 88, "string": "p(c s i |w) = softmax(FF s c (h s i )) (7) The overall architecture is shown in Figure 2a ."}, {"id": 89, "string": "Since the output (d, c, t) can be unambiguously transfered to a unique parse tree, the model implicitly makes all parsing decisions inside the recurrent and convolutional layers."}, {"id": 90, "string": "Objective Given a set of training examples D = { d k , c k , t k , w k } K k=1 , the training objective is the sum of the prediction losses of syntactic distances d k and constituent labels c k ."}, {"id": 91, "string": "Due to the categorical nature of variable c, we use a standard softmax classifier with a crossentropy loss L label for constituent labels, using the estimated probabilities obtained in Eq."}, {"id": 92, "string": "3 and 7."}, {"id": 93, "string": "A na\u00efve loss function for estimating syntactic distances is the mean-squared error (MSE): The MSE loss forces the model to regress on the exact value of the true distances."}, {"id": 94, "string": "Given that only the ranking induced by the ground-truth distances in d is important, as opposed to the absolute values themselves, using an MSE loss over-penalizes the model by ignoring ranking equivalence between different predictions."}, {"id": 95, "string": "Therefore, we propose to minimize a pair-wise learning-to-rank loss, similar to those proposed in (Burges et al., 2005) ."}, {"id": 96, "string": "We define our loss as a variant of the hinge loss as: L mse dist = i (d i \u2212d i ) 2 (8) L rank dist = i,j>i [1 \u2212 sign(d i \u2212 d j )(d i \u2212d j )] + , (9) where [x] + is defined as max(0, x)."}, {"id": 97, "string": "This loss encourages the model to reproduce the full ranking order induced by the ground-truth distances."}, {"id": 98, "string": "The final loss for the overall model is just the sum of individual losses L = L label + L rank dist ."}, {"id": 99, "string": "Experiments We evaluate our model described above on 2 different datasets, the standard Wall Street Journal (WSJ) part of the Penn Treebank (PTB) dataset, and the Chinese Treebank (CTB) dataset."}, {"id": 100, "string": "For evaluating the F1 score, we use the standard evalb 1 tool."}, {"id": 101, "string": "We provide both labeled and unlabeled F1 score, where the former takes into consideration the constituent label for each predicted 1 http://nlp.cs.nyu.edu/evalb/ constituent, while the latter only considers the position of the constituents."}, {"id": 102, "string": "In the tables below, we report the labeled F1 scores for comparison with previous work, as this is the standard metric usually reported in the relevant literature."}, {"id": 103, "string": "Penn Treebank For the PTB experiments, we follow the standard train/valid/test separation and use sections 2-21 for training, section 22 for development and section 23 for test set."}, {"id": 104, "string": "Following this split, the dataset has 45K training sentences and 1700, 2416 sentences for valid/test respectively."}, {"id": 105, "string": "The placeholders with the -NONE-tag are stripped from the dataset during preprocessing."}, {"id": 106, "string": "The POS tags are predicted with the Stanford Tagger (Toutanova et al., 2003) ."}, {"id": 107, "string": "We use a hidden size of 1200 for each direction on all LSTMs, with 0.3 dropout in all the feedforward connections, and 0.2 recurrent connection dropout (Merity et al., 2017) ."}, {"id": 108, "string": "The convolutional filter size is 2."}, {"id": 109, "string": "The number of convolutional channels is 1200."}, {"id": 110, "string": "As a common practice for neural network based NLP models, the embedding layer that maps word indexes to word embeddings is randomly initialized."}, {"id": 111, "string": "The word embeddings are sized 400."}, {"id": 112, "string": "Following (Merity et al., 2017) , we randomly swap an input word embedding during training with the zero vector with probability of 0.1."}, {"id": 113, "string": "We found this helped the model to generalize better."}, {"id": 114, "string": "Training is conducted with Adam algorithm with l2 regularization decay 1 \u00d7 10 \u22126 ."}, {"id": 115, "string": "We pick the result obtaining the highest labeled F1 Table 3 ."}, {"id": 116, "string": "Our model performs achieves good performance for single-model constituency parsing trained without external data."}, {"id": 117, "string": "The best result from (Stern et al., 2017b) is obtained by a generative model."}, {"id": 118, "string": "Very recently, we came to knowledge of Gaddy et al."}, {"id": 119, "string": "(2018) , which uses character-level LSTM features coupled with chart-based parsing to improve performance."}, {"id": 120, "string": "Similar sub-word features can be also used in our model."}, {"id": 121, "string": "We leave this investigation for future works."}, {"id": 122, "string": "For comparison, other models obtaining better scores either use ensembles, benefit from semi-supervised learning, or recur to re-ranking of a set of candidates."}, {"id": 123, "string": "Chinese Treebank We use the Chinese Treebank 5.1 dataset, with articles 001-270 and 440-1151 for training, articles  for test set."}, {"id": 124, "string": "This is a standard split in the literature (Liu and Zhang, 2017b) ."}, {"id": 125, "string": "The -NONE-tags are stripped as well."}, {"id": 126, "string": "The hidden size for the LSTM networks is set to 1200."}, {"id": 127, "string": "We use a dropout rate of 0.4 on the feed-forward connections, and 0.1 recurrent connection dropout."}, {"id": 128, "string": "The convolutional layer has 1200 channels, with a filter size of 2."}, {"id": 129, "string": "We use 400 dimensional word embeddings."}, {"id": 130, "string": "During training, input word embeddings are randomly swapped with the zero vector with probability of 0.1."}, {"id": 131, "string": "We also apply a l2 regularization weighted by 1\u00d710 \u22126 on the parameters of the network."}, {"id": 132, "string": "Table 2 reports our results compared to other benchmarks."}, {"id": 133, "string": "To the best of our knowledge, we set a new stateof-the-art for single-model parsing achieving 86.5 F1 on the test set."}, {"id": 134, "string": "The detailed statistics are shown in Table 3 ."}, {"id": 135, "string": "Ablation Study We perform an ablation study by removing components from a network trained with the best set of hyperparameters, and re-train the ablated version from scratch."}, {"id": 136, "string": "This gives an idea of the relative contributions of each of the components in the model."}, {"id": 137, "string": "Results are reported in   imented by using 300D GloVe (Pennington et al., 2014) embedding for the input layer but this didn't yield improvements over the model's best performance."}, {"id": 138, "string": "Unsurprisingly, the model trained with MSE loss underperforms considerably a model trained with the rank loss."}, {"id": 139, "string": "Parsing Speed The prediction of syntactic distances can be batched in modern GPU architectures."}, {"id": 140, "string": "The distance to tree conversion is a O(n log n) (n stand for the number of words in the input sentence) divide-and-conquer algorithm."}, {"id": 141, "string": "We compare the parsing speed of our parser with other state-ofthe-art neural parsers in Table 5 ."}, {"id": 142, "string": "As the syntactic distance computation can be performed in parallel within a GPU, we first compute the distances in a batch, then we iteratively decode the tree with Algorithm 2."}, {"id": 143, "string": "It is worth to note that this comparison may be unfair since some of the reported results may use very different hardware settings."}, {"id": 144, "string": "We couldn't find the source code to re-run them on our hardware, to give a fair enough comparison."}, {"id": 145, "string": "In our setting, we use an NVIDIA TITAN Xp graphics card for running the neural network part, and the distance to tree inference is run on an Intel Core i7-6850K CPU, with 3.60GHz clock speed."}, {"id": 146, "string": "Model # sents/sec Petrov and Klein (2007) 6.2 Zhu et al."}, {"id": 147, "string": "(2013) 89.5 Liu and Zhang (2017b) 79.2 Stern et al."}, {"id": 148, "string": "(2017a) 75.5 Our model 111.1 Our model w/o tree inference 351 Related Work Parsing natural language with neural network models has recently received growing attention."}, {"id": 149, "string": "These models have attained state-of-the-art results for dependency parsing (Chen and Manning, 2014) and constituency parsing (Dyer et al., 2016; Cross and Huang, 2016; Coavoux and Crabb\u00e9, 2016) ."}, {"id": 150, "string": "Early work in neural network based parsing directly use a feed-forward neural network to predict parse trees (Chen and Manning, 2014) ."}, {"id": 151, "string": "Vinyals et al."}, {"id": 152, "string": "(2015) use a sequence-tosequence framework where the decoder outputs a linearized version of the parse tree given an input sentence."}, {"id": 153, "string": "Generally, in these models, the correctness of the output tree is not strictly ensured (although empirically observed)."}, {"id": 154, "string": "Other parsing methods ensure structural consistency by operating in a transition-based setting (Chen and Manning, 2014) by parsing either in the top-down direction (Dyer et al., 2016; Liu and Zhang, 2017b) , bottom-up (Zhu et al., 2013; Watanabe and Sumita, 2015; Cross and Huang, 2016) and recently in-order (Liu and Zhang, 2017a) ."}, {"id": 155, "string": "Transition-based methods generally suffer from compounding errors due to exposure bias: during testing, the model is exposed to a very different regime (i.e."}, {"id": 156, "string": "decisions sampled from the model itself) than what was encountered during training (i.e."}, {"id": 157, "string": "the ground-truth decisions) (Daum\u00e9 et al., 2009; Goldberg and Nivre, 2012) ."}, {"id": 158, "string": "This can have catastrophic effects on test performance but can be mitigated to a certain extent by using beamsearch instead of greedy decoding."}, {"id": 159, "string": "(Stern et al., 2017b) proposes an effective inference method for generative parsing, which enables direct decoding in those models."}, {"id": 160, "string": "More complex training methods have been devised in order to alleviate this problem (Goldberg and Nivre, 2012; Cross and Huang, 2016) ."}, {"id": 161, "string": "Other efforts have been put into neural chart-based parsing (Durrett and Klein, 2015; Stern et al., 2017a) which ensure structural consistency and offer exact inference with CYK algorithm."}, {"id": 162, "string": "(Gaddy et al., 2018) includes a simplified CYK-style inference, but the complexity still remains in O(n 3 )."}, {"id": 163, "string": "In this work, our model learns to produce a particular representation of a tree in parallel."}, {"id": 164, "string": "Representations can be computed in parallel, and the conversion from representation to a full tree can efficiently be done with a divide-and-conquer algorithm."}, {"id": 165, "string": "As our model outputs decisions in parallel, our model doesn't suffer from the exposure bias."}, {"id": 166, "string": "Interestingly, a series of recent works, both in machine translation (Gu et al., 2018) and speech synthesis (Oord et al., 2017) , considered the sequence of output variables conditionally independent given the inputs."}, {"id": 167, "string": "Conclusion We presented a novel constituency parsing scheme based on predicting real-valued scalars, named syntactic distances, whose ordering identify the sequence of top-down split decisions."}, {"id": 168, "string": "We employ a neural network model that predicts the distances d and the constituent labels c. Given the algorithms presented in Section 2, we can build an unambiguous mapping between each (d, c, t) and a parse tree."}, {"id": 169, "string": "One peculiar aspect of our model is that it predicts split decisions in parallel."}, {"id": 170, "string": "Our experiments show that our model can achieve strong performance compare to previous models, while being significantly more efficient."}, {"id": 171, "string": "Since the architecture of model is no more than a stack of standard recurrent and convolution layers, which are essential components in most academic and industrial deep learning frameworks, the deployment of this method would be straightforward."}], "headers": [{"section": "Introduction", "n": "1", "start": 0, "end": 18}, {"section": "Syntactic Distances of a Parse Tree", "n": "2", "start": 19, "end": 62}, {"section": "Learning Syntactic Distances", "n": "3", "start": 63, "end": 65}, {"section": "Model Architecture", "n": "3.1", "start": 66, "end": 98}, {"section": "Experiments", "n": "4", "start": 99, "end": 102}, {"section": "Penn Treebank", "n": "4.1", "start": 103, "end": 122}, {"section": "Chinese Treebank", "n": "4.2", "start": 123, "end": 134}, {"section": "Ablation Study", "n": "4.3", "start": 135, "end": 138}, {"section": "Parsing Speed", "n": "4.4", "start": 139, "end": 147}, {"section": "Related Work", "n": "5", "start": 148, "end": 166}, {"section": "Conclusion", "n": "6", "start": 167, "end": 171}], "figures": [{"filename": "../figure/image/1305-Figure1-1.png", "caption": "Figure 1: An example of how syntactic distances (d1 and d2) describe the structure of a parse tree: consecutive words with larger predicted distance are split earlier than those with smaller distances, in a process akin to divisive clustering.", "page": 0, "bbox": {"x1": 355.68, "x2": 477.12, "y1": 221.76, "y2": 336.96}}, {"filename": "../figure/image/1305-Table1-1.png", "caption": "Table 1: Results on the PTB dataset WSJ test set, Section 23. LP, LR represents labeled precision and recall respectively.", "page": 5, "bbox": {"x1": 72.0, "x2": 291.36, "y1": 62.879999999999995, "y2": 381.12}}, {"filename": "../figure/image/1305-Table2-1.png", "caption": "Table 2: Test set performance comparison on the CTB dataset", "page": 5, "bbox": {"x1": 306.71999999999997, "x2": 526.0799999999999, "y1": 62.879999999999995, "y2": 299.03999999999996}}, {"filename": "../figure/image/1305-Table4-1.png", "caption": "Table 4: Ablation test on the PTB dataset. \u201cw/o top LSTM\u201d is the full model without the top LSTM layer. \u201cw. embedding\u201d stands for the full model using the pretrained word embeddings. \u201cw. MSE loss\u201d stands for the full model trained with MSE loss.", "page": 6, "bbox": {"x1": 103.67999999999999, "x2": 259.2, "y1": 174.72, "y2": 247.2}}, {"filename": "../figure/image/1305-Table3-1.png", "caption": "Table 3: Detailed experimental results on PTB and CTB datasets", "page": 6, "bbox": {"x1": 148.79999999999998, "x2": 448.32, "y1": 62.879999999999995, "y2": 132.96}}, {"filename": "../figure/image/1305-Table5-1.png", "caption": "Table 5: Parsing speed in sentences per second on the PTB dataset.", "page": 6, "bbox": {"x1": 319.68, "x2": 513.12, "y1": 174.72, "y2": 274.08}}, {"filename": "../figure/image/1305-Figure2-1.png", "caption": "Figure 2: Inferring the parse tree with Algorithm 2 given distances, constituent labels, and POS tags. Starting with the full sentence, we pick split point 1 (as it is assigned to the larger distance) and assign label S to span (0,5). The left child span (0,1) is assigned with a tag PRP and a label NP, which produces an unary node and a terminal node. The right child span (1,5) is assigned the label \u2205, coming from implicit binarization, which indicates that the span is not a real constituent and all of its children are instead direct children of its parent. For the span (1,5), the split point 4 is selected. The recursion of splitting and labeling continues until the process reaches a terminal node.", "page": 2, "bbox": {"x1": 72.0, "x2": 516.48, "y1": 61.44, "y2": 271.68}}, {"filename": "../figure/image/1305-Figure3-1.png", "caption": "Figure 3: The overall visualization of our model. Circles represent hidden states, triangles represent convolution layers, block arrows represent feed-forward layers, arrows represent recurrent connections. The bottom part of the model predicts unary labels for each input word. The \u2205 is treated as a special label together with other labels. The top part of the model predicts the syntactic distances and the constituent labels. The inputs of model are the word embeddings concatenated with the POS tag embeddings. The tags are given by an external Part-Of-Speech tagger.", "page": 4, "bbox": {"x1": 116.64, "x2": 481.44, "y1": 61.44, "y2": 216.95999999999998}}]}