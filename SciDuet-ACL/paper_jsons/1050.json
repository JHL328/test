{"title": "Guiding Extractive Summarization with Question-Answering Rewards", "abstract": "Highlighting while reading is a natural behavior for people to track salient content of a document. It would be desirable to teach an extractive summarizer to do the same. However, a major obstacle to the development of a supervised summarizer is the lack of ground-truth. Manual annotation of extraction units is costprohibitive, whereas acquiring labels by automatically aligning human abstracts and source documents can yield inferior results. In this paper we describe a novel framework to guide a supervised, extractive summarization system with question-answering rewards. We argue that quality summaries should serve as a document surrogate to answer important questions, and such question-answer pairs can be conveniently obtained from human abstracts. The system learns to promote summaries that are informative, fluent, and perform competitively on question-answering. Our results compare favorably with those reported by strong summarization baselines as evaluated by automatic metrics and human assessors.", "text": [{"id": 0, "string": "Introduction Our increasingly digitized lifestyle calls for summarization techniques to produce short and accurate summaries that can be accessed at any time."}, {"id": 1, "string": "These summaries should factually adhere to the content of the source text and present the reader with the key points therein."}, {"id": 2, "string": "Although neural abstractive summarization has shown promising results (Rush et al., 2015; Nallapati et al., 2016; See et al., 2017) , these methods can have potential drawbacks."}, {"id": 3, "string": "It was revealed that abstracts generated by neural systems sometimes alter or falsify objective details, and introduce new meanings not present in the original text (Cao et al., 2018) ."}, {"id": 4, "string": "Reading these abstracts can lead to misinterpretation of the source materials, which is clearly undesirable."}, {"id": 5, "string": "In this work, we focus on extractive summarization, where the summaries are guaranteed (CNN) A judge this week sentenced a former TSA agent to six months in jail for secretly videotaping a female co-worker while she was in the bathroom, prosecutors said."}, {"id": 6, "string": "During the investigation, detectives with the Metro Nashville Police Department in Tennessee also found that the agent, 33-year-old Daniel Boykin, entered the woman's home multiple times, where he took videos, photos and other data."}, {"id": 7, "string": "Police found more than 90 videos and 1,500 photos of the victim on Boykin's phone and computer ."}, {"id": 8, "string": "The victim filed a complaint after seeing images of herself on his phone last year."}, {"id": 9, "string": "[...] Comprehension Questions (Human Abstract): Former Daniel Boykin, 33, videotaped his female co-worker in the restroom, authorities say."}, {"id": 10, "string": "Authorities say they found 90 videos and 1,500 photos of the victim on and computer."}, {"id": 11, "string": "to remain faithful to the original content."}, {"id": 12, "string": "Our system seeks to identify salient and consecutive sequences of words from the source document, and highlight them in the text to assist users in browsing and comprehending lengthy documents."}, {"id": 13, "string": "An example is illustrated in Table 1 ."}, {"id": 14, "string": "A primary challenge faced by extractive summarizers is the lack of annotated data."}, {"id": 15, "string": "The cost of hiring humans to label a necessary amount of source articles with summary words, good for training a modern classifier, can be prohibitive."}, {"id": 16, "string": "Previous work has exploited using human abstracts to derive labels for extraction units (Woodsend and Lapata, 2010) ."}, {"id": 17, "string": "E.g., a source word is tagged 1 if it appears in the abstract, 0 otherwise."}, {"id": 18, "string": "Although pairs of source articles and human abstracts are abundant, labels derived in this way are not necessarily best since summary saliency can not be easily captured with a rule based categorization."}, {"id": 19, "string": "Considering that human abstracts involve generalization, paraphrasing, and can con-tain words not present in the source text, leveraging them to derive labels for extraction units can be suboptimal."}, {"id": 20, "string": "In this work, we investigate a new strategy that seeks to better utilize human abstracts to guide the extraction of summary text units."}, {"id": 21, "string": "We hypothesize that quality extractive summaries should contain informative content so that they can be used as document surrogates to answer important questions, thereby satisfying users' information needs."}, {"id": 22, "string": "The question-answer pairs can be conveniently developed from human abstracts."}, {"id": 23, "string": "Our proposed approach identifies answer tokens from each sentence of the human abstract, then replaces each answer token with a blank to create a Cloze-style question-answer pair."}, {"id": 24, "string": "To answer all questions (\u2248human abstract), the system summary must contain content that is semantically close to and collectively resembles the human abstract."}, {"id": 25, "string": "In this paper, we construct an extractive summary by selecting consecutive word sequences from the source document."}, {"id": 26, "string": "To accomplish this we utilize a novel reinforcement learning framework to explore the space of possible extractive summaries and assess each summary using a novel reward function judging the summary's adequacy, fluency, length, and its competency to answer important questions."}, {"id": 27, "string": "The system learns to sample extractive summaries yielding the highest expected rewards, with no pre-derived extraction labels needed."}, {"id": 28, "string": "This work extends the methodology of Arumae and Liu (2018) with new representations of extraction units and thorough experimental evaluation."}, {"id": 29, "string": "The contributions of this research can be summarized as follows: \u2022 we describe a novel framework generating extractive summaries by selecting consecutive sequences of words from source documents."}, {"id": 30, "string": "This new system explores various encoding mechanisms, as well as new sampling techniques to capture phrase level data."}, {"id": 31, "string": "Such a framework has not been thoroughly investigated in the past; \u2022 We conduct a methodical empirical evaluation from the point of view of information saliency."}, {"id": 32, "string": "Rather than solely relying on automatic summarization evaluation methods, we also show the advantages of our system by assessing the summary quality with reading comprehension tasks."}, {"id": 33, "string": "Our summaries compare favorably with the automatic metrics against state of the art, and show promising results against baselines when evaluated by humans for question answering."}, {"id": 34, "string": "Related Work Extractive summarization has seen growing popularity in the past decades (Nenkova and McKeown, 2011) ."}, {"id": 35, "string": "The methods focus on selecting representative sentences from the document(s) and optionally deleting unimportant sentence constituents to form a summary (Knight and Marcu, 2002; Radev et al., 2004; Zajic et al., 2007; Martins and Smith, 2009; Gillick and Favre, 2009; Lin and Bilmes, 2010; Wang et al., 2013; Li et al., 2013 Li et al., , 2014 Hong et al., 2014; Yogatama et al., 2015) ."}, {"id": 36, "string": "A majority of the methods are unsupervised."}, {"id": 37, "string": "They estimate sentence importance based on the sentence's length and position in the document, whether the sentence contains topical content and its relationship with other sentences."}, {"id": 38, "string": "The summarization objective is to select a handful of sentences to maximize the coverage of important content while minimizing summary redundancy."}, {"id": 39, "string": "Although unsupervised methods are promising, they cannot benefit from the large-scale training data harvested from the Web (Sandhaus, 2008; Hermann et al., 2015; Grusky et al., 2018) ."}, {"id": 40, "string": "Neural extractive summarization has focused primarily on extracting sentences (Nallapati et al., 2017; Cao et al., 2017; Isonuma et al., 2017; Tarnpradab et al., 2017; Zhou et al., 2018; Kedzie et al., 2018) ."}, {"id": 41, "string": "These studies exploit parallel training data consisting of source articles and story highlights (i.e., human abstracts) to create ground-truth labels for sentences."}, {"id": 42, "string": "A neural extractive summarizer learns to predict a binary label for each source sentence indicating if it is to be included in the summary."}, {"id": 43, "string": "These studies build distributed sentence representations using neural networks (Cheng and Lapata, 2016; Yasunaga et al., 2017) and use reinforcement learning to optimize the evaluation metric (Narayan et al., 2018b) and improve summary coherence (Wu and Hu, 2018) ."}, {"id": 44, "string": "However, sentence extraction can be coarse and in many cases, only a part of the sentence is worthy to be added to the summary."}, {"id": 45, "string": "In this study, we perform finer-grained extractive summarization by allowing the system to select consecutive sequences of words rather than sentences to form a summary."}, {"id": 46, "string": "Interestingly, studies reveal that summaries generated by recent neural abstractive systems are, in fact, quite \"extractive.\""}, {"id": 47, "string": "Abstractive systems often adopt the encoder-decoder architecture with an attention mechanism (Rush et al., 2015; Nallapati et al., 2016; Paulus et al., 2017; Guo et al., 2018; Gehrmann et al., 2018; Lebanoff et al., 2018; Ce-likyilmaz et al., 2018) ."}, {"id": 48, "string": "The encoder condenses a source sequence to a fixed-length vector and the decoder takes the vector as input and generates a summary by predicting one word at a time."}, {"id": 49, "string": "See, Liu, and Manning (2017) suggest that about 35% of the summary sentences occur in the source documents, and 90% of summary n-grams appear in the source."}, {"id": 50, "string": "Moreover, the summaries may contain inaccurate factual details and introduce new meanings not present in the original text (Cao et al., 2018; ."}, {"id": 51, "string": "It thus raises concerns as to whether such systems can be used in realworld scenarios to summarize materials such as legal documents."}, {"id": 52, "string": "In this work, we choose to focus on extractive summarization where selected word sequences can be highlighted on the source text to avoid change of meaning."}, {"id": 53, "string": "Our proposed method is inspired by the work of Lei et al."}, {"id": 54, "string": "(2016) who seek to identify rationales from textual input to support sentiment classification and question retrieval."}, {"id": 55, "string": "Distinct from this previous work, we focus on generating generic document summaries."}, {"id": 56, "string": "We present a novel supervised framework encouraging the selection of consecutive sequences of words to form an extractive summary."}, {"id": 57, "string": "Further, we leverage reinforcement learning to explore the space of possible extractive summaries and promote those that are fluent, adequate, and competent in question answering."}, {"id": 58, "string": "We seek to test the hypothesis that successful summaries can serve as document surrogates to answer important questions, and moreover, ground-truth questionanswer pairs can be derived from human abstracts."}, {"id": 59, "string": "In the following section we describe our proposed approach in details."}, {"id": 60, "string": "Our Approach Let S be an extractive summary consisting of text segments selected from a source document x."}, {"id": 61, "string": "The summary can be mapped to a sequence of binary labels y assigned to document words."}, {"id": 62, "string": "In this section we first present a supervised framework for identifying consecutive sequences of words that are summary-worthy, then proceed by describing our question-answering rewards and a deep reinforcement learning framework to guide the selection of summaries so that they can be used as document surrogates to answer important questions."}, {"id": 63, "string": "1 Representing an Extraction Unit How best to decompose a source document into a set of text units useful for extractive summarization remains an open problem."}, {"id": 64, "string": "A natural choice is to use words as extraction units."}, {"id": 65, "string": "However, this choice ignores the cohesiveness of text."}, {"id": 66, "string": "A text chunk (e.g., a prepositional phrase) can be either selected to the summary in its entirety or not at all."}, {"id": 67, "string": "In this paper we experiment with both schemes, using either words or chunks as extraction units."}, {"id": 68, "string": "When a text chunk is selected in the summary, all its consisting words are selected."}, {"id": 69, "string": "We obtain text chunks by breaking down the sentence constituent parse tree in a top-down manner until each tree fragment governs at most 5 words."}, {"id": 70, "string": "A chunk thus can contain from 1 to 5 words."}, {"id": 71, "string": "Additionally, word level modeling can be considered a special case of chunks where the length of each phrase is 1."}, {"id": 72, "string": "It is important to note that using sentences as extraction units is out of the scope of this paper, because our work focuses on finer-grained extraction units such as words and phrases and this is notably a more challenging task."}, {"id": 73, "string": "The most successful neural models for encoding a piece of text to a fixed-length vector include the recurrent (Hochreiter and Schmidhuber, 1997) and convolutional neural networks (CNN; Kim et al., 2014) , among others."}, {"id": 74, "string": "A recent study by Khandelwal et al."}, {"id": 75, "string": "(2018) reported that the recurrent networks are capable of memorizing a recent context of about 20 tokens and the model is highly sensitive to word order, whereas this is less the case for CNN whose max-pooling operation makes it agnostic to word order."}, {"id": 76, "string": "We implement both networks and are curious to compare their effectiveness at encoding extraction units for summarization."}, {"id": 77, "string": "{h e t } = f Bi-LSTM 1 (x) (1) or {h e t } = f CNN 2 (x) (2) Our model first encodes the source document using a bidirectional LSTM with the forward and backward passes (Eq."}, {"id": 78, "string": "(1))."}, {"id": 79, "string": "The representation of the t-th source word h e t = [ \u2190 \u2212 h e t || \u2212 \u2192 h e t ] is the con- catenation of the hidden states in both directions."}, {"id": 80, "string": "A chunk is similarly denoted by h e t = [ \u2190 \u2212 h e t || \u2212 \u2192 h e t+n ] where t and t + n are the indices of its beginning and ending words."}, {"id": 81, "string": "In both cases, a fixed-length vector (h e t \u2208 R m ) is created for the word/chunk."}, {"id": 82, "string": "Further, our CNN encoder (Eq."}, {"id": 83, "string": "(2)) uses a sliding window of {1,3,5,7} words, corresponding to the kernel sizes, to scan through the source document."}, {"id": 84, "string": "We apply a number of filters to each window size to extract local features."}, {"id": 85, "string": "The t-th source word is represented by the concatenation of feature maps (an m-dimensional vector)."}, {"id": 86, "string": "To obtain the chunk vector we perform max-pooling over the representations of its consisting words (from t to t + n)."}, {"id": 87, "string": "In the following we use h e t to denote the vector representation of the t-th extraction unit, may it be a word or a chunk, generated using either encoder."}, {"id": 88, "string": "Constructing an Extractive Summary It is desirable to first develop a supervised framework for identifying summary-worthy text segments from a source article."}, {"id": 89, "string": "These segments collectively form an extractive summary to be highlighted on the source text."}, {"id": 90, "string": "The task can be formulated as a sequence labeling problem: a source text unit (a word or chunk) is labelled 1 if it is to be included in the summary and 0 otherwise."}, {"id": 91, "string": "It is not unusual to develop an auto-regressive model to perform sequence labeling, where the label of the t-th extraction unit (y t ) depends on all previous labels (y <t )."}, {"id": 92, "string": "Given this hypothesis, we build a framework to extract summary units where the importance of the t-th source unit is characterized by its informativeness (encoded in h e t ), its position in the document, and relationship with the partial summary."}, {"id": 93, "string": "The details are presented below."}, {"id": 94, "string": "We use a positional embedding (g t ) to signify the position of the t-th text unit in the source document."}, {"id": 95, "string": "The position corresponds to the index of the source sentence containing the t-th unit, and further, all text units belonging to the same sentence share the same positional embedding."}, {"id": 96, "string": "We apply sinusoidal initialization to the embeddings, following Vaswani et al."}, {"id": 97, "string": "(2017) ."}, {"id": 98, "string": "Importantly, positional embeddings allow us to inject macro-positional knowledge about words/chunks into a neural summarization framework to offset the natural bias that humans tend to have on putting important content at the beginning of an article."}, {"id": 99, "string": "Next, we build a representation for the partial summary to aid the system in selecting future text units."}, {"id": 100, "string": "The representation s t is expected to encode the extraction decisions up to time t-1 and it can be realized using a unidirectional LSTM network (Eq."}, {"id": 101, "string": "(3))."}, {"id": 102, "string": "The t-th input to the network is represented as y t\u22121 \u2297 h e t\u22121 where y t\u22121 is a binary label serving as a gating mechanism to control if the semantic content of the previous text unit (h e t\u22121 ) is to be included in the summary (\"\u2297\" corresponds to elementwise product)."}, {"id": 103, "string": "During training, we apply teacher forcing and y t\u22121 is the ground-truth extraction label for the (t \u2212 1)-th unit; at test time, Figure 1 : A unidirectional LSTM (blue, Eq."}, {"id": 104, "string": "(3)) encodes the partial summary, while the multilayer perceptron network (orange, Eq."}, {"id": 105, "string": "(4-5)) utilizes the text unit representation (h e t ), its positional embedding (gt), and the partial summary representation (st) to determine if the t-th text unit is to be included in the summary."}, {"id": 106, "string": "Best viewed in color."}, {"id": 107, "string": "g t 1 g t g t+1 g t+2 s t+2 s t+1 s t s t 1 h e t 1 h e t h e t+1 h e t+2 y t\u22121 is generated on-the-fly by obtaining the label yielding the highest probability according to Eq."}, {"id": 108, "string": "(5)."}, {"id": 109, "string": "In the previous work of Cheng and Lapata (2016) and Nallapati et al."}, {"id": 110, "string": "(2017) , similar auto-regressive models are developed to identify summary sentences."}, {"id": 111, "string": "Different from the previous work, this study focuses on extracting consecutive sequences of words and chunks from the source document, and the partial summary representation is particularly useful for predicting if the next unit is to be included in the summary to improve summary fluency."}, {"id": 112, "string": "s t = f Uni-LSTM 3 (s t\u22121 , y t\u22121 \u2297 h e t\u22121 ) (3) Given the partial summary representation (s t ), and representation of the text unit (h e t ) and its positional encoding (g t ), we employ a multilayer perceptron to predict how likely the unit is to be included in the summary."}, {"id": 113, "string": "This process is described by Eqs."}, {"id": 114, "string": "(4-5) and further illustrated in Figure 1 ."}, {"id": 115, "string": "a t = f ReLU (W a [h e t ; g t ; s t ] + b a ) (4) p(y t |y <t , x) = \u03c3(w y a t + b y ) (5) Our model parameters include {W a , b a , w y , b y } along with those required by f Bi-LSTM 1 , f CNN 2 and f Uni-LSTM 3 ."}, {"id": 116, "string": "It is possible to train this model in a fully supervised fashion by minimizing the negative log-likelihood of the training data."}, {"id": 117, "string": "We generate ground-truth labels for source text units as follows."}, {"id": 118, "string": "A source word receives a label of 1 if both itself and its adjacent word appear in the human abstract (excluding cases where both words are stopwords)."}, {"id": 119, "string": "This heuristic aims to label consecutive source words (2 or more) as summaryworthy, as opposed to picking single words which can be less informative."}, {"id": 120, "string": "A source text chunk receives a label of 1 if one of its component words is labelled 1 in the above process."}, {"id": 121, "string": "Because human abstracts are often short and contain novel words not present in source documents, they can be suboptimal for generating ground-truth labels for extraction units."}, {"id": 122, "string": "Only a small portion of the source words (about 8% in our dataset) are labelled as positive, whereas the vast majority are negative."}, {"id": 123, "string": "Such labels can be ineffective in providing supervision."}, {"id": 124, "string": "In the following section, we investigate a new learning paradigm, which encourages extractive summaries to contain informative content useful for answering important questions, while question-answer pairs can be automatically derived from human abstracts."}, {"id": 125, "string": "Using Summaries to Answer Questions Our hypothesis is that high-quality summaries should contain informative content making them appropriate to serve as document surrogates to satisfy users' information needs."}, {"id": 126, "string": "We train the extractive summarizer to identify source text units necessary for answering questions, and the questionanswer (QA) pairs can be conveniently developed from human abstracts."}, {"id": 127, "string": "To obtain QA pairs, we set an answer token to be either a salient word or a named entity to limit the space of potential answers."}, {"id": 128, "string": "For any sentence in the human abstract, we identify an answer token from it, then replace the answer token with a blank to create a Cloze-style question-answer pair (see Table 1 )."}, {"id": 129, "string": "When a sentence contains multiple answer tokens, a set of QA pairs can be obtained from it."}, {"id": 130, "string": "It is important to note that at least one QA pair should be extracted from each sentence of the abstract."}, {"id": 131, "string": "Because a system summary is trained to contain content useful for answering all questions (\u2248human abstract), any missing QA pair is likely to cause the summary to be insufficient."}, {"id": 132, "string": "We collect answer tokens using the following methods: (a) we extract a set of entities with tag {PER, LOC, ORG, MISC} from each sentence using the Stanford CoreNLP toolkit ; (b) we also identify the ROOT word of each sentence's dependency parse tree along with the sentence's subject/object word, whose type is {NSUBJ, CSUBJ, OBJ, IOBJ} (if exists), then add them to the collection of answer tokens."}, {"id": 133, "string": "Further, we prune the answer space by excluding those which appear fewer than 5 times overall."}, {"id": 134, "string": "Having several methods for question construction allows us to explore the answer space properly."}, {"id": 135, "string": "In the results section we perform experiments on root, subject/object, and named entities to see which model provides the best extraction guide."}, {"id": 136, "string": "Given an extractive summary S containing a set of source text units, and a collection of questionanswer pairs P = {(Q k , e * k )} K k=1 related to the source document, we want to develop a mechanism leveraging the extractive summary to answer these questions."}, {"id": 137, "string": "We first encode each question Q k to a vector representation (q k )."}, {"id": 138, "string": "This is achieved by concatenating the last hidden states of the forward/backward passes of a bidirectional LSTM (Eq."}, {"id": 139, "string": "(6) )."}, {"id": 140, "string": "Next, we exploit the attention mechanism to locate summary parts that are relevant to answering the k-th question."}, {"id": 141, "string": "Given the attention mechanism, an extractive summary S can be used to answer multiple questions related to the document."}, {"id": 142, "string": "We define \u03b1 t,k to be the semantic relatedness between the t-th source text unit and the k-th question."}, {"id": 143, "string": "Following Chen et al."}, {"id": 144, "string": "(2016a) , we introduce a bilinear term to characterize their relationship (\u03b1 t,k \u221d h e t W \u03b1 q k ; see Eq."}, {"id": 145, "string": "(7) )."}, {"id": 146, "string": "In this process, we consider only those source text units selected in summary S. Using \u03b1 t,k as weights, we then compute a context vector c k condensing summary content related to the k-th question (Eq."}, {"id": 147, "string": "(8)) ."}, {"id": 148, "string": "q k = f Bi-LSTM 4 (Q k ) (6) \u03b1 t,k = exp(h e t W \u03b1 q k ) t exp(h e t W \u03b1 q k ) (7) c k = t \u03b1 t,k h e t (8) u k = [c k ; q k ; |c k \u2212 q k |; c k \u2297 q k ] (9) To predict the most probable answer, we construct a fully-connected network as the output layer."}, {"id": 149, "string": "The input to the network includes a concatenation of the context vector (c k ), question vector (q k ), absolute difference (|c k \u2212 q k |) and element-wise product (c k \u2297 q k ) of the two vectors (Eq."}, {"id": 150, "string": "(9))."}, {"id": 151, "string": "A softmax function is used to estimate a probability distribution over the space of candidate answers: ."}, {"id": 152, "string": "P (e k |S, Q k ) = softmax(W e f ReLU (W u u k + b u ))."}, {"id": 153, "string": "A Reinforcement Learning Framework In this section we introduce a reinforcement learning framework to explore the space of possible extractive summaries and present a novel reward function to promote summaries that are adequate, fluent, restricted in length, and competent in question answering."}, {"id": 154, "string": "Our reward function consists of four components, whose interpolation weights \u03b3, \u03b1, and \u03b2 are tuned on the dev set."}, {"id": 155, "string": "R(y) = R c (y) + \u03b3R a (y) + \u03b1R f (y) + \u03b2R l (y) We define QA competency (Eq."}, {"id": 156, "string": "(10)) as the average log-likelihood of correctly answering questions using the system summary (y)."}, {"id": 157, "string": "A highquality system summary is expected to resemble reference summary by using similar wording."}, {"id": 158, "string": "The adequacy metric (Eq."}, {"id": 159, "string": "(11)) measures the percentage of overlapping unigrams between the system (y) and reference summary (y * )."}, {"id": 160, "string": "The fluency criterion (Eq."}, {"id": 161, "string": "(12)) encourages consecutive sequences of source words to be selected by preventing many 0/1 switches in the label sequence (i.e., |y t \u2212 y t\u22121 |)."}, {"id": 162, "string": "Finally, we limit the summary size by setting the ratio of selected words to be close to a threshold \u03b4 (Eq."}, {"id": 163, "string": "(13) )."}, {"id": 164, "string": "QA R c (y) = 1 K K k=1 log P (e * k |y, Q k ) (10) Adequ."}, {"id": 165, "string": "R a (y) = 1 |y * | U(y, y * ) (11) Fluency R f (y) = \u2212 |y| t=2 |y t \u2212 y t\u22121 | (12) Length R l (y) = \u2212 1 |y| t y t \u2212 \u03b4 (13) The reward function R(y) successfully combines intrinsic measures of summary fluency and adequacy (Goldstein et al., 2005) with extrinsic measure of summary responsiveness to given questions (Dang, 2006; Murray et al., 2008) ."}, {"id": 166, "string": "A reinforcement learning agent finds a policy P (y|x) to maximize the expected reward E P (y|x) [R(y)]."}, {"id": 167, "string": "Training the system with policy gradient (Eq."}, {"id": 168, "string": "(14) ) involves repeatedly sampling an extractive summary\u0177 from the source document x."}, {"id": 169, "string": "At time t, the agent takes an action by sampling a decision based on p(y t |\u0177 <t , x) (Eq."}, {"id": 170, "string": "(5)) indicating whether the t-th source text unit is to be included in the summary."}, {"id": 171, "string": "Once the full summary sequence\u0177 is generated, it is compared to the ground-truth sequence to compute the reward R(\u0177)."}, {"id": 172, "string": "In this way, reinforcement learning explores the space of extractive summaries and promotes those yielding high rewards."}, {"id": 173, "string": "At inference time, rather than sampling actions from p(y t |y <t , x), we choose y t that yields the highest probability to generate the system summary y."}, {"id": 174, "string": "This process is deterministic and no QA is required."}, {"id": 175, "string": "\u2207 \u03b8 E P (y|x) [R(y)] = E P (y|x) [R(y)\u2207 \u03b8 log P (y|x)] \u2248 1 N N n=1 R(\u0177 (n) )\u2207 \u03b8 log P (\u0177 (n) |x) (14) Experiments We proceed by discussing the dataset and settings, comparison systems, and experimental results obtained through both automatic metrics and human evaluation in a reading comprehension setting."}, {"id": 176, "string": "Dataset and Settings Our goal is to build an extractive summarizer identifying important textual segments from source articles."}, {"id": 177, "string": "To investigate the effectiveness of the proposed approach, we conduct experiments on the CNN/Daily Mail dataset using a version provided by See et al."}, {"id": 178, "string": "(2017) ."}, {"id": 179, "string": "The reference summaries of this dataset were created by human editors exhibiting a moderate degree of extractiveness."}, {"id": 180, "string": "E.g., 83% of summary unigrams and 45% of bigrams appear in source articles (Narayan et al., 2018a) ."}, {"id": 181, "string": "On average, a CNN article contains 761 words / 34 sentences and a DM article contains 653 words / 29 sentences."}, {"id": 182, "string": "We report results respectively for the CNN and DM portion of the dataset."}, {"id": 183, "string": "Our hyperparameter settings are as follows."}, {"id": 184, "string": "We set the hidden state dimension of the LSTM to be 256 in either direction."}, {"id": 185, "string": "A bidirectional LSTM f Bi-LSTM 1 (\u00b7) produces a 512-dimensional vector for each content word."}, {"id": 186, "string": "Similarly, f Bi-LSTM 4 (\u00b7) generates a question vector q k of the same size."}, {"id": 187, "string": "Our CNN encoder f CNN 2 (\u00b7) uses multiple window sizes of {1, 3, 5, 7} and 128 filters per window size."}, {"id": 188, "string": "h e t is thus a 512-dimensional vector using either CNN or LSTM encoder."}, {"id": 189, "string": "We set the hidden state dimension of s t to be 128."}, {"id": 190, "string": "We also use 100-dimensional word embeddings (Pennington et al., 2014) and sinusoidal positional encodings (Vaswani et al., 2017) of 30 dimensions."}, {"id": 191, "string": "The maximum article length is set to 400 words."}, {"id": 192, "string": "Compared to the study of Arumae and Liu (2018) , we expand the search space dramatically from 100 to 400 words, which poses a challenge to the RLbased summarizers."}, {"id": 193, "string": "We associate each article with at most 10 QA pairs (K=10) and use them to guide the extraction of summary segments."}, {"id": 194, "string": "We apply mini-batch training with Adam optimizer (Kingma and Ba, 2014) , where a mini-batch contains 128   articles and their QA pairs."}, {"id": 195, "string": "The summary ratio \u03b4 is set to 0.15, yielding extractive summaries of about 60 words."}, {"id": 196, "string": "Following Arumae and Liu (2018) , we set hyperparameters \u03b2 = 2\u03b1; \u03b1 and \u03b3 are tuned on the dev set using grid search."}, {"id": 197, "string": "Experimental Results Comparison systems We compare our method with a number of extractive and abstractive systems that have reported results on the CNN/DM datasets."}, {"id": 198, "string": "We consider non-neural approaches that extract sentences from the source article to form a summary."}, {"id": 199, "string": "These include LexRank (Radev et al., 2004) , SumBasic (Vanderwende et al., 2007) , and KLSum (Haghighi and Vanderwende, 2009) ."}, {"id": 200, "string": "Such methods treat sentences as bags of words, and then select sentences containing topically important words."}, {"id": 201, "string": "We further include the Lead-3 baseline that extracts the first 3 sentences from any given article."}, {"id": 202, "string": "The method has been shown to be a strong baseline for summarizing news articles."}, {"id": 203, "string": "Neural extractive approaches focus on learning vector representations for sentences and words, then performing extraction based on the learned representations."}, {"id": 204, "string": "Cheng et al."}, {"id": 205, "string": "(2016) describe a neural network method composed of a hierarchical document encoder and an attention-based extractor."}, {"id": 206, "string": "The system has two variants: NN-WE extracts words from the source article and NN-SE extracts sentences."}, {"id": 207, "string": "SummaRuNNer (Nallapati et al., 2017) presents an autoregressive sequence labeling method based on recurrent neural networks."}, {"id": 208, "string": "It selects summary sentences based on their content, salience, position, and novelty representations."}, {"id": 209, "string": "Abstractive summarization methods are not directly comparable to our approach, but we choose to include three systems that report results respectively for CNN and DM datasets."}, {"id": 210, "string": "Distraction-M3 (Chen et al., 2016b ) trains the summarization system to distract its attention to traverse different regions of the source article."}, {"id": 211, "string": "Graph attention (Tan et al., 2017) introduces a graph-based attention mechanism to enhance the encoderdecoder framework."}, {"id": 212, "string": "PointerGen+Cov."}, {"id": 213, "string": "(See et al., 2017) allows the system to not only copy words from the source text but also generate summary words by selecting them from a vocabulary."}, {"id": 214, "string": "Abstractive methods can thus introduce new words to the summary that are not present in the source article."}, {"id": 215, "string": "However, system summaries may change the meaning of the original texts due to this flexibility."}, {"id": 216, "string": "Results We present summarization results of various systems in Tables 2 and 3 , evaluated on the standard CNN/DM test sets by R-1, R-2, and R-L metrics (Lin, 2004) , which respectively measure the overlap of unigrams, bigrams, and longest common subsequences between system and reference summaries."}, {"id": 217, "string": "We investigate four variants of our method: QASumm+NoQ does not utilize any question-answer pairs during training."}, {"id": 218, "string": "It extracts summary text chunks by learning from groundtruth labels ( \u00a73.2) and the chunks are encoded by f Bi-LSTM 1 ."}, {"id": 219, "string": "Other variants initialize their models using pretrained parameters from QASumm+NoQ, then integrate the reinforcement learning objective ( \u00a73.4) to exploit the space of possible extractive summaries and reward those that are useful for answering questions."}, {"id": 220, "string": "We consider three types of QA pairs: the answer token is the root of a sentence dependency parse tree (+ROOT), a subject or object (+SUBJ/OBJ), or an entity found in the sentence (+NER)."}, {"id": 221, "string": "In all cases, the question is generated by replacing the answer token with a blank symbol."}, {"id": 222, "string": "As illustrated in Tables 2 and 3 , our QASumm methods with reinforcement learning (+ROOT,  +SUBJ/OBJ, +NER) perform competitively with strong baselines."}, {"id": 223, "string": "They outperform the counterpart QASumm+NoQ that makes no use of the QA pairs by a substantial margin."}, {"id": 224, "string": "They outperform or perform at a comparable level to state-of-the-art published systems on the CNN/DM datasets but are generally inferior to PointerGen."}, {"id": 225, "string": "We observe that exacting summary chunks is highly desirable in real-world applications as it provides a mechanism to generate concise summaries."}, {"id": 226, "string": "Nonetheless, accurately identifying summary chunks is challenging because the search space is vast and spuriousness arises in chunking sentences."}, {"id": 227, "string": "Cheng and Lapata (2016) report a substantial performance drop when adapting their system to extract words."}, {"id": 228, "string": "Our QASumm methods focusing on chunk extraction perform on par with competitive systems that extract whole sentences."}, {"id": 229, "string": "We additionally present human evaluation results of summary usefulness for a reading comprehension task in \u00a74.3."}, {"id": 230, "string": "In Tables 2 and 3 , we further show the number of unique answers per QA type."}, {"id": 231, "string": "We find that the ROOT-type QA pairs have the least number of unique answers."}, {"id": 232, "string": "They are often main verbs of sentences."}, {"id": 233, "string": "In contrast, the SUBJ/OBJ-type has the most number of answers."}, {"id": 234, "string": "They are subjects and objects of sentences and correspond to an open class of content words."}, {"id": 235, "string": "The NER-type has a moderate number of answers compared to others."}, {"id": 236, "string": "Note that all answer tokens have been filtered by frequency; those appearing less than 5 times in the dataset are removed to avoid overfitting."}, {"id": 237, "string": "Among variants of the QASumm method, we find that QASumm+ROOT achieves the highest scores on DM dataset."}, {"id": 238, "string": "QASumm+NER performs consistently well on both CNN and DM datasets, suggesting QA pairs of this type are effective in guiding the system to extract summary chunks."}, {"id": 239, "string": "We conjecture that maintaining a moderate number of answers is important to maximize performance."}, {"id": 240, "string": "To answer questions with missing entities, the summary is encouraged to contain similar content as the question body."}, {"id": 241, "string": "Because questions are derived from the human abstract, this in turn requires the system summary to carry similar semantic content as the human abstract."}, {"id": 242, "string": "Question-answering accuracy We next dive into the QA component of our system to investigate question-answering performance when different types of summaries and QA pairs are supplied to the system ( \u00a73.3)."}, {"id": 243, "string": "Given a question, the system predicts an answer using an extractive summary as the source input."}, {"id": 244, "string": "Intuitively, an informative summary can lead to high QA accuracy, as the summary content serves well as the basis for predicting answers."}, {"id": 245, "string": "With the same summary as input, certain types of questions can be more difficult to answer than others, and the system must rely heavily on the summary to gauge correct answers."}, {"id": 246, "string": "We compare various types of summaries."}, {"id": 247, "string": "These include (a) QASumm+NoQ which extracts summary chunks without requiring QA pairs; and (b) GoldSumm, which are gold-standard extractive summaries generated by collecting source words appearing in human summaries."}, {"id": 248, "string": "We further consider NoText and FullText, corresponding to using no source text or the full source article as input."}, {"id": 249, "string": "They represent the two extremes."}, {"id": 250, "string": "In all cases the QA component ( \u00a73.3) is trained on the training set and we report QA accuracies on the dev set."}, {"id": 251, "string": "In Table 4 , we observe that question-answering with GoldSumm performs the best for all QA types."}, {"id": 252, "string": "It outperforms the scenarios using Full-Text as the source input."}, {"id": 253, "string": "This indicates that distilled information contained in a high-quality summary can be useful for answering questions, as searching for answers in a succinct summary can be more efficient than that in a full article."}, {"id": 254, "string": "Moreover, we observe that the performance of QA-Summ+NoQ is in between NoText and GoldSumm for all answer types."}, {"id": 255, "string": "The results suggest that extractive summaries with even modest ROUGE scores can prove useful for question-answering."}, {"id": 256, "string": "Regarding different types of QA pairs, we find that the ROOT-type can achieve high QA accuracy when using NoText input."}, {"id": 257, "string": "It suggests that ROOT answers can to some extent be predicted based on the question context."}, {"id": 258, "string": "The NER-type QA pairs work the best for both GoldSumm and Full-Text, likely because the source texts contain necessary entities required to correctly answer those questions."}, {"id": 259, "string": "We also find the SUBJ/OBJ-type QA pairs have the smallest gap between train/dev accuracies, despite that they have a large answer space."}, {"id": 260, "string": "Based on the analysis we would suggest future work to consider using NER-based QA pairs as they encourage the summaries to contain salient source content and be informative."}, {"id": 261, "string": "Extraction units We finally compare the performance of using either words or chunks as extraction units ( \u00a73.1)."}, {"id": 262, "string": "The chunks are obtained by breaking down sentence constituent parse trees in a top-down manner until all tree fragments contain 5 words or less."}, {"id": 263, "string": "We observe that 70% of the chunks are 1-grams, and 2/3/4/5-grams are 9%, 7%, 6%, and 8% respectively."}, {"id": 264, "string": "We compare the bidirectional LSTM (f LSTM 1 ) and CNN (f CNN 2 ) encoders for their effectiveness on generating representations for extraction units."}, {"id": 265, "string": "Figure 2 presents the results of the QASumm+NoQ system under various settings."}, {"id": 266, "string": "We find that extracting chunks performs superior, and combining chunks with LSTM representations yield the highest scores."}, {"id": 267, "string": "Human Evaluation Testing the usefulness of an extractive system driven by reading comprehension is not inherently measured by automatic metrics (i.e."}, {"id": 268, "string": "ROUGE)."}, {"id": 269, "string": "We conducted a human evaluation to assess whether the highlighted summaries contribute to document understanding."}, {"id": 270, "string": "Similar to our training paradigm we presented each participant with the document and three fill-in-the-blank questions created from the human abstracts."}, {"id": 271, "string": "It was guaranteed that each question was from a unique human abstract to avoid seeing the answer adjacent to the same template."}, {"id": 272, "string": "The missing section was randomly generated to be either the root word, the subject or ob- See et al."}, {"id": 273, "string": "(2017) ."}, {"id": 274, "string": "Our systems tested were the supervised extractor, and our full model (NER)."}, {"id": 275, "string": "ject of the sentence, or a named entity."}, {"id": 276, "string": "We compare our reinforced extracted summary (presented as a bold overlay to the document), against our supervised method (section 3.2), abstractive summaries generated by See et al."}, {"id": 277, "string": "(2017) , and the human abstracts in full."}, {"id": 278, "string": "Additionally we asked the participants to rate the quality of the summary presented (1-5, with 5 being most informative)."}, {"id": 279, "string": "We utilized Amazon Mechanical Turk, and conducted an experiment where we sampled 80 documents from the CNN test set."}, {"id": 280, "string": "The articles were evenly split across the four competing systems, and each HIT was completed by 5 turkers."}, {"id": 281, "string": "Upon completion the data was analyzed manually for accuracy since turkers entered each answer as free text, and to remove any meaningless datapoints."}, {"id": 282, "string": "Table 5 shows the average time (in seconds) to complete a single question, the overall accuracy of the participants, and the informativeness of a given summary type."}, {"id": 283, "string": "Excluding the use of human abstracts, all systems resulted in similar performance times."}, {"id": 284, "string": "However we observe a large margin in QA accuracy in our full system compared to the abstractive and our supervised approach."}, {"id": 285, "string": "Although participants rated the informativeness of the summaries to be the same our systems yielded a higher performance."}, {"id": 286, "string": "This strongly indicates that having a system which makes using of document comprehension has a tangible effect when applied towards a real-world task."}, {"id": 287, "string": "Conclusion We exploited an extractive summarization framework using deep reinforcement learning to identify consecutive word sequences from a document to form an extractive summary."}, {"id": 288, "string": "Our reward function promotes adequate and fluent summaries that can serve as document surrogates to answer important questions, directly addressing users' information needs."}, {"id": 289, "string": "Experimental results on benchmark datasets demonstrated the efficacy of our proposed method over state-of-the-art baselines, assessed by both automatic metrics and human evaluators."}], "headers": [{"section": "Introduction", "n": "1", "start": 0, "end": 33}, {"section": "Related Work", "n": "2", "start": 34, "end": 59}, {"section": "Our Approach", "n": "3", "start": 60, "end": 62}, {"section": "Representing an Extraction Unit", "n": "3.1", "start": 63, "end": 87}, {"section": "Constructing an Extractive Summary", "n": "3.2", "start": 88, "end": 124}, {"section": "Using Summaries to Answer Questions", "n": "3.3", "start": 125, "end": 152}, {"section": "A Reinforcement Learning Framework", "n": "3.4", "start": 153, "end": 173}, {"section": "Experiments", "n": "4", "start": 174, "end": 175}, {"section": "Dataset and Settings", "n": "4.1", "start": 176, "end": 196}, {"section": "Experimental Results", "n": "4.2", "start": 197, "end": 266}, {"section": "Human Evaluation", "n": "4.3", "start": 267, "end": 285}, {"section": "Conclusion", "n": "5", "start": 286, "end": 289}], "figures": [{"filename": "../figure/image/1050-Table1-1.png", "caption": "Table 1: An example extractive summary bolded in the article (top). Highlighted sections indicate salient segments useful for answering fill-in-the-blank questions generated from human abstracts (bottom).", "page": 0, "bbox": {"x1": 306.71999999999997, "x2": 527.04, "y1": 221.76, "y2": 427.2}}, {"filename": "../figure/image/1050-Table2-1.png", "caption": "Table 2: Summarization results on CNN test set. Summaries are evaluated at their full-length by ROUGE F1-scores.", "page": 6, "bbox": {"x1": 72.0, "x2": 294.24, "y1": 63.839999999999996, "y2": 215.04}}, {"filename": "../figure/image/1050-Table3-1.png", "caption": "Table 3: Summarization results on DM test set. To ensure a fair comparison, we follow the convention to report ROUGE recall scores evaluated at 75 bytes.", "page": 6, "bbox": {"x1": 72.0, "x2": 293.28, "y1": 259.2, "y2": 399.36}}, {"filename": "../figure/image/1050-Table4-1.png", "caption": "Table 4: Question-answering accuracies using different types of QA pairs (ROOT, SUBJ/OBJ, NER) and different source input (NoText, QASumm+NoQ, GoldSumm, and FullText) as the basis for predicting answers.", "page": 7, "bbox": {"x1": 74.88, "x2": 520.3199999999999, "y1": 67.67999999999999, "y2": 129.12}}, {"filename": "../figure/image/1050-Figure1-1.png", "caption": "Figure 1: A unidirectional LSTM (blue, Eq. (3)) encodes the partial summary, while the multilayer perceptron network (orange, Eq. (4-5)) utilizes the text unit representation (het ), its positional embedding (gt), and the partial summary representation (st) to determine if the t-th text unit is to be included in the summary. Best viewed in color.", "page": 3, "bbox": {"x1": 321.12, "x2": 512.64, "y1": 61.44, "y2": 163.2}}, {"filename": "../figure/image/1050-Table5-1.png", "caption": "Table 5: Amazon mechanical turk experiments. Human abstracts were the goldstandard summaries, Pointer+Cov. were summaries generated by See et al. (2017). Our systems tested were the supervised extractor, and our full model (NER).", "page": 8, "bbox": {"x1": 312.96, "x2": 518.4, "y1": 62.4, "y2": 133.92}}, {"filename": "../figure/image/1050-Figure2-1.png", "caption": "Figure 2: Summarization results using fLSTM1 or fCNN2 encoder with word/chunk as the extraction unit.", "page": 8, "bbox": {"x1": 99.84, "x2": 260.15999999999997, "y1": 68.64, "y2": 185.28}}]}