{"title": "Formalising the Swedish Constructicon in Grammatical Framework", "abstract": "This paper presents a semi-automatic approach to acquire a computational construction grammar from the semi-formal Swedish Constructicon. The implementation is based on the resource grammar library provided by Grammatical Framework and can be seen as an extension to the existing Swedish resource grammar. An important consequence of this work is that it generates feedback, explicit and implicit, on how to improve the annotation consistency and adequacy of the original construction resource.", "text": [{"id": 0, "string": "Introduction Constructicon is a collection of conventionalized pairings of form and meaning (or function), typically based on principles of Construction Grammar (Goldberg, 2013) ."}, {"id": 1, "string": "The formalisation and implementation of a wide coverage construction grammar is a highly relevant task."}, {"id": 2, "string": "From the linguistic point of view, it leads to new insights on the interaction between the lexicon and the grammar, as well as it allows for testing the linguistic descriptions of constructions."}, {"id": 3, "string": "From the language technology point of view, the account of constructions facilitates language processing in both monolingual and multilingual settings, e.g."}, {"id": 4, "string": "in information extraction and machine translation."}, {"id": 5, "string": "Several approaches to Construction Grammar have been proposed."}, {"id": 6, "string": "Remarkable examples include Sign-Based Construction Grammar (Boas and Sag, 2012) that uses Head-Driven Phrase Structure Grammar (Pollard and Sag, 1994) as the underlying formalism, Fluid Construction Grammar (Steels, 2013) and Embodied Construction Grammar (Bergen and Chang, 2013) ."}, {"id": 7, "string": "While the previous work has been mainly focused on English, our work is currently focused on Swedish."}, {"id": 8, "string": "However, the main difference is that we test Grammatical Framework, GF (Ranta, 2004) , as a formalism and a toolkit for implementing computational construction grammars."}, {"id": 9, "string": "GF provides a built-in support for multilingual grammars, which has a great potential for implementing, unifying and interlinking constructions of different languages, which, in turn, would be particularly beneficial for the use in machine translation and second-language learning."}, {"id": 10, "string": "In this paper we describe a methodology on how to systematically formalise the semi-formal representation of the Swedish Constructicon in GF, showing that a GF construction grammar can be, to a large extent, acquired automatically."}, {"id": 11, "string": "A side result of our work is that it has also helps to improve the original construction resource."}, {"id": 12, "string": "Background 2.1 Swedish Constructicon (SweCcn) SweCcn 1 is a comparatively large open database of Swedish constructions -partially schematic multi-word units having both fixed and variable parts (Lyngfelt et al., 2012) ."}, {"id": 13, "string": "It particularly addresses constructions of relevance for secondlanguage learning, but also covers argument structure constructions, which concern matters of transitivity, voice, and event structure."}, {"id": 14, "string": "Construction descriptions are manually derived from corpus examples, and some of the examples are manually annotated and added to each SweCcn entry."}, {"id": 15, "string": "A simplified example of how a construction is described in SweCcn is given in Table 1 ."}, {"id": 16, "string": "Construction elements (CE) are either internal or external."}, {"id": 17, "string": "The internal CEs are a part of the construction while the external CEs are a part of the valency of the construction."}, {"id": 18, "string": "In the structure sketches, the internal CEs are bounded by brackets."}, {"id": 19, "string": "CEs are described in more detail by attribute- value matrices that specify their syntactic and semantic features."}, {"id": 20, "string": "Fixed CEs are represented by lexical units (LU), and they refer to entries in SALDO, the Swedish Associative Thesaurus (Borin et al., 2013) , which is the core lexicon of a large macro-resource for Swedish, developed within the Swedish FrameNet++ project (Borin et al., 2010) ."}, {"id": 21, "string": "Many constructions have a referential meaning, more specifically, they are frame-bearing and are thus linked to FrameNet frames."}, {"id": 22, "string": "There is also an ongoing work to link, when possible, the SweCcn constructions with constructions in Berkeley Constructicon (B\u00e4ckstr\u00f6m et al., 2014) as well as other constructicons, notably the one for Brazilian Portuguese (Torrent et al., 2014) ."}, {"id": 23, "string": "It should be noted that a central part of construction descriptions in SweCcn is the free text definitions."}, {"id": 24, "string": "For example, the construction RE-FLEXIV RESULTATIV roughly means 'become AP by V-ing'."}, {"id": 25, "string": "Hence,\u00e4ta sig m\u00e4tt 'eat himself full' and skrika sig hes 'shouting himself hoarse' are instances of the construction, whereas k\u00e4nna sig tr\u00f6tt 'feel himself tired' and skratta sig lycklig 'laugh himself lucky' are not."}, {"id": 26, "string": "The difference is captured by the free text definition, but not by the formal features, therefore it unfortunately gets lost in the automatic translation to GF."}, {"id": 27, "string": "In this experiment, we use a recent version of SweCcn (a snapshot taken on June 9, 2015) which contains 374 entries describing constructions of different grammatical categories such as VP, NP and S (see Table 2 )."}, {"id": 28, "string": "Grammatical Framework (GF) GF (Ranta, 2004 ) is a grammar formalism characterized by its two-level approach to natural language representation."}, {"id": 29, "string": "One level, the abstract syntax, accounts for the language-independent aspects, and the other level, the concrete syntax, accounts for the language-specific aspects."}, {"id": 30, "string": "The same abstract syntax can be equipped with many concrete syntaxes -reversible mappings from abstract syntax trees to records (feature structures) and strings -making the grammar multilingual."}, {"id": 31, "string": "Most importantly, GF provides a generalpurpose resource grammar library, RGL (Ranta, 2009) , for currently 30 languages, all implementing the same abstract syntax."}, {"id": 32, "string": "In order to hide the low-level details, RGL has a high-level interface that provides constructors like mkCl: NP -> VP -> Cl for building a clause from a NP and a VP."}, {"id": 33, "string": "2 The resource grammars take care of agreement and word order."}, {"id": 34, "string": "One of the most developed languages in RGL, in terms of syntactic and lexical coverage, is Swedish."}, {"id": 35, "string": "Its resource grammar also includes over 100,000 lexical entries from SALDO."}, {"id": 36, "string": "3 Preprocessing of SweCcn In the current experiment, we consider only the 105 constructions of type VP (verb phrase) from which we exclude 9 whose status is 'suggestion'."}, {"id": 37, "string": "Descriptions of the suggested constructions are too immature to be processed."}, {"id": 38, "string": "Currently we also do not include the 16 XP constructions which are relevant to any phrase type, including VP."}, {"id": 39, "string": "We have chosen to begin with VP constructions because they are dominating in SweCcn, and they have the most complex internal structure -if our approach can handle these constructions then it should also be applicable for the rest."}, {"id": 40, "string": "According to the SweCcn annotation manual, 4 constructions are described at two levels of detail: 1."}, {"id": 41, "string": "A flat structure sketch that lists the formal elements in the construction (see Structure in Table 1 )."}, {"id": 42, "string": "Each CE is represented in terms of grammatical category (either word class or phrase type), LU or just word form."}, {"id": 43, "string": "The list of CEs follows the expected word order."}, {"id": 44, "string": "A structure sketch may specify alternative realisation patterns of the same construction."}, {"id": 45, "string": "Table 1 ), that specify additional morphosyntactic constraints which may be omitted in the more general sketch for the sake of simplicity to a human reader."}, {"id": 46, "string": "Additionally, the feature matrices often specify the semantic roles and grammatical functions, but we do not take this information into account in the current work."}, {"id": 47, "string": "The word order is encoded only by the structure sketches; it is not reflected by the corresponding feature matrices as they can be potentially reused by alternative patterns of the same construction."}, {"id": 48, "string": "Because the linking between the sketches and matrices is not explicit, and the implicit links (matching categories, LUs etc.)"}, {"id": 49, "string": "are not unique in general, the automatic mapping can be ambiguous."}, {"id": 50, "string": "In practice, however, it happens rarely."}, {"id": 51, "string": "A set of feature matrices, one per CE (see Internal and External in Constructions may have optional CEs, alternative types of CEs or alternative LUs, and even alternative word order."}, {"id": 52, "string": "In the structure sketches, optional CEs are delimited by parentheses, and alternative types/LUs are separated by a bar: Note that the variable CEs (represented by grammatical categories) may have indices denoting difference, formal identity (repetition), coreference, etc."}, {"id": 53, "string": "In the case of a lexical construction that represents a compound word, its internal CEs are delimited by the plus sign indicating the concatenation."}, {"id": 54, "string": "Suffixation is indicated by the hyphen."}, {"id": 55, "string": "The automatic preprocessing of SweCcn entries consists of four steps: 1."}, {"id": 56, "string": "Normalization of the structure sketches and attribute values in the feature matrices."}, {"id": 57, "string": "SweCcn entries have been annotated manually, therefore inconsistently used spaces, inconsistently used delimiters of alternative CE types as well as inconsistent representation of auxiliary or function CEs (e.g."}, {"id": 58, "string": "sig 1 vs. Pn refl vs. refl) is common."}, {"id": 59, "string": "2."}, {"id": 60, "string": "In case of optional CEs and alternative types of CEs, there are formally several constructions compressed in one."}, {"id": 61, "string": "The original structures are rewritten so that for each combination there is a separate alternative structure."}, {"id": 62, "string": "For instance, [V av 1 Pn refl (NP)] is rewritten to [V av 1 Pn refl NP] | [V av 1 Pn refl ]."}, {"id": 63, "string": "This however does not apply to alternative LUs."}, {"id": 64, "string": "If a CE is represented by a fixed set of LUs, we assume that they are interchangeable (synonymous)."}, {"id": 65, "string": "Otherwise they should be either split into alternative constructions (separate entries), or the CE should be made more general."}, {"id": 66, "string": "5 3."}, {"id": 67, "string": "The rewritten structure sketches are enriched with additional morphosyntactic information from the feature matrices, so that a complete description is at hand."}, {"id": 68, "string": "The mapping of CEs between the two layers of annotation is based on values of the grammatical category and LU attributes in the feature matrices (see Table 1 )."}, {"id": 69, "string": "Although such mapping in general is based on a partial comparison as well as it can be ambiguous, it has not led to incorrect results in the selected dataset, 6 because we do not consider the semantic roles."}, {"id": 70, "string": "Out of the 96 VP constructions that were processed, only 43 turned out to be consistent in the first attempt."}, {"id": 71, "string": "For more than a half of constructions, various inconsistencies were detected and reported to SweCcn developers for manual inspection and correction."}, {"id": 72, "string": "After several iterations, the number of consistent VP constructions increased to 93."}, {"id": 73, "string": "The remaining 3 are different corner cases that are actually consistent but are not yet supported by the preprocessor and are thus skipped."}, {"id": 74, "string": "The following is a list of representative VP constructions with their original and rewritten structure descriptions that we use in Section 4 to illustrate the automatic generation of the GF grammar: Note that we ignore the SALDO sense identifiers."}, {"id": 75, "string": "We ignore the external CEs in the current approach as well, as they should be attached to constructions by the general syntactic rules already provided by GF RGL."}, {"id": 76, "string": "It is satisfactory also from the future translation point of view, as the translation of external CEs should be compositional."}, {"id": 77, "string": "Generation of a GF Grammar The rewritten structural descriptions of constructions, as described in Section 3, provide sufficient information to generate both the abstract and the concrete syntax of a SweCcn-based construction grammar, an extension to the Swedish GF resource grammar."}, {"id": 78, "string": "7 Abstract Syntax The generation of the abstract syntax is rather straight forward."}, {"id": 79, "string": "Each construction is represented by one or more functions depending on how many alternative structure descriptions are produced in the preprocessing steps."}, {"id": 80, "string": "The name of a function corresponds to the name of the construction suffixed by an index if there is more than one function per construction."}, {"id": 81, "string": "For the current input data, the 93 VP constructions resulted in 127 functions."}, {"id": 82, "string": "The maximum and average numbers are respectively 6 and 1.4 functions per construction."}, {"id": 83, "string": "8 Each function takes one or more arguments that correspond to the variable CEs of the respective alternative construction description."}, {"id": 84, "string": "In the rewritten structure descriptions, the variable CEs can be formally distinguished from fixed CEs (LUs and structural words) by the first letter of each CE: the variable CEs always start with an upper case letter while the fixed CEs start with a lower case letter."}, {"id": 85, "string": "The fixed CEs are not represented by the abstract syntax."}, {"id": 86, "string": "The variable CEs are represented only by their grammatical categories; other morphosyntactic constraints (if any) are handled by the concrete syntax."}, {"id": 87, "string": "Constructions listed at the end of Section 3 are represented by the following abstract functions: Concrete Syntax As our initial investigation unveiled, many constructions can be implemented in GF by systematically applying the high-level RGL constructors."}, {"id": 88, "string": "For instance, beh\u00f6va n\u00e5got till n\u00e5got1 can be implemented as shown in Figure 1 by first making a two-place verb (V2) from the V element and then combining it with the first NP element into a VP."}, {"id": 89, "string": "The preposition can be combined with the second NP element into a prepositional phrase (Adv) which can then be attached to the VP."}, {"id": 90, "string": "The question is how to make such constructor applications systematically given the various construction descriptions."}, {"id": 91, "string": "Essentially, this is a parsing problem itself."}, {"id": 92, "string": "We can look at CEs as words in the construction description language for which we need a grammar to combine the lists of CEs into trees of RGL constructors and their arguments."}, {"id": 93, "string": "In order to address this issue, we have defined an auxiliary GF grammar to generate the beh\u00f6va_n\u00e5got_till_n\u00e5got 1 np 1 np 2 = mkVP (mkVP (mkV2 (mkV \"beh\u00f6ver\")) np 1 ) (mkAdv (mkPrep \"till\") np 2 ) Figure 1 : The expected implementation for the function beh\u00f6va n\u00e5got till n\u00e5got1."}, {"id": 94, "string": "implementation of functions in the GF construction grammar."}, {"id": 95, "string": "To keep the code-generating grammar simple, it accepts only the categories of CEs, some additional constraints and certain structural words."}, {"id": 96, "string": "The preprocessed construction descriptions are generalized before parsing; LUs are inserted back in a post-processing step."}, {"id": 97, "string": "For instance, beh\u00f6vaV NP1 tillPrep NP2 is generalised to {V} NP {Prep} NP, where the curly brackets indicate fixed CEs."}, {"id": 98, "string": "Fragments of the codegenerating grammar related to this structure are listed in Figure 2 and Figure 3 ."}, {"id": 99, "string": "According to the auxiliary grammar, the parse tree for \"{V} NP {Prep} NP\" is mkVP__VP_Adv (mkVP__V2_NP (mkV2 _mkV_) _NP_) (mkAdv _mkPrep_ _NP_) which corresponds to the expected implementation as shown in Figure 1 after the post-processing is done."}, {"id": 100, "string": "The post-processing involves three steps: 1."}, {"id": 101, "string": "Remove all suffixes delimited by the double underscore."}, {"id": 102, "string": "The suffixes are used just to make the function names unique in the auxiliary grammar."}, {"id": 103, "string": "2."}, {"id": 104, "string": "Sequentially replace all placeholders of the fixed CEs, annotated as mkX , by the actual lexical constructors."}, {"id": 105, "string": "In case of verbs, constructors (inflectional paradigms) specified in  3."}, {"id": 106, "string": "Sequentially replace all placeholders of the variable CEs, annotated as X , by the actual variable names, e.g."}, {"id": 107, "string": "replace the first NP by np 1 and the second NP by np 2 ."}, {"id": 108, "string": "Note that the auxiliary code-generating grammar, in general, is ambiguous -it can return several alternative code skeletons for a given CE list."}, {"id": 109, "string": "However, it should hold that all alternatives accept and linearise the same strings."}, {"id": 110, "string": "Our heuristics is to take the shortest implementation, which is supported by the intuition that the shortest ones correlate with the simplest ones."}, {"id": 111, "string": "If we consider the alternative realization of BEH\u00d6VA N\u00c5GOT TILL N\u00c5GOT represented by the function beh\u00f6va n\u00e5got till n\u00e5got2 , the parsing with the auxiliary grammar fails at the element VP."}, {"id": 112, "string": "Indeed, there is no straightforward constructor provided by RGL that would combine a Prep with a VP or an Adv (as the in-order-to-VP should be first converted to Adv)."}, {"id": 113, "string": "Thus, a lower level means have to be applied to implement this function."}, {"id": 114, "string": "The implementation generated for the rest of functions listed in Section 4.1 is given below (in a slightly simplified form): f\u00e5_resultativ_agentiv np vp = mkVP (mkV2A (mkV \"f\u00e5\")) np (PresPartAP vp) g\u00f6ra_sig_AdvP adv = mkVP (mkVP (reflV (mkV \"g\u00f6ra\"))) adv snacka_NP 1 cn = mkVP (mkV2 (mkV (\"snacka\"|\"prata\"|..))) (mkNP aSg_Det cn) snacka_NP 2 cn = mkVP (mkV2 (mkV (\"snacka\"|\"prata\"|..))) (mkNP aPl_Det cn) snacka_NP 3 cn = mkVP (mkV2 (mkV (\"snacka\"|\"prata\"|..))) (mkNP cn) verba_av_sig_transitiv 1 v np = mkVP (mkV2 (reflV (partV v (toStr (mkPrep \"av\"))))) np verba_av_sig_transitiv 2 v = mkVP (reflV (partV v (toStr (mkPrep \"av\")))) x_st\u00e4da 1 n = mkVP (prefixV (toStr n) (mkV \"st\u00e4dar\")) x_st\u00e4da 2 a = mkVP (prefixV (toStr a) (mkV \"st\u00e4dar\")) As it was already mentioned, for some functions the implementation has to be based not only on the high-level language-independent interface of RGL but also on low-level language-specific parameters."}, {"id": 115, "string": "To keep the GF code generation flexible and functional, we have defined some helper functions (in the construction grammar) that wrap the low-level code and make it reusable."}, {"id": 116, "string": "For instance, the helper function toStr takes a preposition, adjective or noun and returns its base form as a plain string which can then be passed, for instance, to the RGL function partV to make a particle verb, or to another helper function prefixV to make a compound verb."}, {"id": 117, "string": "As for LUs, note that they are implemented, in general, as free alternatives, which means that any of them will be accepted while parsing but the first one will always be used for the linearisation."}, {"id": 118, "string": "In the result, given the 127 functions in the abstract syntax, we have automatically generated the implementation for 98 functions (77%)."}, {"id": 119, "string": "At least one function is implemented for 73 out of 93 constructions (78%)."}, {"id": 120, "string": "Analysis of the Initial Results We conducted two evaluations, manual and automatic, to determine whether the automatically implemented functions can successfully parse the respective Swedish constructions and whether they Exemplified  functions  Implemented  51  57  24  Pending  13  16  6  Total  64  73  30   Table 3 : Statistics of the manually compiled test corpus: the number of examples belonging to the implemented and pending concrete functions in the generated construction grammar, and the number of functions having at least one test example."}, {"id": 121, "string": "Functions Examples can cope with different linguistic phenomena."}, {"id": 122, "string": "The manual evaluation was based on a subset of selected VP constructions and selected examples from the annotated sentences in SweCcn."}, {"id": 123, "string": "The automatic evaluation was based on the whole SweCcn dataset of all VP constructions."}, {"id": 124, "string": "For the manual evaluation, we complied a small test corpus containing 73 annotated examples, of which 57 turned out to have a corresponding concrete function in the construction grammar."}, {"id": 125, "string": "Table 3 summarizes the total number of examples that belong to any of the implemented functions and the total number of examples that belong to the functions whose implementation is pending, as well as the number of functions that have at least one test example."}, {"id": 126, "string": "In the manually compiled corpus, only about half of the functions have at least one test example, and for those that have, there are two examples on average."}, {"id": 127, "string": "Out of the 57 examples that have a corresponding concrete function, 53 examples were successfully parsed yielding a coverage of 93%."}, {"id": 128, "string": "It is important to mention that the relatively high coverage is achieved partially because we replaced all the compounds and proper names which were missing in the lexicon (17 words in total)."}, {"id": 129, "string": "The remaining 7% are examples for which no parse tree was returned."}, {"id": 130, "string": "A closer look at those cases unveils that the parser mostly failed because of: (i) annotation errors in the SweCcn database, for instance, a feature matrix constrains the singular form of a NP although the plural form exists among the annotated examples; (ii) ill-formed sentences (with respect to the grammar), often containing coordinating conjunctions, for instance, jag och min sambo ska till v\u00e5ra v\u00e4nner 'me and my partner shall to our friends' -the parser expects a verb such as g\u00e5 'go' after ska 'shall'."}, {"id": 131, "string": "Errors grounded in the manual annotation of the Exemplified  functions  Implemented  98  224  65  Pending  29  40  11  Total  127 264 76 Table 3 ."}, {"id": 132, "string": "Functions Examples SweCcn entries were reported to SweCcn developers and are already partially corrected."}, {"id": 133, "string": "Errors grounded in the automatic grammar generation require a closer analysis of how these constructions can be systematically implemented using lower level means of RGL."}, {"id": 134, "string": "For the automatic evaluation, we implemented a script which pre-processes the annotated SweCcn sentences belonging to the VP constructions and parses each example using the generated GF grammar."}, {"id": 135, "string": "Several heuristics on how to insert the subject to make a proper clause before it is parsed are applied."}, {"id": 136, "string": "Heuristics mainly concern the tense and type of the verb given a construction with which it should be parsed."}, {"id": 137, "string": "Table 4 summarizes the automatically acquired test corpus."}, {"id": 138, "string": "Out of the 224 examples for which the corresponding concrete function is implemented, 157 were successfully parsed, yielding a coverage of 70%."}, {"id": 139, "string": "An investigation of the examples that failed to parse unveils that these examples: (i) contain multi-word compounds; (ii) are more than 10 words long, containing irrelevant phrases and punctuations that fall outside the construction; (iii) contain complex syntactic structures that involve coordination and subordination."}, {"id": 140, "string": "Our analysis shows that many of the failures lead to false negative evaluation results."}, {"id": 141, "string": "To avoid these and to allow for a more adequate evaluation, there are several complementary options we have to consider."}, {"id": 142, "string": "First, the grammatical categories could be included in the annotated examples, but it depends on the SweCcn developers."}, {"id": 143, "string": "Second, we could prepare a treebank, at least one abstract tree for each function, to allow for the opposite testing -to check if the functions generate correct linearizations."}, {"id": 144, "string": "Third, we could manually derive a larger post-edited test corpus from the SweCcn dataset of annotated examples."}, {"id": 145, "string": "For functions having no test example, we might exploit the GF's built-in support for generating random trees."}, {"id": 146, "string": "The linearizations could then be presented to SweCcn developers for examination and consideration of whether an example should be added to the database."}, {"id": 147, "string": "When it comes to the lexicon, the coverage of lexical units is very high."}, {"id": 148, "string": "Most of the words the parser fails with are proper names and compounds."}, {"id": 149, "string": "These could be extracted from the SweCcn corpus and added to the lexicon if access to the grammatical categories is available."}, {"id": 150, "string": "Conclusions and Future Work We have taken a functional view to acquire a computational construction grammar in Grammatical Framework from the semi-formal representation of the Swedish Constructicon."}, {"id": 151, "string": "We have presented an approach to detect and correct inconsistencies and errors in the original resource of constructions."}, {"id": 152, "string": "We were able to improve the quality of the resource and thereby increase its value for the use in language technology applications."}, {"id": 153, "string": "Following the proposed approach, the implementation of a construction grammar can be automatically generated for nearly 80% of the constructions (functions) achieving a 70-90% accuracy, and there is clear space for improvement."}, {"id": 154, "string": "However, it is still an open question how far we should advance the automation in order to keep it cost effective; the rest can be implemented or postedited manually."}, {"id": 155, "string": "So far we have avoided any manual intervention in the generated grammar because SweCcn is being actively improved and extended in parallel to our work, and this would complicate the synchronisation of changes."}, {"id": 156, "string": "Regarding future work, a rather short-term goal is to extend the grammar generator to cover the other major types of constructions as well."}, {"id": 157, "string": "This would primarily require the extension of the auxiliary code generating grammar."}, {"id": 158, "string": "Among the longterm goals is to take this approach from the monolingual construction grammar to a multilingual one."}, {"id": 159, "string": "This would require not only taking the links to FrameNet into account but also adapting the processing and generation pipeline to the constructicons of other languages."}, {"id": 160, "string": "This also relates to our previous research on implementing a multilingual FrameNet-based grammar in GF (Dann\u00e9lls and Gruzitis, 2014) ."}, {"id": 161, "string": "The GF construction grammar and FrameNet grammar approaches are complementary to each other, at least with regard to constructions with a referential meaning, and an integration of them would be mutually beneficial."}], "headers": [{"section": "Introduction", "n": "1", "start": 0, "end": 11}, {"section": "Background 2.1 Swedish Constructicon (SweCcn)", "n": "2", "start": 12, "end": 27}, {"section": "Grammatical Framework (GF)", "n": "2.2", "start": 28, "end": 35}, {"section": "Preprocessing of SweCcn", "n": "3", "start": 36, "end": 50}, {"section": "A set of feature matrices, one per CE (see Internal and External in", "n": "2.", "start": 51, "end": 75}, {"section": "Generation of a GF Grammar", "n": "4", "start": 76, "end": 77}, {"section": "Abstract Syntax", "n": "4.1", "start": 78, "end": 86}, {"section": "Concrete Syntax", "n": "4.2", "start": 87, "end": 118}, {"section": "Analysis of the Initial Results", "n": "5", "start": 119, "end": 149}, {"section": "Conclusions and Future Work", "n": "6", "start": 150, "end": 161}], "figures": [{"filename": "../figure/image/983-Figure3-1.png", "caption": "Figure 3: A simplified fragment of the concrete syntax of the auxiliary code-generating grammar.", "page": 5, "bbox": {"x1": 72.0, "x2": 291.36, "y1": 62.879999999999995, "y2": 300.0}}, {"filename": "../figure/image/983-Figure1-1.png", "caption": "Figure 1: The expected implementation for the function beho\u0308va na\u030agot till na\u030agot1.", "page": 4, "bbox": {"x1": 306.71999999999997, "x2": 526.0799999999999, "y1": 62.879999999999995, "y2": 116.16}}, {"filename": "../figure/image/983-Figure2-1.png", "caption": "Figure 2: A simplified fragment of the abstract syntax of the auxiliary code-generating grammar.", "page": 4, "bbox": {"x1": 306.71999999999997, "x2": 526.0799999999999, "y1": 348.47999999999996, "y2": 465.12}}, {"filename": "../figure/image/983-Table1-1.png", "caption": "Table 1: A simplified description of the Swedish construction REFLEXIV RESULTATIV. The example literally translates as \u2018Peter eats himself full\u2019.", "page": 1, "bbox": {"x1": 73.92, "x2": 290.4, "y1": 64.8, "y2": 237.6}}, {"filename": "../figure/image/983-Table2-1.png", "caption": "Table 2: The number of constructions in SweCcn. The category XP represents any phrase type. The column FrameNet shows the number of constructions linked to the Swedish FrameNet.", "page": 1, "bbox": {"x1": 321.59999999999997, "x2": 511.2, "y1": 62.879999999999995, "y2": 186.23999999999998}}, {"filename": "../figure/image/983-Table4-1.png", "caption": "Table 4: Statistics of the automatically acquired test corpus. Compare to Table 3.", "page": 6, "bbox": {"x1": 309.59999999999997, "x2": 523.1999999999999, "y1": 61.44, "y2": 132.0}}, {"filename": "../figure/image/983-Table3-1.png", "caption": "Table 3: Statistics of the manually compiled test corpus: the number of examples belonging to the implemented and pending concrete functions in the generated construction grammar, and the number of functions having at least one test example.", "page": 6, "bbox": {"x1": 73.92, "x2": 288.0, "y1": 61.44, "y2": 132.0}}]}