{"title": "Adversarial Contrastive Estimation", "abstract": "Learning by contrasting positive and negative samples is a general strategy adopted by many methods. Noise contrastive estimation (NCE) for word embeddings and translating embeddings for knowledge graphs are examples in NLP employing this approach. In this work, we view contrastive learning as an abstraction of all such methods and augment the negative sampler into a mixture distribution containing an adversarially learned sampler. The resulting adaptive sampler finds harder negative examples, which forces the main model to learn a better representation of the data. We evaluate our proposal on learning word embeddings, order embeddings and knowledge graph embeddings and observe both faster convergence and improved results on multiple metrics.", "text": [{"id": 0, "string": "Introduction Many models learn by contrasting losses on observed positive examples with those on some fictitious negative examples, trying to decrease some score on positive ones while increasing it on negative ones."}, {"id": 1, "string": "There are multiple reasons why such contrastive learning approach is needed."}, {"id": 2, "string": "Computational tractability is one."}, {"id": 3, "string": "For instance, instead of using softmax to predict a word for learning word embeddings, noise contrastive estimation (NCE) (Dyer, 2014; Mnih and Teh, 2012) can be used in skip-gram or CBOW word embedding models (Gutmann and Hyv\u00e4rinen, 2012; Mikolov et al., 2013; Mnih and Kavukcuoglu, 2013; Vaswani et al., 2013) ."}, {"id": 4, "string": "Another reason is * authors contributed equally \u2020 Work done while author was an intern at Borealis AI modeling need, as certain assumptions are best expressed as some score or energy in margin based or un-normalized probability models (Smith and Eisner, 2005) ."}, {"id": 5, "string": "For example, modeling entity relations as translations or variants thereof in a vector space naturally leads to a distance-based score to be minimized for observed entity-relation-entity triplets (Bordes et al., 2013) ."}, {"id": 6, "string": "Given a scoring function, the gradient of the model's parameters on observed positive examples can be readily computed, but the negative phase requires a design decision on how to sample data."}, {"id": 7, "string": "In noise contrastive estimation for word embeddings, a negative example is formed by replacing a component of a positive pair by randomly selecting a sampled word from the vocabulary, resulting in a fictitious word-context pair which would be unlikely to actually exist in the dataset."}, {"id": 8, "string": "This negative sampling by corruption approach is also used in learning knowledge graph embeddings (Bordes et al., 2013; Lin et al., 2015; Ji et al., 2015; Wang et al., 2014; Trouillon et al., 2016; Yang et al., 2014; Dettmers et al., 2017) , order embeddings (Vendrov et al., 2016) , caption generation (Dai and Lin, 2017) , etc."}, {"id": 9, "string": "Typically the corruption distribution is the same for all inputs like in skip-gram or CBOW NCE, rather than being a conditional distribution that takes into account information about the input sample under consideration."}, {"id": 10, "string": "Furthermore, the corruption process usually only encodes a human prior as to what constitutes a hard negative sample, rather than being learned from data."}, {"id": 11, "string": "For these two reasons, the simple fixed corruption process often yields only easy negative examples."}, {"id": 12, "string": "Easy negatives are sub-optimal for learning discriminative representation as they do not force the model to find critical characteristics of observed positive data, which has been independently discovered in applications outside NLP previously (Shrivastava et al., 2016) ."}, {"id": 13, "string": "Even if hard negatives are occasionally reached, the infrequency means slow convergence."}, {"id": 14, "string": "Designing a more sophisticated corruption process could be fruitful, but requires costly trialand-error by a human expert."}, {"id": 15, "string": "In this work, we propose to augment the simple corruption noise process in various embedding models with an adversarially learned conditional distribution, forming a mixture negative sampler that adapts to the underlying data and the embedding model training progress."}, {"id": 16, "string": "The resulting method is referred to as adversarial contrastive estimation (ACE)."}, {"id": 17, "string": "The adaptive conditional model engages in a minimax game with the primary embedding model, much like in Generative Adversarial Networks (GANs) (Goodfellow et al., 2014a) , where a discriminator net (D), tries to distinguish samples produced by a generator (G) from real data (Goodfellow et al., 2014b) ."}, {"id": 18, "string": "In ACE, the main model learns to distinguish between a real positive example and a negative sample selected by the mixture of a fixed NCE sampler and an adversarial generator."}, {"id": 19, "string": "The main model and the generator takes alternating turns to update their parameters."}, {"id": 20, "string": "In fact, our method can be viewed as a conditional GAN (Mirza and Osindero, 2014) on discrete inputs, with a mixture generator consisting of a learned and a fixed distribution, with additional techniques introduced to achieve stable and convergent training of embedding models."}, {"id": 21, "string": "In our proposed ACE approach, the conditional sampler finds harder negatives than NCE, while being able to gracefully fall back to NCE whenever the generator cannot find hard negatives."}, {"id": 22, "string": "We demonstrate the efficacy and generality of the proposed method on three different learning tasks, word embeddings (Mikolov et al., 2013) , order embeddings (Vendrov et al., 2016) and knowledge graph embeddings (Ji et al., 2015) ."}, {"id": 23, "string": "Method Background: contrastive learning In the most general form, our method applies to supervised learning problems with a contrastive objective of the following form: L(\u03c9) = E p(x + ,y + ,y \u2212 ) l \u03c9 (x + , y + , y \u2212 ) (1) where l \u03c9 (x + , y + , y \u2212 ) captures both the model with parameters \u03c9 and the loss that scores a positive tuple (x + , y + ) against a negative one (x + , y \u2212 )."}, {"id": 24, "string": "E p(x + ,y + ,y \u2212 ) (.)"}, {"id": 25, "string": "denotes expectation with respect to some joint distribution over positive and negative samples."}, {"id": 26, "string": "Furthermore, by the law of total expectation, and the fact that given x + , the negative sampling is not dependent on the positive label, i.e."}, {"id": 27, "string": "p(y + , y \u2212 |x + ) = p(y + |x + )p(y \u2212 |x + ), Eq."}, {"id": 28, "string": "1 can be re-written as E p(x + ) [E p(y + |x + )p(y \u2212 |x + ) l \u03c9 (x + , y + , y \u2212 )] (2) Separable loss In the case where the loss decomposes into a sum of scores on positive and negative tuples such as l \u03c9 (x + , y + , y \u2212 ) = s \u03c9 (x + , y + )\u2212s \u03c9 (x + , y \u2212 ), then Expression."}, {"id": 29, "string": "2 becomes E p + (x) [E p + (y|x) s \u03c9 (x, y) \u2212 E p \u2212 (y|x)s\u03c9 (x, y)] (3) where we moved the + and \u2212 to p for notational brevity."}, {"id": 30, "string": "Learning by stochastic gradient descent aims to adjust \u03c9 to pushing down s \u03c9 (x, y) on samples from p + while pushing ups \u03c9 (x, y) on samples from p \u2212 ."}, {"id": 31, "string": "Note that for generality, the scoring function for negative samples, denoted b\u1ef9 s \u03c9 , could be slightly different from s \u03c9 ."}, {"id": 32, "string": "For instance,s could contain a margin as in the case of Order Embeddings in Sec."}, {"id": 33, "string": "4.2."}, {"id": 34, "string": "Non separable loss Eq."}, {"id": 35, "string": "1 is the general form that we would like to consider because for certain problems, the loss function cannot be separated into sums of terms containing only positive (x + , y + ) and terms with negatives (x + , y \u2212 )."}, {"id": 36, "string": "An example of such a nonseparable loss is the triplet ranking loss (Schroff et al., 2015) : l \u03c9 = max(0, \u03b7 + s \u03c9 (x + , y + ) \u2212 s \u03c9 (x + , y \u2212 )), which does not decompose due to the rectification."}, {"id": 37, "string": "Noise contrastive estimation The typical NCE approach in tasks such as word embeddings (Mikolov et al., 2013) , order embeddings (Vendrov et al., 2016) , and knowledge graph embeddings can be viewed as a special case of Eq."}, {"id": 38, "string": "2 by taking p(y \u2212 |x + ) to be some unconditional p nce (y)."}, {"id": 39, "string": "This leads to efficient computation during training, however, p nce (y) sacrifices the sampling efficiency of learning as the negatives produced using a fixed distribution are not tailored toward x + , and as a result are not necessarily hard negative examples."}, {"id": 40, "string": "Thus, the model is not forced to discover discriminative representation of observed positive data."}, {"id": 41, "string": "As training progresses, more and more negative examples are correctly learned, the probability of drawing a hard negative example diminishes further, causing slow convergence."}, {"id": 42, "string": "Adversarial mixture noise To remedy the above mentioned problem of a fixed unconditional negative sampler, we propose to augment it into a mixture one, \u03bbp nce (y) + (1 \u2212 \u03bb)g \u03b8 (y|x), where g \u03b8 is a conditional distribution with a learnable parameter \u03b8 and \u03bb is a hyperparameter."}, {"id": 43, "string": "The objective in Expression."}, {"id": 44, "string": "2 can then be written as (conditioned on x for notational brevity): L(\u03c9, \u03b8; x) = \u03bb E p(y + |x)pnce(y \u2212 ) l \u03c9 (x, y + , y \u2212 ) + (1 \u2212 \u03bb) E p(y + |x)g \u03b8 (y \u2212 |x) l \u03c9 (x, y + , y \u2212 ) (4) We learn (\u03c9, \u03b8) in a GAN-style minimax game: min \u03c9 max \u03b8 V (\u03c9, \u03b8) = min \u03c9 max \u03b8 E p + (x) L(\u03c9, \u03b8; x) (5 ) The embedding model behind l \u03c9 (x, y + , y \u2212 ) is similar to the discriminator in (conditional) GAN (or critic in Wasserstein  or Energy-based GAN (Zhao et al., 2016) , while g \u03b8 (y|x) acts as the generator."}, {"id": 45, "string": "Henceforth, we will use the term discriminator (D) and embedding model interchangeably, and refer to g \u03b8 as the generator."}, {"id": 46, "string": "Learning the generator There is one important distinction to typical GAN: g \u03b8 (y|x) defines a categorical distribution over possible y values, and samples are drawn accordingly; in contrast to typical GAN over continuous data space such as images, where samples are generated by an implicit generative model that warps noise vectors into data points."}, {"id": 47, "string": "Due to the discrete sampling step, g \u03b8 cannot learn by receiving gradient through the discriminator."}, {"id": 48, "string": "One possible solution is to use the Gumbel-softmax reparametrization trick (Jang et al., 2016; Maddison et al., 2016) , which gives a differentiable approximation."}, {"id": 49, "string": "However, this differentiability comes at the cost of drawing N Gumbel samples per each categorical sample, where N is the number of categories."}, {"id": 50, "string": "For word embeddings, N is the vocabulary size, and for knowledge graph embeddings, N is the number of entities, both leading to infeasible computational requirements."}, {"id": 51, "string": "Instead, we use the REINFORCE (Williams, 1992) gradient estimator for \u2207 \u03b8 L(\u03b8, x): (1\u2212\u03bb) E \u2212l \u03c9 (x, y + , y \u2212 )\u2207 \u03b8 log(g \u03b8 (y \u2212 |x)) (6) where the expectation E is with respect to p(y + , y \u2212 |x) = p(y + |x)g \u03b8 (y \u2212 |x), and the discriminator loss l \u03c9 (x, y + , y \u2212 ) acts as the reward."}, {"id": 52, "string": "With a separable loss, the (conditional) value function of the minimax game is: L(\u03c9, \u03b8; x) = E p + (y|x) s \u03c9 (x, y) \u2212 E pnce(y)s\u03c9 (x, y) \u2212 E g \u03b8 (y|x)s\u03c9 (x, y) (7) and only the last term depends on the generator parameter \u03c9."}, {"id": 53, "string": "Hence, with a separable loss, the reward is \u2212s(x + , y \u2212 )."}, {"id": 54, "string": "This reduction does not happen with a non-separable loss, and we have to use l \u03c9 (x, y + , y \u2212 )."}, {"id": 55, "string": "Entropy and training stability GAN training can suffer from instability and degeneracy where the generator probability mass collapses to a few modes or points."}, {"id": 56, "string": "Much work has been done to stabilize GAN training in the continuous case Gulrajani et al., 2017; Cao et al., 2018) ."}, {"id": 57, "string": "In ACE, if the generator g \u03b8 probability mass collapses to a few candidates, then after the discriminator successfully learns about these negatives, g \u03b8 cannot adapt to select new hard negatives, because the REIN-FORCE gradient estimator Eq."}, {"id": 58, "string": "6 relies on g \u03b8 being able to explore other candidates during sampling."}, {"id": 59, "string": "Therefore, if the g \u03b8 probability mass collapses, instead of leading to oscillation as in typical GAN, the min-max game in ACE reaches an equilibrium where the discriminator wins and g \u03b8 can no longer adapt, then ACE falls back to NCE since the negative sampler has another mixture component from NCE."}, {"id": 60, "string": "This behavior of gracefully falling back to NCE is more desirable than the alternative of stalled training if p \u2212 (y|x) does not have a simple p nce mixture component."}, {"id": 61, "string": "However, we would still like to avoid such collapse, as the adversarial samples provide greater learning signals than NCE samples."}, {"id": 62, "string": "To this end, we propose to use a regularizer to encourage the categorical distribution g \u03b8 (y|x) to have high entropy."}, {"id": 63, "string": "In order to make the the regularizer interpretable and its hyperparameters easy to tune, we design the following form: R ent (x) = min(0, c \u2212 H(g \u03b8 (y|x))) (8) where H(g \u03b8 (y|x)) is the entropy of the categorical distribution g \u03b8 (y|x), and c = log(k) is the entropy of a uniform distribution over k choices, and k is a hyper-parameter."}, {"id": 64, "string": "Intuitively, R ent expresses the prior that the generator should spread its mass over more than k choices for each x."}, {"id": 65, "string": "Handling false negatives During negative sampling, p \u2212 (y|x) could actually produce y that forms a positive pair that exists in the training set, i.e., a false negative."}, {"id": 66, "string": "This possibility exists in NCE already, but since p nce is not adaptive, the probability of sampling a false negative is low."}, {"id": 67, "string": "Hence in NCE, the score on this false negative (true observation) pair is pushed up less in the negative term than in the positive term."}, {"id": 68, "string": "However, with the adaptive sampler, g \u03c9 (y|x), false negatives become a much more severe issue."}, {"id": 69, "string": "g \u03c9 (y|x) can learn to concentrate its mass on a few false negatives, significantly canceling the learning of those observations in the positive phase."}, {"id": 70, "string": "The entropy regularization reduces this problem as it forces the generator to spread its mass, hence reducing the chance of a false negative."}, {"id": 71, "string": "To further alleviate this problem, whenever computationally feasible, we apply an additional two-step technique."}, {"id": 72, "string": "First, we maintain a hash map of the training data in memory, and use it to efficiently detect if a negative sample (x + , y \u2212 ) is an actual observation."}, {"id": 73, "string": "If so, its contribution to the loss is given a zero weight in \u03c9 learning step."}, {"id": 74, "string": "Second, to upate \u03b8 in the generator learning step, the reward for false negative samples are replaced by a large penalty, so that the REINFORCE gradient update would steer g \u03b8 away from those samples."}, {"id": 75, "string": "The second step is needed to prevent null computation where g \u03b8 learns to sample false negatives which are subsequently ignored by the discriminator update for \u03c9. Variance Reduction The basic REINFORCE gradient estimator is poised with high variance, so in practice one often needs to apply variance reduction techniques."}, {"id": 76, "string": "The most basic form of variance reduction is to subtract a baseline from the reward."}, {"id": 77, "string": "As long as the baseline is not a function of actions (i.e., samples y \u2212 being drawn), the REINFORCE gradient estimator remains unbiased."}, {"id": 78, "string": "More advanced gradient estimators exist that also reduce variance (Grathwohl et al., 2017; Tucker et al., 2017; Liu et al., 2018) , but for simplicity we use the self-critical baseline method (Rennie et al., 2016) , where the baseline is b(x) = l \u03c9 (y + , y , x), or b(x) = \u2212s \u03c9 (y , x) in the separable loss case, and y = argmax i g \u03b8 (y i |x)."}, {"id": 79, "string": "In other words, the baseline is the reward of the most likely sample according to the generator."}, {"id": 80, "string": "2.7 Improving exploration in g \u03b8 by leveraging NCE samples In Sec."}, {"id": 81, "string": "2.4 we touched on the need for sufficient exploration in g \u03b8 ."}, {"id": 82, "string": "It is possible to also leverage negative samples from NCE to help the generator learn."}, {"id": 83, "string": "This is essentially off-policy exploration in reinforcement learning since NCE samples are not drawn according to g \u03b8 (y|x)."}, {"id": 84, "string": "The generator learning can use importance re-weighting to leverage those samples."}, {"id": 85, "string": "The resulting REIN-FORCE gradient estimator is basically the same as Eq."}, {"id": 86, "string": "6 except that the rewards are reweighted by g \u03b8 (y \u2212 |x)/p nce (y \u2212 ), and the expectation is with respect to p(y + |x)p nce (y \u2212 )."}, {"id": 87, "string": "This additional offpolicy learning term provides gradient information for generator learning if g \u03b8 (y \u2212 |x) is not zero, meaning that for it to be effective in helping exploration, the generator cannot be collapsed at the first place."}, {"id": 88, "string": "Hence, in practice, this term is only used to further help on top of the entropy regularization, but it does not replace it."}, {"id": 89, "string": "Related Work Smith and Eisner (2005) proposed contrastive estimation as a way for unsupervised learning of log-linear models by taking implicit evidence from user-defined neighborhoods around observed datapoints."}, {"id": 90, "string": "Gutmann and Hyv\u00e4rinen (2010) introduced NCE as an alternative to the hierarchical softmax."}, {"id": 91, "string": "In the works of Mnih and Teh (2012) and Mnih and Kavukcuoglu (2013) , NCE is applied to log-bilinear models and Vaswani et al."}, {"id": 92, "string": "(2013) applied NCE to neural probabilistic language models (Yoshua et al., 2003) ."}, {"id": 93, "string": "Compared to these previous NCE methods that rely on simple fixed sampling heuristics, ACE uses an adaptive sampler that produces harder negatives."}, {"id": 94, "string": "In the domain of max-margin estimation for structured prediction (Taskar et al., 2005) , loss augmented MAP inference plays the role of finding hard negatives (the hardest)."}, {"id": 95, "string": "However, this inference is only tractable in a limited class of models such structured SVM (Tsochantaridis et al., 2005) ."}, {"id": 96, "string": "Compared to those models that use exact maximization to find the hardest negative configuration each time, the generator in ACE can be viewed as learning an approximate amortized inference network."}, {"id": 97, "string": "Concurrently to this work, Tu and Gimpel (2018) proposes a very similar framework, using a learned inference network for Structured prediction energy networks (SPEN) (Belanger and McCallum, 2016) ."}, {"id": 98, "string": "Concurrent with our work, there have been other interests in applying the GAN to NLP problems (Fedus et al., 2018; Wang et al., 2018; Cai and Wang, 2017) ."}, {"id": 99, "string": "Knowledge graph models naturally lend to a GAN setup, and has been the subject of study in Wang et al."}, {"id": 100, "string": "(2018) and Cai and Wang (2017) ."}, {"id": 101, "string": "These two concurrent works are most closely related to one of the three tasks on which we study ACE in this work."}, {"id": 102, "string": "Besides a more general formulation that applies to problems beyond those considered in Wang et al."}, {"id": 103, "string": "(2018) and Cai and Wang (2017) , the techniques introduced in our work on handling false negatives and entropy regularization lead to improved experimental results as shown in Sec."}, {"id": 104, "string": "5.4."}, {"id": 105, "string": "Application of ACE on three tasks 4.1 Word Embeddings Word embeddings learn a vector representation of words from co-occurrences in a text corpus."}, {"id": 106, "string": "NCE casts this learning problem as a binary classification where the model tries to distinguish positive word and context pairs, from negative noise samples composed of word and false context pairs."}, {"id": 107, "string": "The NCE objective in Skip-gram (Mikolov et al., 2013) for word embeddings is a separable loss of the form: L = \u2212 wt\u2208V [log p(y = 1|w t , w + c ) + K c=1 log p(y = 0|w t , w \u2212 c )] (9) Here, w + c is sampled from the set of true contexts and w \u2212 c \u223c Q is sampled k times from a fixed noise distribution."}, {"id": 108, "string": "Mikolov et al."}, {"id": 109, "string": "(2013) introduced a further simplification of NCE, called \"Negative Sampling\" (Dyer, 2014) ."}, {"id": 110, "string": "With respect to our ACE framework, the difference between NCE and Negative Sampling is inconsequential, so we continue the discussion using NCE."}, {"id": 111, "string": "A drawback of this sampling scheme is that it favors more common words as context."}, {"id": 112, "string": "Another issue is that the negative context words are sampled in the same way, rather than tailored toward the actual target word."}, {"id": 113, "string": "To apply ACE to this problem we first define the value function for the minimax game, V (D, G), as follows: V (D, G) = E p + (wc) [log D(w c , w t )] \u2212 E pnce(wc) [\u2212 log(1 \u2212 D(w c , w t ))] \u2212 E g \u03b8 (wc|wt) [\u2212 log(1 \u2212 D(w c , w t ))] (10) with D = p(y = 1|w t , w c ) and G = g \u03b8 (w c |w t )."}, {"id": 114, "string": "Implementation details For our experiments, we train all our models on a single pass of the May 2017 dump of the English Wikipedia with lowercased unigrams."}, {"id": 115, "string": "The vocabulary size is restricted to the top 150k most frequent words when training from scratch while for finetuning we use the same vocabulary as Pennington et al."}, {"id": 116, "string": "(2014) , which is 400k of the most frequent words."}, {"id": 117, "string": "We use 5 NCE samples for each positive sample and 1 adversarial sample in a window size of 10 and the same positive subsampling scheme proposed by Mikolov et al."}, {"id": 118, "string": "(2013) ."}, {"id": 119, "string": "Learning for both G and D uses Adam (Kingma and Ba, 2014) optimizer with its default parameters."}, {"id": 120, "string": "Our conditional discriminator is modeled using the Skip-Gram architecture, which is a two layer neural network with a linear mapping between the layers."}, {"id": 121, "string": "The generator network consists of an embedding layer followed by two small hidden layers, followed by an output softmax layer."}, {"id": 122, "string": "The first layer of the generator shares its weights with the second embedding layer in the discriminator network, which we find really speeds up convergence as the generator does not have to relearn its own set of embeddings."}, {"id": 123, "string": "The difference between the discriminator and generator is that a sigmoid nonlinearity is used after the second layer in the discriminator, while in the generator, a softmax layer is used to define a categorical distribution over negative word candidates."}, {"id": 124, "string": "We find that controlling the generator entropy is critical for finetuning experiments as otherwise the generator collapses to its favorite negative sample."}, {"id": 125, "string": "The word embeddings are taken to be the first dense matrix in the discriminator."}, {"id": 126, "string": "Order Embeddings Hypernym Prediction As introduced in Vendrov et al."}, {"id": 127, "string": "(2016) , ordered representations over hierarchy can be learned by order embeddings."}, {"id": 128, "string": "An example task for such ordered representation is hypernym prediction."}, {"id": 129, "string": "A hypernym pair is a pair of concepts where the first concept is a specialization or an instance of the second."}, {"id": 130, "string": "For completeness, we briefly describe order embeddings, then analyze ACE on the hypernym prediction task."}, {"id": 131, "string": "In order embeddings, each entity is represented by a vector in R N , the score for a positive ordered pair of entities (x, y) is defined by s \u03c9 (x, y) = ||max(0, y \u2212 x)|| 2 and, score for a negative ordered pair (x + , y \u2212 ) is defined b\u1ef9 s \u03c9 (x + , y \u2212 ) = max{0, \u03b7 \u2212 s(x + , y \u2212 )}, where is \u03b7 is the margin."}, {"id": 132, "string": "Let f (u) be the embedding function which takes an entity as input and outputs en embedding vector."}, {"id": 133, "string": "We define P as a set of positive pairs and N as negative pairs, the separable loss function for order embedding task is defined by: L = (u,v)\u2208P s \u03c9 (f (u), f (v)))+ (u,v)\u2208Ns (f (u), f (v)) (11) Implementation details Our generator for this task is just a linear fully connected softmax layer, taking an embedding vector from discriminator as input and outputting a categorical distribution over the entity set."}, {"id": 134, "string": "For the discriminator, we inherit all model setting from Vendrov et al."}, {"id": 135, "string": "(2016) : we use 50 dimensions hidden state and bash size 1000, a learning rate of 0.01 and the Adam optimizer."}, {"id": 136, "string": "For the generator, we use a batch size of 1000, a learning rate 0.01 and the Adam optimizer."}, {"id": 137, "string": "We apply weight decay with rate 0.1 and entropy loss regularization as described in Sec."}, {"id": 138, "string": "2.4."}, {"id": 139, "string": "We handle false negative as described in Sec."}, {"id": 140, "string": "2.5."}, {"id": 141, "string": "After cross validation, variance reduction and leveraging NCE samples does not greatly affect the order embedding task."}, {"id": 142, "string": "Knowledge Graph Embeddings Knowledge graphs contain entity and relation data of the form (head entity, relation, tail entity), and the goal is to learn from observed positive entity relations and predict missing links (a.k.a."}, {"id": 143, "string": "link prediction)."}, {"id": 144, "string": "There have been many works on knowledge graph embeddings, e.g."}, {"id": 145, "string": "TransE (Bordes et al., 2013) , TransR (Lin et al., 2015) , TransH (Wang et al., 2014) , TransD (Ji et al., 2015) , Complex (Trouillon et al., 2016) , DistMult (Yang et al., 2014) and ConvE (Dettmers et al., 2017) ."}, {"id": 146, "string": "Many of them use a contrastive learning objective."}, {"id": 147, "string": "Here we take TransD as an example, and modify its noise contrastive learning to ACE, and demonstrate significant improvement in sample efficiency and link prediction results."}, {"id": 148, "string": "Implementation details Let a positive entity-relation-entity triplet be denoted by \u03be + = (h + , r + , t + ), and a negative triplet could either have its head or tail be a negative sample, i.e."}, {"id": 149, "string": "\u03be \u2212 = (h \u2212 , r + , t + ) or \u03be \u2212 = (h + , r + , t \u2212 )."}, {"id": 150, "string": "In either case, the general formulation in Sec."}, {"id": 151, "string": "2.1 still applies."}, {"id": 152, "string": "The non-separable loss function takes on the form: l = max(0, \u03b7 + s \u03c9 (\u03be + ) \u2212 s \u03c9 (\u03be \u2212 )) (12) The scoring rule is: s = h \u22a5 + r \u2212 t \u22a5 (13) where r is the embedding vector for r, and h \u22a5 is projection of the embedding of h onto the space of r by h \u22a5 = h + r p h p h, where r p and h p are projection parameters of the model."}, {"id": 153, "string": "t \u22a5 is defined in a similar way through parameters t, t p and r p ."}, {"id": 154, "string": "The form of the generator g \u03b8 (t \u2212 |r + , h + ) is chosen to be f \u03b8 (h \u22a5 , h \u22a5 + r), where f \u03b8 is a feedforward neural net that concatenates its two input arguments, then propagates through two hidden layers, followed by a final softmax output layer."}, {"id": 155, "string": "As a function of (r + , h + ), g \u03b8 shares parameter with the discriminator, as the inputs to f \u03b8 are the embedding vectors."}, {"id": 156, "string": "During generator learning, only \u03b8 is updated and the TransD model embedding parameters are frozen."}, {"id": 157, "string": "Experiments We evaluate ACE with experiments on word embeddings, order embeddings, and knowledge graph embeddings tasks."}, {"id": 158, "string": "In short, whenever the original learning objective is contrastive (all tasks except Glove fine-tuning) our results consistently show that ACE improves over NCE."}, {"id": 159, "string": "In some cases, we include additional comparisons to the state-of-art results on the task to put the significance of such improvements in context: the generic ACE can often make a reasonable baseline competitive with SOTA methods that are optimized for the task."}, {"id": 160, "string": "For word embeddings, we evaluate models trained from scratch as well as fine-tuned Glove models (Pennington et al., 2014) on word similarity tasks that consist of computing the similarity   between word pairs where the ground truth is an average of human scores."}, {"id": 161, "string": "We choose the Rare word dataset (Luong et al., 2013) and WordSim-353 (Finkelstein et al., 2001) by virtue of our hypothesis that ACE learns better representations for both rare and frequent words."}, {"id": 162, "string": "We also qualitatively evaluate ACE word embeddings by inspecting the nearest neighbors of selected words."}, {"id": 163, "string": "For the hypernym prediction task, following Vendrov et al."}, {"id": 164, "string": "(2016) , hypernym pairs are created from the WordNet hierarchy's transitive closure."}, {"id": 165, "string": "We use the released random development split and test split from Vendrov et al."}, {"id": 166, "string": "(2016) , which both contain 4000 edges."}, {"id": 167, "string": "For knowledge graph embeddings, we use TransD (Ji et al., 2015) as our base model, and perform ablation study to analyze the behavior of ACE with various add-on features, and confirm that entropy regularization is crucial for good performance in ACE."}, {"id": 168, "string": "We also obtain link prediction results that are competitive or superior to the stateof-arts on the WN18 dataset (Bordes et al., 2014) ."}, {"id": 169, "string": "Training Word Embeddings from scratch In this experiment, we empirically observe that training word embeddings using ACE converges significantly faster than NCE after one epoch."}, {"id": 170, "string": "As shown in Fig."}, {"id": 171, "string": "3 both ACE (a mixture of p nce and g \u03b8 ) and just g \u03b8 (denoted by ADV) significantly outperforms the NCE baseline, with an absolute improvement of 73.1% and 58.5% respectively on RW score."}, {"id": 172, "string": "We note similar results on WordSim-353 dataset where ACE and ADV outperforms NCE by 40.4% and 45.7%."}, {"id": 173, "string": "We also evaluate our model qualitatively by inspecting the nearest neighbors of selected words in Table."}, {"id": 174, "string": "1."}, {"id": 175, "string": "We first present the five nearest neighbors to each word to show that both NCE and ACE models learn sensible embeddings."}, {"id": 176, "string": "We then show that ACE embeddings have much better semantic relevance in a larger neighborhood (nearest neighbor 45-50)."}, {"id": 177, "string": "Finetuning Word Embeddings We take off-the-shelf pre-trained Glove embeddings which were trained using 6 billion tokens (Pennington et al., 2014) and fine-tune them using our algorithm."}, {"id": 178, "string": "It is interesting to note that the original Glove objective does not fit into the contrastive learning framework, but nonetheless we find that they benefit from ACE."}, {"id": 179, "string": "In fact, we observe that training such that 75% of the words appear as positive contexts is sufficient to beat the largest dimensionality pre-trained Glove model on word similarity tasks."}, {"id": 180, "string": "We evaluate our performance on the Rare Word and WordSim353 data."}, {"id": 181, "string": "As can be seen from our results in Table 2 , ACE on RW is not always better and for the 100d and 300d Glove embeddings is marginally worse."}, {"id": 182, "string": "However, on WordSim353 ACE does considerably better across the board to the point where 50d Glove embeddings outperform the 300d baseline Glove model."}, {"id": 183, "string": "Hypernym Prediction As shown in Table 3 , with ACE training, our method achieves a 1.5% improvement on accu-   racy over Vendrov et al."}, {"id": 184, "string": "(2016) without tunning any of the discriminator's hyperparameters."}, {"id": 185, "string": "We further report training curve in Fig."}, {"id": 186, "string": "1 , we report loss curve on randomly sampled pairs."}, {"id": 187, "string": "We stress that in the ACE model, we train random pairs and generator generated pairs jointly, as shown in Fig."}, {"id": 188, "string": "2 , hard negatives help the order embedding model converges faster."}, {"id": 189, "string": "Ablation Study and Improving TransD To analyze different aspects of ACE, we perform an ablation study on the knowledge graph embedding task."}, {"id": 190, "string": "As described in Sec."}, {"id": 191, "string": "4.3, the base Method Accuracy (%) order-embeddings 90.6 order-embeddings + Our ACE 92.0 Table 3 : Order Embedding Performance model (discriminator) we apply ACE to is TransD (Ji et al., 2015) ."}, {"id": 192, "string": "Fig."}, {"id": 193, "string": "5 shows validation performance as training progresses."}, {"id": 194, "string": "All variants of ACE converges to better results than base NCE."}, {"id": 195, "string": "Among ACE variants, all methods that include entropy regularization significantly outperform without entropy regularization."}, {"id": 196, "string": "Without the self critical baseline variance reduction, learning could progress faster at the beginning but the final performance suffers slightly."}, {"id": 197, "string": "The best performance is obtained without the additional off-policy learning of the generator."}, {"id": 198, "string": "Table."}, {"id": 199, "string": "4 shows the final test results on WN18 link prediction task."}, {"id": 200, "string": "It is interesting to note that ACE improves MRR score more significantly than hit@10."}, {"id": 201, "string": "As MRR is a lot more sensitive to the top rankings, i.e., how the correct configuration ranks among the competitive alternatives, this is consistent with the fact that ACE samples hard negatives and forces the base model to learn a more discriminative representation of the positive examples."}, {"id": 202, "string": "(Trouillon et al., 2016) , which achieves the SOTA on this dataset."}, {"id": 203, "string": "Among all TransD based models (the best results in this group is underlined), ACE improves over basic NCE and another GAN based approach KBGAN."}, {"id": 204, "string": "The gap on MRR is likely due to the difference between TransD and COMPLEX models."}, {"id": 205, "string": "Hard Negative Analysis To better understand the effect of the adversarial samples proposed by the generator we plot the discriminator loss on both p nce and g \u03b8 samples."}, {"id": 206, "string": "In this context, a harder sample means a higher loss assigned by the discriminator."}, {"id": 207, "string": "Fig."}, {"id": 208, "string": "4 shows that discriminator loss for the word embedding task on g \u03b8 samples are always higher than on p nce samples, confirming that the generator is indeed sampling harder negatives."}, {"id": 209, "string": "For Hypernym Prediction task, Fig.2 shows discriminator loss on negative pairs sampled from NCE and ACE respectively."}, {"id": 210, "string": "The higher the loss the harder the negative pair is."}, {"id": 211, "string": "As indicated in the left plot, loss on the ACE negative terms collapses faster than on the NCE negatives."}, {"id": 212, "string": "After adding entropy regularization and weight decay, the generator works as expected."}, {"id": 213, "string": "Limitations When the generator softmax is large, the current implementation of ACE training is computationally expensive."}, {"id": 214, "string": "Although ACE converges faster per iteration, it may converge more slowly on wall-clock time depending on the cost of the softmax."}, {"id": 215, "string": "However, embeddings are typically used as pre-trained building blocks for subsequent tasks."}, {"id": 216, "string": "Thus, their learning is usually the pre-computation step for the more complex downstream models and spending more time is justified, especially with GPU acceleration."}, {"id": 217, "string": "We believe that the computational cost could potentially be reduced via some existing techniques such as the \"augment and reduce\" variational inference of (Ruiz et al., 2018), adaptive softmax (Grave et al., 2016) , or the \"sparsely-gated\" softmax of Shazeer et al."}, {"id": 218, "string": "(2017) , but leave that to future work."}, {"id": 219, "string": "Another limitation is on the theoretical front."}, {"id": 220, "string": "As noted in Goodfellow (2014) , GAN learning does not implement maximum likelihood estimation (MLE), while NCE has MLE as an asymptotic limit."}, {"id": 221, "string": "To the best of our knowledge, more distant connections between GAN and MLE training are not known, and tools for analyzing the equilibrium of a min-max game where players are parametrized by deep neural nets are currently not available to the best of our knowledge."}, {"id": 222, "string": "Conclusion In this paper, we propose Adversarial Contrastive Estimation as a general technique for improving supervised learning problems that learn by contrasting observed and fictitious samples."}, {"id": 223, "string": "Specifically, we use a generator network in a conditional GAN like setting to propose hard negative examples for our discriminator model."}, {"id": 224, "string": "We find that a mixture distribution of randomly sampling negative examples along with an adaptive negative sampler leads to improved performances on a variety of embedding tasks."}, {"id": 225, "string": "We validate our hypothesis that hard negative examples are critical to optimal learning and can be proposed via our ACE framework."}, {"id": 226, "string": "Finally, we find that controlling the entropy of the generator through a regularization term and properly handling false negatives is crucial for successful training."}], "headers": [{"section": "Introduction", "n": "1", "start": 0, "end": 22}, {"section": "Background: contrastive learning", "n": "2.1", "start": 23, "end": 41}, {"section": "Adversarial mixture noise", "n": "2.2", "start": 42, "end": 45}, {"section": "Learning the generator", "n": "2.3", "start": 46, "end": 54}, {"section": "Entropy and training stability", "n": "2.4", "start": 55, "end": 64}, {"section": "Handling false negatives", "n": "2.5", "start": 65, "end": 74}, {"section": "Variance Reduction", "n": "2.6", "start": 75, "end": 88}, {"section": "Related Work", "n": "3", "start": 89, "end": 104}, {"section": "Application of ACE on three tasks 4.1 Word Embeddings", "n": "4", "start": 105, "end": 125}, {"section": "Order Embeddings Hypernym Prediction", "n": "4.2", "start": 126, "end": 141}, {"section": "Knowledge Graph Embeddings", "n": "4.3", "start": 142, "end": 156}, {"section": "Experiments", "n": "5", "start": 157, "end": 168}, {"section": "Training Word Embeddings from scratch", "n": "5.1", "start": 169, "end": 176}, {"section": "Finetuning Word Embeddings", "n": "5.2", "start": 177, "end": 182}, {"section": "Hypernym Prediction", "n": "5.3", "start": 183, "end": 188}, {"section": "Ablation Study and Improving TransD", "n": "5.4", "start": 189, "end": 204}, {"section": "Hard Negative Analysis", "n": "5.5", "start": 205, "end": 212}, {"section": "Limitations", "n": "6", "start": 213, "end": 221}, {"section": "Conclusion", "n": "7", "start": 222, "end": 226}], "figures": [{"filename": "../figure/image/1047-Table4-1.png", "caption": "Table 4: WN18 experiments: the first portion of the table contains results where the base model is TransD, the last separated line is the COMPLEX embedding model (Trouillon et al., 2016), which achieves the SOTA on this dataset. Among all TransD based models (the best results in this group is underlined), ACE improves over basic NCE and another GAN based approach KBGAN. The gap on MRR is likely due to the difference between TransD and COMPLEX models.", "page": 8, "bbox": {"x1": 72.96, "x2": 291.36, "y1": 302.4, "y2": 404.15999999999997}}, {"filename": "../figure/image/1047-Figure5-1.png", "caption": "Figure 5: Ablation study: measuring validation Mean Reciprocal Rank (MRR) on WN18 dataset as training progresses.", "page": 8, "bbox": {"x1": 72.0, "x2": 291.36, "y1": 61.44, "y2": 224.16}}, {"filename": "../figure/image/1047-Table1-1.png", "caption": "Table 1: Top 5 Nearest Neighbors of Words followed by Neighbors 45-50 for different Models.", "page": 7, "bbox": {"x1": 97.92, "x2": 497.28, "y1": 62.4, "y2": 296.15999999999997}}, {"filename": "../figure/image/1047-Table2-1.png", "caption": "Table 2: Spearman score (\u03c1 \u2217 100) on RW and WS353 Datasets. We trained a skipgram model from scratch under various settings for only 1 epoch on wikipedia. For finetuned models we recomputed the scores based on the publicly available 6B tokens Glove models and we finetuned until roughly 75% of the vocabulary was seen.", "page": 7, "bbox": {"x1": 72.0, "x2": 291.36, "y1": 335.52, "y2": 445.91999999999996}}, {"filename": "../figure/image/1047-Table3-1.png", "caption": "Table 3: Order Embedding Performance", "page": 7, "bbox": {"x1": 306.71999999999997, "x2": 526.0799999999999, "y1": 335.52, "y2": 379.2}}, {"filename": "../figure/image/1047-Figure1-1.png", "caption": "Figure 1: Left: Order embedding Accuracy plot. Right: Order embedding discriminator Loss plot on NCE sampled negative pairs and positive pairs.", "page": 6, "bbox": {"x1": 89.75999999999999, "x2": 295.2, "y1": 53.76, "y2": 131.04}}, {"filename": "../figure/image/1047-Figure2-1.png", "caption": "Figure 2: loss curve on NCE negative pairs and ACE negative pairs. Left: without entropy and weight decay. Right: with entropy and weight decay", "page": 6, "bbox": {"x1": 301.92, "x2": 508.32, "y1": 51.839999999999996, "y2": 130.07999999999998}}]}