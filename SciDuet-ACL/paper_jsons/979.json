{"title": "To Attend or not to Attend: A Case Study on Syntactic Structures for Semantic Relatedness", "abstract": "With the recent success of Recurrent Neural Networks (RNNs) in Machine Translation (MT), attention mechanisms have become increasingly popular. The purpose of this paper is two-fold; firstly, we propose a novel attention model on Tree Long Short-Term Memory Networks (Tree-LSTMs), a tree-structured generalization of standard LSTM. Secondly, we study the interaction between attention and syntactic structures, by experimenting with three LSTM variants: bidirectional-LSTMs, Constituency Tree-LSTMs, and Dependency Tree-LSTMs. Our models are evaluated on two semantic relatedness tasks: semantic relatedness scoring for sentence pairs (SemEval 2012, Task 6 and SemEval 2014, Task 1) and paraphrase detection for question pairs (Quora, 2017). 1", "text": [{"id": 0, "string": "Introduction Recurrent Neural Networks (RNNs), in particular Long Short-Term Memory Networks (LSTMs) (Hochreiter and Schmidhuber, 1997) , have demonstrated remarkable accomplishments in Natural Language Processing (NLP) in recent years."}, {"id": 1, "string": "Several tasks such as information extraction, question answering, and machine translation have benefited from them."}, {"id": 2, "string": "However, in their vanilla forms, these networks are constrained by the sequential order of tokens in a sentence."}, {"id": 3, "string": "To mitigate this limitation, structural (dependency or constituency) information in a sentence was exploited and witnessed partial success in various tasks (Goller and Kuchler, 1996; Yamada and Knight, 2001; Quirk et al., 2005; Socher et al., 2011; Tai et al., 2015) ."}, {"id": 4, "string": "On the other hand, alignment techniques (Brown et al., 1993) and attention mechanisms (Bahdanau et al., 2014) act as a catalyst to augment the performance of classical Statistical Machine Translation (SMT) and Neural Machine Translation (NMT) models, respectively."}, {"id": 5, "string": "In short, both approaches focus on sub-strings of source sentence which are significant for predicting target words while translating."}, {"id": 6, "string": "Currently, the combination of linear RNNs/LSTMs and attention mechanisms has become a de facto standard architecture for many NLP tasks."}, {"id": 7, "string": "At the intersection of sentence encoding and attention models, some interesting questions emerge: Can attention mechanisms be employed on tree structures, such as Tree-LSTMs (Tai et al., 2015) ?"}, {"id": 8, "string": "If yes, what are the possible tree-based attention models?"}, {"id": 9, "string": "Do different tree structures (in particular constituency vs. dependency) have different behaviors in such models?"}, {"id": 10, "string": "With these questions in mind, we present our investigation and findings in the context of semantic relatedness tasks."}, {"id": 11, "string": "Background 2.1 Long Short-Term Memory Networks (LSTMs) Concisely, an LSTM network (Hochreiter and Schmidhuber, 1997) (Figure 1 ) includes a memory cell at each time step which controls the amount of information being penetrated into the cell, neglected, and yielded by the cell."}, {"id": 12, "string": "Various LSTM networks (Greff et al., 2017) have been explored till now; we focus on one representative form."}, {"id": 13, "string": "To be more precise, we consider a LSTM memory cell involving: an input gate i t , a forget gate f t , and an output gate o t at time step t. Apart from ..."}, {"id": 14, "string": "Figure 1 : A linear LSTM network."}, {"id": 15, "string": "w t is the word embedding, h t is the hidden state vector, c t is the memory cell vector and y t is the final processed output at time step t. the hidden state h t\u22121 and input embedding w t of the current word, the recursive function in LSTM also takes the previous time's memory cell state, c t\u22121 , into account, which is not the case in simple RNN."}, {"id": 16, "string": "The following equations summarize a LSTM memory cell at time step t: i t = \u03c3(w t W i + h t\u22121 R i + b i ) (1) f t = \u03c3(w t W f + h t\u22121 R f + b f ) (2) o t = \u03c3(w t W o + h t\u22121 R o + b o ) (3) u t = tanh(w t W u + h t\u22121 R u + b u ) (4) c t = i t u t + f t c t\u22121 (5) h t = o t tanh(c t ) (6) where: \u2022 (W i , W f , W o , W u ) \u2208 R D x d represent in- put weight matrices, where d is the dimension of the hidden state vector and D is the dimension of the input word embedding, w t ."}, {"id": 17, "string": "\u2022 (R i , R f , R o , R u ) \u2208 R d x d represent recur- rent weight matrices and (b i , b f , b o , b u ) \u2208 R d represent biases."}, {"id": 18, "string": "\u2022 c t \u2208 R d is the new memory cell vector at time step t. As can be seen in Eq."}, {"id": 19, "string": "5, the input gate i t limits the new information, u t , by employing the element wise multiplication operator ."}, {"id": 20, "string": "Moreover, the forget gate f t regulates the amount of information from the previous state c t\u22121 ."}, {"id": 21, "string": "Therefore, the current memory state c t includes both new and previous time step's information but partially."}, {"id": 22, "string": "A natural extension of LSTM network is a bidirectional LSTM (bi-LSTM), which lets the sequence pass through the architecture in both directions and aggregate the information at each time step."}, {"id": 23, "string": "Again, it strictly preserves the sequential nature of LSTMs."}, {"id": 24, "string": "Linguistically Motivated Sentence Structures Most computational linguists have developed a natural inclination towards hierarchical structures of natural language, which follow guidelines collectively referred to as syntax."}, {"id": 25, "string": "Typically, such structures manifest themselves in parse trees."}, {"id": 26, "string": "We investigate two popular forms: Constituency and Dependency trees."}, {"id": 27, "string": "Constituency structure Briefly, constituency trees ( Figure 2 :a) indicate a hierarchy of syntactic units and encapsulate phrase grammar rules."}, {"id": 28, "string": "Moreover, these trees explicitly demonstrate groups of phrases (e.g., Noun Phrases) in a sentence."}, {"id": 29, "string": "Additionally, they discriminate between terminal (lexical) and non-terminal nodes (non-lexical) tokens."}, {"id": 30, "string": "Dependency structure In short, dependency trees ( Figure 2 :b) describe the syntactic structure of a sentence in terms of the words (lemmas) and associated grammatical relations among the words."}, {"id": 31, "string": "Typically, these dependency relations are explicitly typed, which makes the trees valuable for practical applications such as information extraction, paraphrase detection and semantic relatedness."}, {"id": 32, "string": "Tree Long Short-Term Memory Network (Tree-LSTM) Child-Sum Tree-LSTM (Tai et al., 2015) is an epitome of structure-based neural network which explicitly capture the structural information in a sentence."}, {"id": 33, "string": "Tai a parent node can be consolidated selectively from each of its child node."}, {"id": 34, "string": "Architecturally, each gated vector and memory state update of the head node is dependent on the hidden states of its children in the Tree-LSTM."}, {"id": 35, "string": "Assuming a good tree structure of a sentence, each node j of the structure incorporates the following equations."}, {"id": 36, "string": ": h j = k\u2208C(j) h k (7) i j = \u03c3(w j W i +h j R i + b i ) (8) f jk = \u03c3(w j W f + h k R f + b f ) (9) o j = \u03c3(w j W o +h j R o + b o ) (10) u j = tanh(w j W u +h j R u + b u ) (11) c j = i j u j + k\u2208C(j) f jk c k (12) h j = o j tanh(c j ) (13) where: \u2022 w j \u2208 R D represents word embedding of all nodes in Dependency structure and only terminal nodes in Constituency structure."}, {"id": 37, "string": "2 \u2022 (W i , W f , W o , W u ) \u2208 R D x d represent in- put weight matrices."}, {"id": 38, "string": "\u2022 (R i , R f , R o , R u ) \u2208 R d x d represent recur- rent weight matrices, and (b i , b f , b o , b u ) \u2208 R d represent biases."}, {"id": 39, "string": "2 wj is ignored for non-terminal nodes in a Constituency structure by removing the wW terms in Equations 8-11."}, {"id": 40, "string": "\u2022 C(j) is the set of children of node j."}, {"id": 41, "string": "\u2022 f jk \u2208 R d is the forget gate vector for child k of node j."}, {"id": 42, "string": "Referring to Equation 12, the new memory cell state, c j of node j, receives new information, u j , partially."}, {"id": 43, "string": "More importantly, it includes the partial information from each of its direct children, set C(j), by employing the corresponding forget gate, f jk ."}, {"id": 44, "string": "When the Child-Sum Tree model is deployed on a dependency tree, it is referred to as Dependency Tree-LSTM, whereas a constituency-treebased instantiation is referred to as Constituency Tree-LSTM."}, {"id": 45, "string": "Attention Mechanisms Alignment models were first introduced in statistical machine translation (SMT) (Brown et al., 1993) , which connect sub-strings in the source sentence to sub-strings in the target sentence."}, {"id": 46, "string": "Recently, attention techniques (which are effectively soft alignment models) in neural machine translation (NMT) (Bahdanau et al., 2014) came into prominence, where attention scores are calculated by considering words of source sentence while decoding words in target language."}, {"id": 47, "string": "Although effective attention mechanisms (Luong et al., 2015) such as Global Attention Model (GAM) ( Figure 4 ) and Local Attention Model (LAM) have been developed, such techniques have not been explored over Tree-LSTMs."}, {"id": 48, "string": "Inter-Sentence Attention on Tree-LSTMs We present two types of tree-based attention models in this section."}, {"id": 49, "string": "With trivial adaptation, they can be deployed in the sequence setting (degenerated trees)."}, {"id": 50, "string": "Modified Decomposable Attention (MDA) Parikh et al."}, {"id": 51, "string": "(2016)'s original decomposable intersentence attention model only used word embeddings to construct the attention matrix, without any structural encoding of sentences."}, {"id": 52, "string": "Essentially, the model incorporated three components: Attend: Input representations (without sequence or structural encoding) of both sentences, L and R, are soft-aligned."}, {"id": 53, "string": "Compare: A set of vectors is produced by separately comparing each sub-phrase of L to subphrases in R. Vector representation of each subphrase in L is a non-linear combination of representation of word in sentence L and its aligned sub-phrase in sentence R. The same holds true for the set of vectors for sentence R. Aggregate: Both sets of sub-phrases vectors are summed up separately to form final sentence representation of sentence L and sentence R. We decide to augment the original decomposable inter-sentence attention model and generalize it into the tree (and sequence) setting."}, {"id": 54, "string": "To be more specific, we consider two input sequences: L = (l 1 , l 2 ....l len L ), R = (r 1 , r 2 ....r len R ) and their corresponding input representations:L = (l 1 , l 2 ....l len L ),R = (r 1 ,r 2 ....r len R ); where len L and len R represents number of words in L and R, respectively."}, {"id": 55, "string": "MDA on dependency structure Let's assume sequences L and R have dependency tree structures D L and D R ."}, {"id": 56, "string": "In this case, len L and len R represents number of nodes in D L and D R , respectively."}, {"id": 57, "string": "After using a Tree-LSTM to encode tree representations, which results in: D L = (l 1 , l 2 ....l len L ), D R = (r 1 ,r 2 ....r len R ), we gather unnormalized attention weights, e ij and normalize them as follows: e ij =l i (r j ) T (14) \u03b2 i = len R j=1 exp(e ij ) len R k=1 exp(e ik ) * r j (15) \u03b1 j = len L i=1 exp(e ij ) len L k=1 exp(e kj ) * l i (16) From the equations above, we can infer that the attention matrix will have a dimension len L x len R ."}, {"id": 58, "string": "In contrast to the original model, we compute the final representations of the each sentence by concatenating the LSTM-encoded representation of root with the attention-weighted representation of the root 3 : h L = G([l root L ; \u03b2 root L ]) (17) h R = G([r root R ; \u03b1 root R ]) (18) where G is a feed-forward neural network."}, {"id": 59, "string": "h L and h R are final vector representations of input sequences L and R, respectively."}, {"id": 60, "string": "MDA on constituency structure Let's assume sequences L and R have constituency tree structures C L and C R ."}, {"id": 61, "string": "Moreover, assume C L and C R have total number of nodes as N L (> len L ) and N R (> len R ), respectively."}, {"id": 62, "string": "As in 3.1.1, the attention mechanism is employed after encoding the trees C L and C R ."}, {"id": 63, "string": "While encoding trees, terminal and non-terminal nodes are handled in the same way as in the original Tree-LSTM model (see 2."}, {"id": 64, "string": "3)."}, {"id": 65, "string": "It should be noted that we collect hidden states of all the nodes (N L and N R ) individually in C L and C R during the encoding process."}, {"id": 66, "string": "Hence, hidden states matrix will have dimension N L x d for tree C L whereas for tree C R , it will have dimension N R x d; where d is dimension of each hidden state."}, {"id": 67, "string": "Therefore, attention matrix will have a dimension N L x N R ."}, {"id": 68, "string": "Finally, we employ Equations 14-18 to compute the final representations of sequences L and R. Progressive Attention (PA) In this section, we propose a novel attention mechanism on Tree-LSTM, inspired by (Quirk et al., 2005) and (Yamada and Knight, 2001) ."}, {"id": 69, "string": "PA on dependency structure Let's assume a dependency tree structure of sentence L = (l 1 , l 2 ....l len L ) is available as D L ; where len L represents number of nodes in D L ."}, {"id": 70, "string": "Similarly, tree D R corresponds to the sentence R = (r 1 , r 2 ....r len R ); where len R represents number of nodes in D R ."}, {"id": 71, "string": "In PA, the objective is to produce the final vector representation of tree D R conditional on the hidden state vectors of all nodes of D L ."}, {"id": 72, "string": "Similar to the encoding process in NMT, we encode R by attending each node of D R to all nodes in D L ."}, {"id": 73, "string": "Let's name this process Phase1."}, {"id": 74, "string": "Next, Phase2 is performed where L is encoded in the similar way to get the final vector representation of D L ."}, {"id": 75, "string": "Referring to Figure 5 and assuming Phase1 is being executed, a hidden state matrix, H L , is obtained by concatenating the hidden state vector of every node in tree D L , where the number of nodes in D L = 3."}, {"id": 76, "string": "Next, tree D R is processed by calculating the hidden state vector at every node."}, {"id": 77, "string": "Assume that the current node being processed is n R2 of D R , which has a hidden state vector, h R2 ."}, {"id": 78, "string": "Before further processing, normalized weights are calculated based on h R2 and H L ."}, {"id": 79, "string": "Formally, H pj = stack[h pj ] (19) con pj = concat[H pj , H q ] (20) a pj = sof tmax(tanh(con pj W c + b) * W a ) (21) where: \u2022 p, q \u2208 {L, R} and q = p \u2022 H q \u2208 R x x d represents a matrix obtained by concatenating hidden state vectors of nodes in tree D q ; x is len q of sentence q."}, {"id": 80, "string": "\u2022 H pj \u2208 R x x d represents a matrix obtained by stacking hidden state, h pj , vertically x times."}, {"id": 81, "string": "\u2022 con pj \u2208 R x x 2d represents the concatenated matrix."}, {"id": 82, "string": "\u2022 a pj \u2208 R x represents the normalized attention weights at node j of tree D p ; where D p is the dependency structure of sentence p. \u2022 W c \u2208 R 2d x d and W a \u2208 R d represent learned weight matrices."}, {"id": 83, "string": "The normalized attention weights in above equations provide an opportunity to align the subtree at the current node, n R2 , in D R to sub-trees available at all nodes in D L ."}, {"id": 84, "string": "Next, a gated mechanism is employed to compute the final vector representation at node n R2 ."}, {"id": 85, "string": "Formally, h pj = (x\u22121) 0 ((1 \u2212 a pj ) * H q + (a pj ) * H pj ) (22) where: \u2022 h pj \u2208 R d represents the final vector representation of node j in tree D p \u2022 (x\u22121) 0 represents column-wise sum Assuming the final vector representation of tree D R is h R , the exact same steps are followed for Phase2 with the exception that the entire process is now conditional on tree D R ."}, {"id": 86, "string": "As a result, the final vector representation of tree D L , h L , is computed."}, {"id": 87, "string": "Lastly, the following equations are applied to vectors h L and h R , before calculating the angle and distance similarity (see Section 4)."}, {"id": 88, "string": "h L = tanh(h L + h L ) (23) h R = tanh(h R + h R ) (24) where: \u2022 h L \u2208 R d represents the vector representation of tree D L without attention."}, {"id": 89, "string": "\u2022 h R \u2208 R d represents the vector representation of tree D R without attention."}, {"id": 90, "string": "PA on constituency structure Let C L and C R represent constituency trees of L and R, respectively; where C L and C R have total number of nodes N L (> len L ) and N R (> len R )."}, {"id": 91, "string": "Additionally, let's assume that trees C L and C R have the same configuration of nodes as in Section 3.1.2, and the encoding of terminal and nonterminal nodes follow the same process as in Section 3.1.2."}, {"id": 92, "string": "Assuming we have already encoded all N L nodes of tree C L using Tree-LSTM, we will have the hidden state matrix, H L , with dimension N L x d. Next, while encoding any node of C R , we consider H L which results in an attention vector having shape N L ."}, {"id": 93, "string": "Using Equations 19-22 4 , we retrieve the final hidden state of the current node."}, {"id": 94, "string": "Finally, we compute the representation of sentence R based on attention to sentence L. We perform Phase2 with the same process, except that we now condition on sentence R. In summary, the progressive attention mechanism refers to all nodes in the other tree while encoding a node in the current tree, instead of waiting till the end of the structural encoding to establish cross-sentence attention, as was done in the decomposable attention model."}, {"id": 95, "string": "Evaluation Tasks We evaluate our models on two tasks: (1) semantic relatedness scoring for sentence pairs (SemEval 2012, Task 6 and SemEval 2014, Task 1) and (2) paraphrase detection for question pairs (Quora, 2017)."}, {"id": 96, "string": "Semantic Relatedness for Sentence Pairs In SemEval 2012, Task 6 and SemEval 2014, Task 1, every sentence pair has a real-valued score that depicts the extent to which the two sentences are semantically related to each other."}, {"id": 97, "string": "Higher score implies higher semantic similarity between the two sentences."}, {"id": 98, "string": "Vector representations h L and h R are produced by using our Modified Decomp-Attn or Progressive-Attn models."}, {"id": 99, "string": "Next, a similarity score,\u0177 between h L and h R is computed using the same neural network (see below), for the sake of fair comparison between our models and the original Tree-LSTM (Tai et al., 2015) ."}, {"id": 100, "string": "h x = h L h R (25) h + = |h L \u2212 h R | (26) h s = \u03c3(h x W x + h + W + + b h ) (27) p \u03b8 = sof tmax(h s W p + b p ) (28)\u0177 = r Tp \u03b8 (29) where: \u2022 r T = [1, 2..S] \u2022 h x \u2208 R d measures the sign similarity between h L and h R \u2022 h + \u2208 R d measures the absolute distance between h L and h R Following (Tai et al., 2015) , we convert the regression problem into a soft classification."}, {"id": 101, "string": "We also use the same sparse distribution, p, which was defined in the original Tree-LSTM to transform the gold rating for a sentence pair, such that y = r T p and\u0177 = r Tp \u03b8 \u2248 y."}, {"id": 102, "string": "The loss function is the KLdivergence between p andp: J(\u03b8) = m k=1 KL(p k ||p k \u03b8 ) m + \u03bb||\u03b8|| 2 2 2 (30) \u2022 m is the number of sentence pairs in the dataset."}, {"id": 103, "string": "\u2022 \u03bb represents the regularization penalty."}, {"id": 104, "string": "Paraphrase Detection for Question Pairs In this task, each question pair is labeled as either paraphrase or not, hence the task is binary classification."}, {"id": 105, "string": "We use Eqs."}, {"id": 106, "string": "25 -28 to compute the predicted distributionp \u03b8 ."}, {"id": 107, "string": "The predicted label,\u0177, will be:\u0177 = arg max yp\u03b8 (31) The loss function is the negative log-likelihood: J(\u03b8) = \u2212 m k=1 y k log\u0177 k m + \u03bb||\u03b8|| 2 2 2 (32) 5 Experiments Semantic Relatedness for Sentence Pairs We utilized two different datasets: \u2022 The Sentences Involving Compositional Knowledge (SICK) dataset (Marelli et al."}, {"id": 108, "string": "(2014) ), which contains a total of 9,927 sentence pairs."}, {"id": 109, "string": "Specifically, the dataset has a split of 4500/500/4927 among training, dev, and test."}, {"id": 110, "string": "Each sentence pair has a score S \u2208 [1,5], which represents an average of 10 different human judgments collected by crowd-sourcing techniques."}, {"id": 111, "string": "\u2022 The MSRpar dataset (Agirre et al., 2012) , which consists of 1,500 sentence pairs."}, {"id": 112, "string": "In this dataset, each pair is annotated with a score S \u2208 [0,5] and has a split of 750/750 between training and test."}, {"id": 113, "string": "We used the Stanford Parsers (Chen and Manning, 2014; Bauer) to produce dependency and constituency parses of sentences."}, {"id": 114, "string": "Moreover, we initialized the word embeddings with 300dimensional Glove vectors (Pennington et al., 2014) ; the word embeddings were held fixed during training."}, {"id": 115, "string": "We experimented with different optimizers, among which AdaGrad performed the best."}, {"id": 116, "string": "We incorporated a learning rate of 0.025 and regularization penalty of 10 \u22124 without dropout."}, {"id": 117, "string": "Paraphrase Detection for Question Pairs For this task, we utilized the Quora dataset (Iyer; Kaggle, 2017) ."}, {"id": 118, "string": "Given a pair of questions, the objective is to identify whether they are semantic duplicates."}, {"id": 119, "string": "It is a binary classification problem where a duplicate question pair is labeled as 1 otherwise as 0."}, {"id": 120, "string": "The training set contains about 400,000 labeled question pairs, whereas the test set consists of 2.3 million unlabeled question pairs."}, {"id": 121, "string": "Moreover, the training dataset has only 37% positive samples; average length of a question is 10 words."}, {"id": 122, "string": "Due to hardware and time constraints, we extracted 50,000 pairs from the original training while maintaining the same positive/negative ratio."}, {"id": 123, "string": "A stratified 80/20 split was performed on this subset to produce the training/test set."}, {"id": 124, "string": "Finally, 5% of the training set was used as a validation set in our experiments."}, {"id": 125, "string": "We used an identical training configuration as for the semantic relatedness task since the essence of both the tasks is practically the same."}, {"id": 126, "string": "We also performed pre-processing to clean the data and then parsed the sentences using Stanford Parsers."}, {"id": 127, "string": "Table 1 summarizes our results."}, {"id": 128, "string": "According to (Marelli et al., 2014) , we compute three evaluation metrics: Pearson's r, Spearman's \u03c1 and Mean Squared Error (MSE)."}, {"id": 129, "string": "We compare our attention models against the original Tree-LSTM (Tai et al., 2015) , instantiated on both constituency trees and dependency trees."}, {"id": 130, "string": "We also compare earlier baselines with our models, and the best results are in bold."}, {"id": 131, "string": "Since Tree-LSTM is a generalization of Linear LSTM, we also implemented our attention models on Linear Bidirectional LSTM (Bi-LSTM)."}, {"id": 132, "string": "All results are average of 5 runs."}, {"id": 133, "string": "It is witnessed that the Progressive-Attn mechanism combined with Constituency Tree-LSTM is overall the strongest contender, but PA failed to yield any performance gain on Dependency Tree-LSTM in either dataset."}, {"id": 134, "string": "Table 2 summarizes our results where best results are highlighted in bold within each category."}, {"id": 135, "string": "It should be noted that Quora is a new dataset and we have done our analysis on only 50,000 samples."}, {"id": 136, "string": "Therefore, to the best of our knowledge, there is no published baseline result yet."}, {"id": 137, "string": "For this task, we considered four standard evaluation metrics: Accuracy, F1-score, Precision and Recall."}, {"id": 138, "string": "The Progressive-Attn + Constituency Tree-LSTM model still exhibits the best performance by a small margin, but the Progressive-Attn mechanism works surprisingly well on the linear bi-LSTM."}, {"id": 139, "string": "Table 3 illustrates how various models operate on two sentence pairs from SICK test dataset."}, {"id": 140, "string": "As we can infer from the table, the first pair demonstrates an instance of the active-passive voice phenomenon."}, {"id": 141, "string": "In this case, the linear LSTM and vanilla Tree-LSTMs really struggle to perform."}, {"id": 142, "string": "(2015) Second, the performance gap between the two attention models is quite striking, in the sense that the progressive model completely dominate its decomposable counterpart."}, {"id": 143, "string": "The difference between the two models is the pacing of attention, i.e., when to refer to nodes in the other tree while encoding a node in the current tree."}, {"id": 144, "string": "The progressive attention model garners it's empirical superiority by attending while encoding, instead of waiting till the end of the structural encoding to establish cross-sentence attention."}, {"id": 145, "string": "In retrospect, this may justify why the original decomposable attention model in (Parikh et al., 2016) achieved competitive results without any LSTM-type encoding."}, {"id": 146, "string": "Effectively, they implemented a naive version of our progressive attention model."}, {"id": 147, "string": "Third, do structures matter/help?"}, {"id": 148, "string": "The overall trend in our results is quite clear: the tree-based models exhibit convincing empirical strength; linguistically motivated structures are valuable."}, {"id": 149, "string": "Admittedly though, on the relatively large Quora dataset, we observe some diminishing returns of incorporating structural information."}, {"id": 150, "string": "It is not counter-intuitive that the sheer size of data can possibly allow structural patterns to emerge, hence lessen the need to explicitly model syntactic structures in neural architectures."}, {"id": 151, "string": "Results Semantic Relatedness for Sentence Pairs Paraphrase Detection for Question Pairs Effect of the Progressive Attention Model Last but not least, in trying to assess the impact of attention mechanisms (in particular the progressive attention model), we notice that the extra mileage gained on different structural encodings is different."}, {"id": 152, "string": "Specifically, performance lift on Linear Bi-LSTM > performance lift on Constituency Tree-LSTM, and PA struggles to see performance lift on dependency Tree-LSTM."}, {"id": 153, "string": "Interestingly enough, this observation is echoed by an earlier study (Gildea, 2004) , which showed that tree-based alignment models work better on con-stituency trees than on dependency trees."}, {"id": 154, "string": "In summary, our results and findings lead to several intriguing questions and conjectures, which call for investigation beyond the scope of our study: \u2022 Is it reasonable to conceptualize attention mechanisms as an implicit form of structure, which complements the representation power of explicit syntactic structures?"}, {"id": 155, "string": "\u2022 If yes, does there exist some trade-off between the modeling efforts invested into syntactic and attention structures respectively, which seemingly reveals itself in our empirical results?"}, {"id": 156, "string": "\u2022 The marginal impact of attention on dependency Tree-LSTMs suggests some form of saturation effect."}, {"id": 157, "string": "Does that indicate a closer affinity between dependency structures (relative to constituency structures) and compositional semantics (Liang et al., 2013) ?"}, {"id": 158, "string": "\u2022 If yes, why is dependency structure a better stepping stone for compositional semantics?"}, {"id": 159, "string": "Is it due to the strongly lexicalized nature of the grammar?"}, {"id": 160, "string": "Or is it because the dependency relations (grammatical functions) embody more semantic information?"}, {"id": 161, "string": "Conclusion In conclusion, we proposed a novel progressive attention model on syntactic structures, and demonstrated its superior performance in semantic relatedness tasks."}, {"id": 162, "string": "Our work also provides empirical ingredients for potentially profound questions and debates on syntactic structures in linguistics."}], "headers": [{"section": "Introduction", "n": "1", "start": 0, "end": 10}, {"section": "Background 2.1 Long Short-Term Memory Networks (LSTMs)", "n": "2", "start": 11, "end": 23}, {"section": "Linguistically Motivated Sentence Structures", "n": "2.2", "start": 24, "end": 26}, {"section": "Constituency structure", "n": "2.2.1", "start": 27, "end": 28}, {"section": "Dependency structure", "n": "2.2.2", "start": 29, "end": 31}, {"section": "Tree Long Short-Term Memory Network (Tree-LSTM)", "n": "2.3", "start": 32, "end": 44}, {"section": "Attention Mechanisms", "n": "2.4", "start": 45, "end": 47}, {"section": "Inter-Sentence Attention on Tree-LSTMs", "n": "3", "start": 48, "end": 49}, {"section": "Modified Decomposable Attention (MDA)", "n": "3.1", "start": 50, "end": 54}, {"section": "MDA on dependency structure", "n": "3.1.1", "start": 55, "end": 59}, {"section": "MDA on constituency structure", "n": "3.1.2", "start": 60, "end": 65}, {"section": "Progressive Attention (PA)", "n": "3.2", "start": 66, "end": 68}, {"section": "PA on dependency structure", "n": "3.2.1", "start": 69, "end": 89}, {"section": "PA on constituency structure", "n": "3.2.2", "start": 90, "end": 94}, {"section": "Evaluation Tasks", "n": "4", "start": 95, "end": 95}, {"section": "Semantic Relatedness for Sentence Pairs", "n": "4.1", "start": 96, "end": 103}, {"section": "Paraphrase Detection for Question Pairs", "n": "4.2", "start": 104, "end": 106}, {"section": "Semantic Relatedness for Sentence Pairs", "n": "5.1", "start": 107, "end": 116}, {"section": "Paraphrase Detection for Question Pairs", "n": "5.2", "start": 117, "end": 150}, {"section": "Effect of the Progressive Attention Model", "n": "6.3", "start": 151, "end": 158}, {"section": "Conclusion", "n": "8", "start": 159, "end": 162}], "figures": [{"filename": "../figure/image/979-Figure5-1.png", "caption": "Figure 5: Progressive Attn-Tree-LSTM model", "page": 5, "bbox": {"x1": 84.96, "x2": 511.2, "y1": 68.64, "y2": 336.96}}, {"filename": "../figure/image/979-Figure1-1.png", "caption": "Figure 1: A linear LSTM network. wt is the word embedding, ht is the hidden state vector, ct is the memory cell vector and yt is the final processed output at time step t.", "page": 1, "bbox": {"x1": 85.92, "x2": 262.56, "y1": 68.64, "y2": 181.92}}, {"filename": "../figure/image/979-Figure2-1.png", "caption": "Figure 2: a. Left: A constituency tree; b. Right: A dependency tree", "page": 1, "bbox": {"x1": 329.76, "x2": 496.32, "y1": 62.879999999999995, "y2": 150.23999999999998}}, {"filename": "../figure/image/979-Figure4-1.png", "caption": "Figure 4: Global attention model", "page": 2, "bbox": {"x1": 332.64, "x2": 498.24, "y1": 65.28, "y2": 179.04}}, {"filename": "../figure/image/979-Figure3-1.png", "caption": "Figure 3: A compositional view of parent node in Tree-LSTM network.", "page": 2, "bbox": {"x1": 100.8, "x2": 264.48, "y1": 71.52, "y2": 263.03999999999996}}, {"filename": "../figure/image/979-Table1-1.png", "caption": "Table 1: Results on test dataset for SICK and MSRpar semantic relatedness task. Mean scores are presented based on 5 runs (standard deviation in parenthesis). Categories of results: (1) Previous models (2) Dependency structure (3) Constituency structure (4) Linear structure", "page": 7, "bbox": {"x1": 108.0, "x2": 490.08, "y1": 114.72, "y2": 413.28}}, {"filename": "../figure/image/979-Table2-1.png", "caption": "Table 2: Results on test dataset for Quora paraphrase detection task. Mean scores are presented based on 5 runs (standard deviation in parenthesis). Categories of results: (1) Dependency structure (2) Constituency structure (3) Linear structure", "page": 7, "bbox": {"x1": 94.56, "x2": 502.08, "y1": 481.44, "y2": 597.12}}, {"filename": "../figure/image/979-Table3-1.png", "caption": "Table 3: Effect of the progressive attention model", "page": 8, "bbox": {"x1": 74.88, "x2": 522.24, "y1": 87.84, "y2": 160.32}}]}