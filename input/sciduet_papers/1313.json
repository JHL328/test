{"title": "Extending a Parser to Distant Domains Using a Few Dozen Partially Annotated Examples", "abstract": "We revisit domain adaptation for parsers in the neural era. First we show that recent advances in word representations greatly diminish the need for domain adaptation when the target domain is syntactically similar to the source domain. As evidence, we train a parser on the Wall Street Journal alone that achieves over 90% F 1 on the Brown corpus. For more syntactically distant domains, we provide a simple way to adapt a parser using only dozens of partial annotations. For instance, we increase the percentage of error-free geometry-domain parses in a held-out set from 45% to 73% using approximately five dozen training examples. In the process, we demonstrate a new state-of-the-art single model result on the Wall Street Journal test set of 94.3%. This is an absolute increase of 1.7% over the previous state-of-the-art of 92.6%.", "text": [{"id": 0, "string": "Introduction Statistical parsers are often criticized for their performance outside of the domain they were trained on."}, {"id": 1, "string": "The most straightforward remedy would be more training data in the target domain, but building treebanks (Marcus et al., 1993) is expensive."}, {"id": 2, "string": "In this paper, we revisit this issue in light of recent developments in neural natural language processing."}, {"id": 3, "string": "Our paper rests on two observations: 1."}, {"id": 4, "string": "It is trivial to train on partial annotations using a span-focused model."}, {"id": 5, "string": "Stern et al."}, {"id": 6, "string": "(2017a) demonstrated that a parser with minimal dependence between the decisions that produce a parse can achieve state-of-the-art performance."}, {"id": 7, "string": "We modify their parser, hence-  forth MSP, so that it trains directly on individual labeled spans instead of parse trees."}, {"id": 8, "string": "This results in a parser that can be trained, with no adjustments to the training regime, from partial sentence bracketings."}, {"id": 9, "string": "2."}, {"id": 10, "string": "The use of contextualized word representations (Peters et al., 2017; McCann et al., 2017) greatly reduces the amount of data needed to train linguistic models."}, {"id": 11, "string": "Contextualized word representations, which encode tokens conditioned on their context in a sentence, have been shown to give significant boosts across a variety of NLP tasks, and also to reduce the amount of data needed by an order of magnitude in some tasks."}, {"id": 12, "string": "Taken together, this suggests a way to rapidly extend a newswire-trained parser to new domains."}, {"id": 13, "string": "Specifically, we will show it is possible to achieve large out-of-domain performance improvements using only dozens of partially annotated sentences, like those shown in Figure 1 ."}, {"id": 14, "string": "The resulting parser also does not suffer any degradation on the newswire domain."}, {"id": 15, "string": "Along the way, we provide several other notable contributions: \u2022 We raise the state-of-the-art single-model F 1score for constituency parsing from 92.6% to 94.3% on the Wall Street Journal (WSJ) test set."}, {"id": 16, "string": "A trained model is publicly available."}, {"id": 17, "string": "1 \u2022 We show that, even without domain-specific training data, our parser has much less out-ofdomain degradation than previous parsers on \"newswire-adjacent\" domains like the Brown corpus."}, {"id": 18, "string": "\u2022 We provide a version of MSP which predicts its own POS tags (rather than requiring a third-party tagger)."}, {"id": 19, "string": "The Reconciled Span Parser (RSP) When we allow annotators to selectively annotate important phenomena, we make the process faster and simpler (Mielens et al., 2015) ."}, {"id": 20, "string": "Unfortunately, this produces a disconnect between the model (which typically asserts the probability of a full parse tree) and the annotation task (which asserts the correctness of some subcomponent, like a constituent span or a dependency arc)."}, {"id": 21, "string": "There is a body of research (Hwa, 1999; Li et al., 2016) that discusses how to bridge this gap by modifying the training data, training algorithm, or the training objective."}, {"id": 22, "string": "Alternatively, we could just better align the model with the annotation task."}, {"id": 23, "string": "Specifically, we could train a parser whose base model predicts exactly what we ask the annotator to annotate, e.g."}, {"id": 24, "string": "whether a particular span is a constituent."}, {"id": 25, "string": "This makes it trivial to train with partial or full annotations, because the training data reduces to a collection of span labels in either case."}, {"id": 26, "string": "Luckily, recent state-of-the-art results that model NLP tasks as independently classified spans (Stern et al., 2017a) suggest this strategy is currently viable."}, {"id": 27, "string": "In this section, we present the Reconciled Span Parser (RSP), a modified version of the Minimal Span Parser (MSP) of Stern et al."}, {"id": 28, "string": "(2017a) ."}, {"id": 29, "string": "RSP differs from MSP in the following ways: \u2022 It is trained on a span classification task."}, {"id": 30, "string": "MSP trains on a maximum margin objective; that is, the loss function penalizes the 1 http://allennlp.org/models violation of a margin between the scores of the gold parse and the next highest scoring parse decoded."}, {"id": 31, "string": "This couples its training procedure with its decoding procedure, resulting in two versions, a top-down parser and a chart parser."}, {"id": 32, "string": "To allow our model to be trained on partial annotations, we change the training task to be the span classification task described below."}, {"id": 33, "string": "\u2022 It uses contextualized word representations instead of predicted part-of-speech tags."}, {"id": 34, "string": "Our model uses contextualized word representations as described in Peters et al."}, {"id": 35, "string": "(2018) ."}, {"id": 36, "string": "It does not take part-of-speech-tags as input, eliminating the dependence of the parser on a newswire-trained POS-tagger."}, {"id": 37, "string": "Overview We will view a parse tree as a labeling of all the spans of a sentence such that: \u2022 Every constituent span is labeled with the sequence of non-terminals assigned to it in the parse tree."}, {"id": 38, "string": "For instance, span (2, 4) in Figure 2b is labeled with the sequence S, VP , as shown in Figure 2a ."}, {"id": 39, "string": "\u2022 Every non-constituent is labeled with the empty sequence."}, {"id": 40, "string": "Given a sentence represented by a sequence of tokens x of length n, define spans(x) = {(i, j) | 0 \u2264 i < j \u2264 n}."}, {"id": 41, "string": "Define a parse for sentence x as a function \u03c0 : spans(x) \u2192 L where L is the set of all sequences of non-terminal tags, including the empty sequence."}, {"id": 42, "string": "We model the probability of a parse as the independent product of its span labels: P r(\u03c0|x) = s\u2208spans(x) P r(\u03c0(s) | x, s) \u21d2 log P r(\u03c0|x) = s\u2208spans(x) log P r(\u03c0(s) | x, s) Hence, we will train a base model \u03c3(l | x, s) to estimate the log probability of label l for span s (given sentence x), and we will score the overall parse with: (Stern et al., 2017a) ."}, {"id": 43, "string": "Note that this probability model accords mass to mis-structured trees (e.g."}, {"id": 44, "string": "overlapping spans like (2, 5) and (3, 7) cannot both be constituents of a well-formed tree)."}, {"id": 45, "string": "We solve the following Integer Linear Program (ILP) 2 to find the highest scoring parse that admits a well-formed tree: max \u03b4 (i,j)\u2208spans(x) v + (i,j) \u03b4 (i,j) + v \u2212 (i,j) (1 \u2212 \u03b4 (i,j) ) subject to: i < k < j < m =\u21d2 \u03b4 (i,j) + \u03b4 (k,m) \u2264 1 (i, j) \u2208 spans(x) =\u21d2 \u03b4 (i,j) \u2208 {0, 1} where: v + (i,j) = max l s.t."}, {"id": 46, "string": "l =\u2205 \u03c3(l | x, (i, j)) v \u2212 (i,j) = \u03c3(\u2205 | x, (i, j)) 2 There are a number of ways to reconcile the span conflicts, including an adaptation of the standard dynamic programming chart parsing algorithm to work with spans of an unbinarized tree."}, {"id": 47, "string": "However it turns out that the classification model rarely produces span conflicts, so all methods we tried performed equivalently well."}, {"id": 48, "string": "Classification Model For our span classification model \u03c3(l | x, s), we use the model from (Stern et al., 2017a) , which leverages a method for encoding spans from (Wang and Chang, 2016; Cross and Huang, 2016) ."}, {"id": 49, "string": "First, it creates a sentence encoding by running a two-layer bidirectional LSTM over the sentence to obtain forward and backward encodings for each position i, denoted by f i and b i respectively."}, {"id": 50, "string": "Then, spans are encoded by the difference in LSTM states immediately before and after the span; that is, span (i, j) is encoded as the concatenation of the vector differences f j \u2212 f i\u22121 and b i \u2212 b j+1 ."}, {"id": 51, "string": "A one-layer feedforward network maps each span representation to a distribution over labels."}, {"id": 52, "string": "Classification Model Parameters and Initializations We preserve the settings used in Stern et al."}, {"id": 53, "string": "(2017a) where possible."}, {"id": 54, "string": "As a result, the size of the hidden dimensions of the LSTM and the feedforward network is 250."}, {"id": 55, "string": "The dropout ratio for the LSTM is set to 0.4 ."}, {"id": 56, "string": "Unlike the model it is based on, our model uses word embeddings of length 1124."}, {"id": 57, "string": "These result from concatenating a 100 dimension learned word embedding, with a 1024 di- Parser Rec Prec F 1 RNNG (Dyer et al., 2016) --91.7 MSP (Stern et al., 2017a) 4 The split we used is not standard for part-of-speech tagging."}, {"id": 58, "string": "As a result, we do not compare to part-of-speech taggers."}, {"id": 59, "string": "Beyond Newswire The Brown Corpus The Brown corpus (Marcus et al., 1993) is a standard benchmark used to assess WSJ-trained parsers outside of the newswire domain."}, {"id": 60, "string": "When (Kummerfeld et al., 2012) parsed the various Brown verticals with the (then state-of-the-art) Charniak parser (Charniak, 2000; Charniak and Johnson, 2005; McClosky et al., 2006a) , it achieved F 1 scores between 83% and 86%, even though its F 1 score on WSJTEST was 92.1%."}, {"id": 61, "string": "In Table 3 , we discover that RSP does not suffer nearly as much degradation, with an average F 1 -score of 90.3%."}, {"id": 62, "string": "To determine whether this increased portability is because of the parser architecture or the use of ELMo vectors, we also run MSP on the Brown verticals."}, {"id": 63, "string": "We used the Stanford tagger 5 (Toutanova et al., 2003) to tag WSJ-TRAIN and the Brown verticals so that MSP could be given these at train and test time."}, {"id": 64, "string": "We learned that most of the improvement can be attributed to the ELMo word representations."}, {"id": 65, "string": "In fact, even if we use MSP with gold POS tags, the average performance is 3.4% below RSP."}, {"id": 66, "string": "Question Bank and Genia Despite being a standard benchmark for parsing domain adaptation, the Brown corpus has considerable commonality with newswire text."}, {"id": 67, "string": "It is primarily composed of well-formed sentences with similar syntactic phenomena."}, {"id": 68, "string": "Perhaps the main challenge with the Brown corpus is a difference in vocabulary, rather than a difference in syntax, which may explain the success of RSP, which leverages contextualized embeddings learned from a large corpus."}, {"id": 69, "string": "If we try to run RSP on a more syntactically divergent corpus like QuestionBank 6 (Judge et al., 2006) , we find much more performance degradation."}, {"id": 70, "string": "This is unsurprising, since WSJTRAIN does not contain many examples of question syntax."}, {"id": 71, "string": "But how many examples do we need, to get good performance?"}, {"id": 72, "string": "(Stern et al., 2017a) ."}, {"id": 73, "string": "Charniak refers to the Charniak parser with reranking and self-training (Charniak, 2000; Charniak and Johnson, 2005; McClosky et al., 2006a) ."}, {"id": 74, "string": "MSP + Stanford POS tags refers to MSP trained and tested using part-of-speech tags predicted by the Stanford tagger (Toutanova et al., 2003) ."}, {"id": 75, "string": "Surprisingly, with only 50 annotated questions (see Table 4 ), performance on QBANKDEV jumps 5 points, from 89.9% to 94.9%."}, {"id": 76, "string": "This is only 1.5% below training with all of WSJTRAIN and QBANKTRAIN."}, {"id": 77, "string": "The resulting system improves slightly on WSJTEST getting 94.38%."}, {"id": 78, "string": "On the more difficult GENIA corpus of biomedical abstracts (Tateisi et al., 2005) , we see a similar, if somewhat less dramatic, trend."}, {"id": 79, "string": "See Table 5 ."}, {"id": 80, "string": "With 50 annotated sentences, performance on GE-NIADEV jumps from 79.5% to 86.2%, outperforming all but one parser from David McClosky's thesis (McClosky, 2010) -the one that trains on all 14k sentences from GENIATRAIN and self-trains using 270k sentences from PubMed."}, {"id": 81, "string": "That parser achieves 87.6%, which we outperform with just 500 sentences from GENIATRAIN."}, {"id": 82, "string": "These results suggest that it is currently feasible to extend a parser to a syntactically distant domain (for which no gold parses exist) with a couple hours of effort."}, {"id": 83, "string": "We explore this possibility in the next section."}, {"id": 84, "string": "Rapid Parser Extension To create a parser for their geometry question answering system, (Seo et al., 2015) did the following: \u2022 Designed regular expressions to identify mathematical expressions."}, {"id": 85, "string": "\u2022 Replaced the identified expressions with dummy words."}, {"id": 86, "string": "\u2022 Parsed the resulting sentences."}, {"id": 87, "string": "Figure 3 : The top-level split for the development sentence \"In the rhombus PQRS, PR = 24 and QS = 10.\""}, {"id": 88, "string": "before and after retraining RSP on 63 partially annotated geometry statements."}, {"id": 89, "string": "\u2022 Substituted the regex-analyzed expressions for the dummy words in the parses."}, {"id": 90, "string": "It is clear why this was necessary."}, {"id": 91, "string": "Figure 3 (top) shows how RSP (trained only on WSJTRAIN) parses the sentence \"In the rhombus PQRS, PR = 24 and QS = 10.\""}, {"id": 92, "string": "The result is completely wrong, and useless to a downstream application."}, {"id": 93, "string": "Still, beyond just the inconvenience of building additional infrastructure, there are downsides to the \"regex-and-replace\" strategy: 1."}, {"id": 94, "string": "It assumes that each expression always maps to the same constituent label."}, {"id": 95, "string": "Consider \"2x = 3y\"."}, {"id": 96, "string": "This is a verb phrase in the sentence \"In the above figure, x is prime and 2x = 3y.\""}, {"id": 97, "string": "However, it is a noun phrase in the sentence \"The equation 2x = 3y has 2 solutions.\""}, {"id": 98, "string": "If we replace both instances with the same dummy word, the parser will almost certainly become confused in one of the two instances."}, {"id": 99, "string": "2."}, {"id": 100, "string": "It assumes that each expression is always a constituent."}, {"id": 101, "string": "Suppose that we replace the expression \"AB < 30\" with a dummy word."}, {"id": 102, "string": "This means we cannot properly parse a sentence like \"When angle AB < 30, the lines are parallel,\" because the constituent \"angle AB\" no longer exists in the resulting sentence."}, {"id": 103, "string": "3."}, {"id": 104, "string": "It does not handle other syntactic variation."}, {"id": 105, "string": "As we will see in the next section, the geometry domain has a propensity for using right-attaching participial adjective phrases, like \"labeled x\" in the phrase \"the segment labeled x.\""}, {"id": 106, "string": "Encouraging a parser to recognize this syntactic construct is out-of-scope for the \"regex-and-replace\" strategy."}, {"id": 107, "string": "Instead, we propose directly extending the parser by providing a few domain-specific examples like those in Figure 1 ."}, {"id": 108, "string": "Because RSP's model directly predicts span constituency, we can simply mark up a sentence with the \"tricky\" domain-specific constituents that the model will not already have learned from WSJTRAIN."}, {"id": 109, "string": "For instance, we mark up NOUN-LABEL constructs like \"chord BD\", and equations like \"AD = 4\"."}, {"id": 110, "string": "From these marked-up sentences, we can extract training instances declaring the constituency of certain spans (like \"to chord BD\" in the third example) and the implied non-constituency of certain spans (like \"perpendicular to chord\" in the third example)."}, {"id": 111, "string": "We also allow annotators to explicitly declare the non-constituency of a span via an alternative markup (not shown)."}, {"id": 112, "string": "We do not require annotators to provide span labels (although they can if desired)."}, {"id": 113, "string": "If a training instance merely declares a span to be a constituent (but does not provide a particular label), then the loss function only records loss when that span is classified as a non-constituent (i.e."}, {"id": 114, "string": "any label is ok)."}, {"id": 115, "string": "Experiments Geometry Questions We took the publicly available training data from (Seo et al., 2015) , split the data into sentences, and then annotated each sentence as in Figure 1 ."}, {"id": 116, "string": "Next, we randomly split these sentences into GEO-TRAIN and GEODEV 7 ."}, {"id": 117, "string": "After removing duplicate sentences spanning both sets, we ended up with 63 annotated sentences in GEOTRAIN and 62 in GEODEV."}, {"id": 118, "string": "In GEOTRAIN, we made an average of 2.8 constituent declarations and 0.3 (explicit) nonconstituent declarations per sentence."}, {"id": 119, "string": "After preparing the data, we started with RSP trained on WSJTRAIN, and fine-tuned it on minibatches containing 50 randomly selected WSJ-TRAIN sentences, plus all of GEOTRAIN."}, {"id": 120, "string": "The results are in table 6."}, {"id": 121, "string": "After fine-tuning, the model    gets 87% of the 185 annotations on GEODEV correct, compared with 71.9% before fine-tuning 8 ."}, {"id": 122, "string": "Moreover, the fraction of sentences with no errors increases from 45.2% to 72.6%."}, {"id": 123, "string": "With only a few dozen partially-annotated training examples, not only do we see a large increase in domain performance, but there is also no degradation in the parser's performance on newswire."}, {"id": 124, "string": "Some GEODEV parses have enormous qualitative differences, like the example shown in Figure 3 ."}, {"id": 125, "string": "For the GEODEV sentences on which we get errors after retraining, the errors fall predominantly into three categories."}, {"id": 126, "string": "First, approximately 44% have some mishandled math syntax, like failing to recognize \"dimensions 16 by 8\" as a constituent, or providing a flat structuring of the equation \"BAC = 1/4 * ACB\" (instead of recognizing \"1/4 * ACB\" as a subconstituent)."}, {"id": 127, "string": "Second, approximately 19% have PP-attachment errors."}, {"id": 128, "string": "Third, another 19% fail to correctly analyze right-attaching participial adjectives like \"labeled x\" in the noun phrase \"the segment labeled x\" or \"indicated\" in the noun phrase \"the center indicated.\""}, {"id": 129, "string": "This phenomenon is unusually frequent in geometry but was insufficiently marked-up in our training examples."}, {"id": 130, "string": "For instance, while we have a training instance \"Find [ the measure of [ the angle designated by x ] ],\" it does not explicitly highlight the constituency of \"designated by x\"."}, {"id": 131, "string": "This suggests that in practice, this domain adaptation method could benefit from an iterative cycle in which a user assesses the parser's errors on their target domain, creates some partial annotations that address these issues, retrains the parser, and then repeats the process until satisfied."}, {"id": 132, "string": "As a proof-of-concept, we invented 3 additional sentences with right-attaching participial adjectives (shown in Figure 4 ), added them to GEOTRAIN, and then retrained."}, {"id": 133, "string": "Indeed, the handling of participial adjectives in GEODEV improved, increasing the overall percentage of correctly identified constituents to 88.6% and the percentage of errorfree sentences to 75.8%."}, {"id": 134, "string": "Biomedicine and Chemistry We ran a similar experiment using biomedical and chemistry text, taken from the unannotated data provided by (Nivre et al., 2007) ."}, {"id": 135, "string": "We partially annotated 134 sentences and randomly split them into BIOCHEMTRAIN (72 sentences) and BIOCHEMDEV (62 sentences) 9 ."}, {"id": 136, "string": "In BIOCHEM-TRAIN, we made an average of 4.2 constituent declarations per sentence."}, {"id": 137, "string": "We made no nonconstituent declarations."}, {"id": 138, "string": "Again, we started with RSP trained on WSJ-TRAIN, and fine-tuned it on minibatches containing annotations from 50 randomly selected WSJ-TRAIN sentences, plus all of BIOCHEMTRAIN."}, {"id": 139, "string": "Table 7 shows the improvement in the percentage of correctly-identified annotated constituents and the percentage of test sentences for which the parse agrees with every annotation."}, {"id": 140, "string": "As with the geometry domain, we get significant improvements using only dozens of partially annotated training sentences."}, {"id": 141, "string": "Related Work The two major themes of this paper, domain adaptation and learning from partial annotation, each have a long tradition in natural language processing."}, {"id": 142, "string": "Domain Adaptation Domain adaptation has been recognized as a major NLP problem for over a decade (Ben-David et al., 2006; Daum\u00e9, 2007; Finkel and Manning, 2009 )."}, {"id": 143, "string": "In particular, domain adaptation for parsers (Plank, 2011; Ma and Xia, 2013) has received considerable attention."}, {"id": 144, "string": "Much of this work (McClosky et al., 2006b; Reichart and Rappoport, 2007; Sagae and Tsujii, 2007; Kawahara and Uchimoto, 2008; Sagae, 2010; Baucom et al., 2013; Yu et al., 2015) has focused on how to best use co-training (Blum and Mitchell, 1998) or self-training to augment a small domain corpus, or how to best combine models to perform well on a particular domain."}, {"id": 145, "string": "In this work, we focus on the direct impact that just a few dozen partially annotated out-of-domain examples can have, when using a particular neural model with contextualized word representations."}, {"id": 146, "string": "Co-training, self-training, and model combination are orthogonal to our approach."}, {"id": 147, "string": "Our work is a spiritual successor to (Garrette and Baldridge, 2013) , which shows how to train a part-of-speech tagger with a minimal amount of annotation effort."}, {"id": 148, "string": "Learning from Partial Annotation Most literature on training parsers from partial annotations (Sassano and Kurohashi, 2010; Spreyer et al., 2010; Flannery et al., 2011; Flannery and Mori, 2015; Mielens et al., 2015) focuses on dependency parsing."}, {"id": 149, "string": "(Li et al., 2016) provides a good overview."}, {"id": 150, "string": "Here we highlight three important highlevel strategies."}, {"id": 151, "string": "The first is \"complete-then-train\" (Mirroshandel and Nasr, 2011; Majidi and Crane, 2013) , which \"completes\" every partially annotated de-pendency parse by finding the most likely parse (according to an already trained parser model) that respects the constraints of the partial annotations."}, {"id": 152, "string": "These \"completed\" parses are then used to train a new parser."}, {"id": 153, "string": "The second strategy (Nivre et al., 2014; Li et al., 2016) is similar to \"complete-then-train,\" but integrates parse completion into the training process."}, {"id": 154, "string": "At each iteration, new \"complete\" parses are created using the parser model from the most recent training iteration."}, {"id": 155, "string": "The third strategy (Li et al., 2014 (Li et al., , 2016 transforms each partial annotation into a forest of parses that encodes all fully-specified parses permitted by the partial annotation."}, {"id": 156, "string": "Then, the training objective is modified to support optimization over these forests."}, {"id": 157, "string": "Our work differs from these in two respects."}, {"id": 158, "string": "First, since we are training a constituency parser, our partial annotations are constituent bracketings rather than dependency arcs."}, {"id": 159, "string": "Second, and more importantly, we can use the partial annotations for training without modifying either the training algorithm or the training data."}, {"id": 160, "string": "While the bulk of the literature on training from partial annotations focuses on dependency parsing, the earliest papers (Pereira and Schabes, 1992; Hwa, 1999) focus on constituency parsing."}, {"id": 161, "string": "These leverage an adapted version of the inside-outside algorithm for estimating the parameters of a probabilistic context-free grammar (PCFG)."}, {"id": 162, "string": "Our work is not tied to PCFG parsing, nor does it require a specialized training algorithm when going from full annotations to partial annotations."}, {"id": 163, "string": "Conclusion Recent developments in neural natural language processing have made it very easy to build custom parsers."}, {"id": 164, "string": "Not only do contextualized word representations help parsers learn the syntax of new domains with very few examples, but they also work extremely well with parsing models that correspond directly with a granular and intuitive annotation task (like identifying whether a span is a constituent)."}, {"id": 165, "string": "This allows you to train with either full or partial annotations without any change to the training process."}, {"id": 166, "string": "This work provides a convenient path forward for the researcher who requires a parser for their domain, but laments that \"parsers don't work outside of newswire.\""}, {"id": 167, "string": "With a couple hours of effort (and a layman's understanding of syntactic building blocks), they can get significant performance improvements."}, {"id": 168, "string": "We envision an iterative use case in which a user assesses a parser's errors on their target domain, creates some partial annotations to teach the parser how to fix these errors, then retrains the parser, repeating the process until they are satisfied."}], "headers": [{"section": "Introduction", "n": "1", "start": 0, "end": 18}, {"section": "The Reconciled Span Parser (RSP)", "n": "2", "start": 19, "end": 36}, {"section": "Overview", "n": "2.1", "start": 37, "end": 47}, {"section": "Classification Model", "n": "2.2", "start": 48, "end": 58}, {"section": "Beyond Newswire", "n": "3.2", "start": 59, "end": 83}, {"section": "Rapid Parser Extension", "n": "4", "start": 84, "end": 114}, {"section": "Geometry Questions", "n": "5.1", "start": 115, "end": 133}, {"section": "Biomedicine and Chemistry", "n": "5.2", "start": 134, "end": 140}, {"section": "Related Work", "n": "6", "start": 141, "end": 141}, {"section": "Domain Adaptation", "n": "6.1", "start": 142, "end": 147}, {"section": "Learning from Partial Annotation", "n": "6.2", "start": 148, "end": 162}, {"section": "Conclusion", "n": "7", "start": 163, "end": 168}], "figures": [{"filename": "../figure/image/1313-Figure1-1.png", "caption": "Figure 1: An example of partial annotations. Annotators indicate that a span is a constituent by enclosing it in square brackets.", "page": 0, "bbox": {"x1": 306.71999999999997, "x2": 526.0799999999999, "y1": 221.76, "y2": 363.36}}, {"filename": "../figure/image/1313-Figure3-1.png", "caption": "Figure 3: The top-level split for the development sentence \u201cIn the rhombus PQRS, PR = 24 and QS = 10.\u201d before and after retraining RSP on 63 partially annotated geometry statements.", "page": 5, "bbox": {"x1": 83.03999999999999, "x2": 290.4, "y1": 321.59999999999997, "y2": 345.12}}, {"filename": "../figure/image/1313-Table6-1.png", "caption": "Table 6: RSP performance on GEODEV.", "page": 6, "bbox": {"x1": 120.0, "x2": 478.08, "y1": 62.879999999999995, "y2": 124.32}}, {"filename": "../figure/image/1313-Table7-1.png", "caption": "Table 7: RSP performance on BIOCHEMDEV.", "page": 6, "bbox": {"x1": 106.56, "x2": 491.03999999999996, "y1": 158.88, "y2": 220.32}}, {"filename": "../figure/image/1313-Figure4-1.png", "caption": "Figure 4: Three partial annotations targeting right-attaching participial adjectives.", "page": 6, "bbox": {"x1": 72.0, "x2": 291.36, "y1": 262.56, "y2": 375.36}}, {"filename": "../figure/image/1313-Figure2-1.png", "caption": "Figure 2: The correspondence between labeled spans and a parse tree. This diagram is adapted from figure 1 in (Stern et al., 2017a).", "page": 2, "bbox": {"x1": 72.48, "x2": 486.71999999999997, "y1": 66.24, "y2": 329.76}}, {"filename": "../figure/image/1313-Table1-1.png", "caption": "Table 1: Parsing performance on WSJTEST, along with the results of other recent single-model parsers trained without external parse data.", "page": 3, "bbox": {"x1": 72.0, "x2": 293.28, "y1": 63.839999999999996, "y2": 133.92}}, {"filename": "../figure/image/1313-Table2-1.png", "caption": "Table 2: Feature ablation on WSJDEV.", "page": 3, "bbox": {"x1": 84.0, "x2": 278.4, "y1": 202.56, "y2": 246.23999999999998}}, {"filename": "../figure/image/1313-Table4-1.png", "caption": "Table 4: Performance of RSP on QBANKDEV.", "page": 4, "bbox": {"x1": 84.96, "x2": 278.4, "y1": 327.84, "y2": 441.12}}, {"filename": "../figure/image/1313-Table3-1.png", "caption": "Table 3: Parsing performance on Brown verticals. MSP refers to the Minimal Span Parser (Stern et al., 2017a). Charniak refers to the Charniak parser with reranking and self-training (Charniak, 2000; Charniak and Johnson, 2005; McClosky et al., 2006a). MSP + Stanford POS tags refers to MSP trained and tested using part-of-speech tags predicted by the Stanford tagger (Toutanova et al., 2003).", "page": 4, "bbox": {"x1": 88.8, "x2": 509.28, "y1": 69.6, "y2": 245.28}}, {"filename": "../figure/image/1313-Table5-1.png", "caption": "Table 5: Performance of RSP on GENIADEV.", "page": 4, "bbox": {"x1": 86.88, "x2": 275.03999999999996, "y1": 481.44, "y2": 594.24}}]}