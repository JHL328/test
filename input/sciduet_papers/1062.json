{"title": "Neural Hidden Markov Model for Machine Translation", "abstract": "This work aims to investigate alternative neural machine translation (NMT) approaches and thus proposes a neural hidden Markov model (HMM) consisting of neural network-based alignment and lexicon models. The neural models make use of encoder and decoder components, but drop the attention component. The training is end-to-end and the standalone decoder is able to provide comparable performance with the state-of-the-art attention-based models on three different translation tasks.", "text": [{"id": 0, "string": "Introduction Attention-based neural translation models (Bahdanau et al., 2015; Luong et al., 2015) attend to specific positions on the source side to generate translation."}, {"id": 1, "string": "Using the attention component provides significant improvements over the pure encoder-decoder sequence-to-sequence approach (Sutskever et al., 2014) that uses no such attention mechanism."}, {"id": 2, "string": "In this work, we aim to compare the performance of attention-based models to another baseline, namely, neural hidden Markov models."}, {"id": 3, "string": "The neural HMM has been successfully applied in the literature on top of conventional phrasebased systems (Wang et al., 2017) ."}, {"id": 4, "string": "In this work, our purpose is to explore its application in standalone decoding, i.e."}, {"id": 5, "string": "the model is used to generate and score candidates without assistance from a phrase-based system."}, {"id": 6, "string": "Because translation is done standalone using only neural models, we still refer to this as NMT."}, {"id": 7, "string": "In addition, while Wang et al."}, {"id": 8, "string": "(2017) applied feedforward networks to model alignment and translation, the recurrent structures proposed in this work surpass the feedforward variants by up to 1.3% in BLEU."}, {"id": 9, "string": "By comparing neural HMM and attention-based NMT, we shed light on the role of the attention component."}, {"id": 10, "string": "To this end, we use an alignmentbased model that has a recurrent bidirectional encoder and a recurrent decoder, but use no attention component."}, {"id": 11, "string": "We replace the attention mechanism by a first-order HMM alignment model."}, {"id": 12, "string": "Attention levels are deterministic normalized similarity scores part of the architecture design of an otherwise fully supervised classifier."}, {"id": 13, "string": "HMM-style alignments on the other hand are discrete random variables and (unlike attention levels) must be marginalized."}, {"id": 14, "string": "Once alignments are marginalized, which is tractable for a first-order HMM, parameters can be estimated to attain a local optimum of log-likelihood of observations as usual."}, {"id": 15, "string": "Motivation In attention-based approaches, the alignment distribution is used to select the positions in the source sentence that the decoder attends to during translation."}, {"id": 16, "string": "Thus the alignment model can be considered as an implicit part of the translation model."}, {"id": 17, "string": "On the other hand, separating the alignment model from the lexicon model has its own advantages: First of all, this leads to more flexibility in modeling and training: The models can not only be trained separately, but they can also have different model types, such as neural models, count-based models, etc."}, {"id": 18, "string": "Second, the separation avoids propagating errors from one model to another."}, {"id": 19, "string": "In attention-based systems, the translation score is based on the alignment distribution, in which errors can be propagated from the alignment part to the translation part."}, {"id": 20, "string": "Third, probabilistic treatment to alignments in NMT typically implies an extended degree of interpretability (e.g."}, {"id": 21, "string": "one can inspect posteriors) and control over the model (e.g."}, {"id": 22, "string": "one can impose priors over alignments and lexical distributions)."}, {"id": 23, "string": "Neural Hidden Markov Model Given a source sentence f J 1 = f 1 ...f j ...f J and a target sentence e I 1 = e 1 ...e i ...e I , where j = b i is the source position aligned to the target position i, we model translation using an alignment model and a lexicon model: p(e I 1 |f J 1 ) = b I 1 p(e I 1 , b I 1 |f J 1 ) (1) := b I 1 I i=1 p(e i |b i 1 , e i\u22121 0 , f J 1 ) lexicon model \u00b7 p(b i |b i\u22121 1 , e i\u22121 0 , f J 1 ) alignment model (2) Instead of predicting the absolute source position b i , we use an alignment model Wang et al."}, {"id": 24, "string": "(2017) applied feedforward neural networks for modeling the lexicon and alignment probabilities."}, {"id": 25, "string": "In this work, we would like to model these distributions using recurrent neural networks (RNN)."}, {"id": 26, "string": "RNNs have been shown to outperform feedforward variants in language and translation modeling."}, {"id": 27, "string": "This is mainly due to that RNN can handle arbitrary input lengths and thus include unbounded context information."}, {"id": 28, "string": "Unfortunately, the recurrent hidden layer cannot be easily applied for the neural hidden Markov model, since it will significantly complicate the computation of forward-backward messages when running Baum-Welch."}, {"id": 29, "string": "Nevertheless, we can apply long short-term memory (LSTM) (Hochreiter and Schmidhuber, 1997) structure for source and target words embedding."}, {"id": 30, "string": "With this technique we can take the essence of LSTM RNN and do not break any sequential generative model assumptions."}, {"id": 31, "string": "p(\u2206 i |b i\u22121 1 , e i\u22121 0 , f J 1 ) that predicts the jump \u2206 i = b i \u2212 b i\u22121 ."}, {"id": 32, "string": "Our models are close in structure to the model proposed in Luong et al."}, {"id": 33, "string": "(2015) , where we have a component that encodes the source sentence, and another that encodes the target sentence."}, {"id": 34, "string": "As shown in Figure 1 , we use a source side bidi- rectional LSTM embedding h j = \u2212 \u2192 h j + \u2190 \u2212 h j , where \u2212 \u2192 h j = LSTM(W, f j , \u2212 \u2192 h j\u22121 ) and \u2190 \u2212 h j = LSTM(V, f j , \u2190 \u2212 h j+1 ), as well as a target side LSTM embedding s i\u22121 = LSTM(U, e i\u22121 , s i\u22122 )."}, {"id": 35, "string": "h j , \u2212 \u2192 h j , \u2190 \u2212 h j and s i\u22121 , s i\u22122 are vectors, W , V and U are weight matrices."}, {"id": 36, "string": "Before the non-linear hidden layers, there is a projection layer which f1 \u00b7 \u00b7 \u00b7 fj\u22121 fj fj+1 concatenates h j , s i\u22121 and e i\u22121 ."}, {"id": 37, "string": "Then the neural network-based lexicon model is given by \u00b7 \u00b7 \u00b7 fJ e1 \u00b7 \u00b7 \u00b7 ei\u22122 ei\u22121 \u2212 \u2192 s i\u22121 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u2212 \u2192 h j \u2190 \u2212 h j p(ei|hj, si\u22121, ei\u22121) p(e i |b i 1 , e i\u22121 0 , f J 1 ) := p(e i |h j , s i\u22121 , e i\u22121 ) (3) and the neural network-based alignment model p(b i |b i\u22121 1 , e i\u22121 0 , f J 1 ) := p(\u2206 i |h j , s i\u22121 , e i\u22121 ) (4) where j = b i\u22121 ."}, {"id": 38, "string": "The training criterion is the logarithm of sentence posterior probabilities over training sentence pairs (F r , E r ), r = 1, ..., R: arg max \u03b8 r log p \u03b8 (E r |F r ) (5) The derivative for a single sentence pair (F, E) = (f J 1 , e I 1 ) is: \u2202 \u2202\u03b8 log p \u03b8 (E|F ) = j ,j i p i (j , j|f J 1 , e I 1 ; \u03b8) \u00b7 \u2202 \u2202\u03b8 log p(j, e i |j , e i\u22121 0 , f J 1 ; \u03b8) (6) with HMM posterior weights p i (j , j|f J 1 , e I 1 ; \u03b8), which can be computed using the forwardbackward algorithm."}, {"id": 39, "string": "The entire training procedure can be summarized as backpropagation in an EM framework: 1. compute: \u2022 the posterior HMM weights \u2022 the local gradients (backpropagation) 2. update neural network weights Decoding In the decoding stage we still calculate the sum over alignments and apply a target-synchronous beam search for the target string."}, {"id": 40, "string": "The auxiliary quantity for each unknown partial string e i 0 is specified as Q(i, j; e i 0 )."}, {"id": 41, "string": "During search, the partial hypothesis is extended from e i\u22121 0 to e i 0 : Q(i, j; e i 0 ) = j p(j, e i |j , e i\u22121 0 , f J 1 ) \u00b7 Q(i \u2212 1, j ; e i\u22121 0 ) (7) The decoder is shown in Algorithm 1."}, {"id": 42, "string": "In the innermost loop (line 11-13), alignments are hypothesized and used to calculate the auxiliary quantity Q(i, j; e i 0 )."}, {"id": 43, "string": "Then for each source position j, the lexical distribution over the full target vocabulary is computed (line 14)."}, {"id": 44, "string": "The distributions are accumulated (Q(i; e i 0 ) = j Q(i, j; e i 0 ), line 16), then sorted (line 18) and the best candidate translations (arg max e i Q(i; e i 0 )) lying within the beam are used to expand the partial hypotheses (line 19-23)."}, {"id": 45, "string": "cache is a two-dimensional list of size J \u00d7 |V src | (source vocabulary size), which is used to cache the current quantities."}, {"id": 46, "string": "Whenever a partial hypothesis in the beam ends with the sentence end symbol (<EOF>), the counter will be increased by 1 (line 26-28)."}, {"id": 47, "string": "The translation is terminated if the counter reaches the beam size or hypothesis sentence length reaches three times the source sentence length (line 6)."}, {"id": 48, "string": "If a hypothesis stops but its score is worse than other hypotheses, it is eliminated from the beam, but it still contests non-terminated hypotheses."}, {"id": 49, "string": "During comparison the scores are normalized by hypothesis sentence length."}, {"id": 50, "string": "Note that we have no explicit coverage constraints."}, {"id": 51, "string": "This means that a source position can be revisited many times, whereby creating one-to-many alignment cases."}, {"id": 52, "string": "This also allows unaligned source words."}, {"id": 53, "string": "In the neural HMM decoder, word alignments are estimated and scored according to the distribution calculated by the neural network alignment model, leading alignment decisions to become part of the beam search."}, {"id": 54, "string": "The search space consists of both alignment and translation decisions."}, {"id": 55, "string": "In contrast, the search space in attentionbased decoding consists only of translation decisions."}, {"id": 56, "string": "The decoding complexity is O(J 2 \u00b7 I) (J = source sentence length, I = target sentence length) return GETBEST(hyps) 33: end function compared to O(J \u00b7 I) for attention-based models."}, {"id": 57, "string": "These are theoretical complexities of decoding on a CPU only considering source and target sentence lengths."}, {"id": 58, "string": "In practice, the size of the neural network must also be taken into account, and there are some optimized matrix multiplications for decoding on a GPU."}, {"id": 59, "string": "In general, the decoding speed of our model is about 3 times slower than that of a standard attention model (1.07 sentences per second vs. 3.00 sentences per second) on a single GPU."}, {"id": 60, "string": "This is still an initial decoder and we did not spend much time on accelerating its decoding yet."}, {"id": 61, "string": "The optimization of our decoder would be a promising future work."}, {"id": 62, "string": "Experiments The experiments are conducted on the WMT 2017 German\u2194English and Chinese\u2192English translation tasks, which consist of 5M and 23M parallel sentence pairs respectively."}, {"id": 63, "string": "Translation quality is measured with the case sensitive BLEU (Papineni et al., 2002) and TER (Snover et al., 2006) metric on newstests 2017, which contain 3004 (German\u2194English) and 2001 (Chinese\u2192English) sentence pairs."}, {"id": 64, "string": "For German and English preprocessing, we use the Moses tokenizer with hyphen splitting, and perform truecasing with Moses scripts (Koehn et al., 2007) ."}, {"id": 65, "string": "For German\u2194English subword segmentation , we use 20K joint BPE operations."}, {"id": 66, "string": "For the Chinese data, we segment it using the Jieba 1 segmenter."}, {"id": 67, "string": "We then learn a BPE model on the segmented Chinese, also using 20K merge operations."}, {"id": 68, "string": "During training, sentences with a length greater than 50 subwords are filtered out."}, {"id": 69, "string": "Attention-Based System The attention-based systems are trained with Sockeye (Hieber et al., 2017) , which implement an attentional encoder-decoder with small modifications to the model in Bahdanau et al."}, {"id": 70, "string": "(2015) ."}, {"id": 71, "string": "The encoder and decoder word embeddings are of size 620."}, {"id": 72, "string": "The encoder consists of a bidirectional layer with 1000 LSTMs with peephole connections to encode the source side."}, {"id": 73, "string": "We use Adam (Kingma and Ba, 2015) as optimizer with a learning rate of 0.001, and a batch size of 50."}, {"id": 74, "string": "The network is trained with 30% dropout for up to 500K iterations and evaluated every 10K iterations on the development set with BLEU."}, {"id": 75, "string": "Decoding is done using beam search with a beam size of 12."}, {"id": 76, "string": "In the end the four best models are averaged as described in 1 https://github.com/fxsjy/jieba the beginning of Junczys-Dowmunt et al."}, {"id": 77, "string": "(2016) ."}, {"id": 78, "string": "Neural Hidden Markov Model The entire neural hidden Markov model is implemented in TensorFlow (Abadi et al., 2016) ."}, {"id": 79, "string": "The feedforward models have three hidden layers of sizes 1000, 1000 and 500 respectively, with a 5word source window and a 3-gram target history."}, {"id": 80, "string": "200 nodes are used for word embeddings."}, {"id": 81, "string": "The output layer of the neural lexicon model consists of around 25K nodes for all subword units, while the neural alignment model has a small output layer with 201 nodes, which reflects that the aligned position can jump within the scope from \u2212100 to 100."}, {"id": 82, "string": "Apart from the basic projection layer, we also applied LSTM layers for the source and target words embedding."}, {"id": 83, "string": "The embedding layers have 350 nodes and the size of the projection layer is 800 (400 + 200 + 200, Figure 1 )."}, {"id": 84, "string": "We use Adam as optimizer with a learning rate of 0.001."}, {"id": 85, "string": "Neural lexicon and alignment models are trained with 30% dropout and the norm of the gradient is clipped with a threshold 1 (Pascanu et al., 2014) ."}, {"id": 86, "string": "In decoding we use a beam size of 12 and the element-wise average of all weights of the four best models also results in better performance."}, {"id": 87, "string": "Results We compare the neural HMM approach (Subsection 5.2) with the state-of-the-art attention-based approach (Subsection 5.1) on different translation tasks."}, {"id": 88, "string": "The results are presented in Table 1 ."}, {"id": 89, "string": "Compare to the model presented in Wang et al."}, {"id": 90, "string": "(2017) , switching to LSTM models has a clear advantage, which improves the FFNN-based system by up to 1.3% BLEU and 1.8% TER."}, {"id": 91, "string": "It seems that the HMM model benefits from richer features, such as LSTM states, which are very similar to what an attention mechanism would require."}, {"id": 92, "string": "We actually WMT Attention-based NMT e r w o l l t e n i e a n i r g e n d e i n e r A r t v o n A u s e i n a n d e r s e t z u n g t e i l n e h m expected it to do with less, the reason being that alignment distributions get refined a posteriori and so they do not have to be as strong a priori."}, {"id": 93, "string": "We can also observe that the performance of our approach is comparable with the state-of-the-art attentionbased system with 25M more parameters on all three tasks."}, {"id": 94, "string": "Alignment Analysis We show an example from the German\u2192English newstest 2017 in Figure 2 , along with the attention and alignment matrices."}, {"id": 95, "string": "We can observe that the neural network-based HMM could generate a more clear alignment path compared to the attention weights."}, {"id": 96, "string": "In this example, it can exactly estimate the alignment positions for words wanted and of."}, {"id": 97, "string": "Discussion We described a novel formulation for a neural network-based machine translation system, which applied neural networks to the conventional hidden Markov model."}, {"id": 98, "string": "The training is end-to-end, the model is monolithic and can be used as a standalone decoder."}, {"id": 99, "string": "This results in a more modern and efficient way to use HMM in machine translation and enables neural networks to benefit from HMMs."}, {"id": 100, "string": "Experiments show that replacing attention with alignment does not improve the translation performance of NMT significantly."}, {"id": 101, "string": "One possible reason is that alignment may fail to capture relevant contexts as attention does."}, {"id": 102, "string": "While alignment aims to identify translation equivalents between two lan-guages, attention is designed to find relevant context for predicting the next target word."}, {"id": 103, "string": "Source words with high attention weights are not necessarily translation equivalents of the target word."}, {"id": 104, "string": "Although using alignment does not lead to significant improvements in terms of BLEU over attention, we think alignment-based NMT models are still useful for automatic post editing and developing coverage-based models."}, {"id": 105, "string": "These might be interesting future directions to explore."}], "headers": [{"section": "Introduction", "n": "1", "start": 0, "end": 14}, {"section": "Motivation", "n": "2", "start": 15, "end": 22}, {"section": "Neural Hidden Markov Model", "n": "3", "start": 23, "end": 38}, {"section": "Decoding", "n": "4", "start": 39, "end": 61}, {"section": "Experiments", "n": "5", "start": 62, "end": 68}, {"section": "Attention-Based System", "n": "5.1", "start": 69, "end": 77}, {"section": "Neural Hidden Markov Model", "n": "5.2", "start": 78, "end": 86}, {"section": "Results", "n": "5.3", "start": 87, "end": 93}, {"section": "Alignment Analysis", "n": "5.4", "start": 94, "end": 96}, {"section": "Discussion", "n": "6", "start": 97, "end": 105}], "figures": [{"filename": "../figure/image/1062-Figure2-1.png", "caption": "Figure 2: Attention weight and alignment matrices visualized in heat map form. Generated by the attention NMT baseline, GIZA++ and the neural hidden Markov model.", "page": 4, "bbox": {"x1": 73.44, "x2": 522.24, "y1": 63.839999999999996, "y2": 240.95999999999998}}, {"filename": "../figure/image/1062-Figure1-1.png", "caption": "Figure 1: The architecture of our neural networks with LSTM RNN on source and target side.", "page": 1, "bbox": {"x1": 306.71999999999997, "x2": 558.24, "y1": 63.839999999999996, "y2": 251.04}}, {"filename": "../figure/image/1062-Table1-1.png", "caption": "Table 1: Experimental results on WMT 2017 German\u2194English and Chinese\u2192English test sets. All models are trained without synthetic data. Single model is used for decoding. 1 (Wang et al., 2017) but applied in decoding instead of rescoring 2 This work 3 (Bahdanau et al., 2015) with small modifications (Section 5.1)", "page": 3, "bbox": {"x1": 72.0, "x2": 526.0799999999999, "y1": 619.68, "y2": 685.92}}]}