{"title": "Multi-Turn Response Selection for Chatbots with Deep Attention Matching Network", "abstract": "Human generates responses relying on semantic and functional dependencies, including coreference relation, among dialogue elements and their context. In this paper, we investigate matching a response with its multi-turn context using dependency information based entirely on attention. Our solution is inspired by the recently proposed Transformer in machine translation (Vaswani et al., 2017) and we extend the attention mechanism in two ways. First, we construct representations of text segments at different granularities solely with stacked self-attention. Second, we try to extract the truly matched segment pairs with attention across the context and response. We jointly introduce those two kinds of attention in one uniform neural network. Experiments on two large-scale multi-turn response selection tasks show that our proposed model significantly outperforms the state-of-the-art models. * Equally contributed. \u2020 Work done as a visiting scholar at Baidu. Wayne Xin Zhao is an associate professor of Renmin University of China and can be reached at batmanfly@ruc.edu.cn.", "text": [{"id": 0, "string": "Introduction Building a chatbot that can naturally and consistently converse with human-beings on opendomain topics draws increasing research interests in past years."}, {"id": 1, "string": "One important task in chatbots is response selection, which aims to select the bestmatched response from a set of candidates given the context of a conversation."}, {"id": 2, "string": "Besides playing a critical role in retrieval-based chatbots (Ji et al., 2014) , response selection models have been used in automatic evaluation of dialogue generation Figure 1 : Example of human conversation on Ubuntu system troubleshooting."}, {"id": 3, "string": "Speaker A is seeking for a solution of package management in his/her system and speaker B recommend using, the debian package manager, dpkg."}, {"id": 4, "string": "But speaker A does not know dpkg, and asks a backchannel-question (Stolcke et al., 2000) , i.e., \"no clue what do you need it for?"}, {"id": 5, "string": "\", aiming to double-check if dpkg could solve his/her problem."}, {"id": 6, "string": "Text segments with underlines in the same color across context and response can be seen as matched pairs."}, {"id": 7, "string": "Early studies on response selection only use the last utterance in context for matching a reply, which is referred to as single-turn response selection (Wang et al., 2013) ."}, {"id": 8, "string": "Recent works show that the consideration of a multi-turn context can facilitate selecting the next utterance Wu et al., 2017) ."}, {"id": 9, "string": "The reason why richer contextual information works is that human generated responses are heavily dependent on the previous dialogue segments at different granularities (words, phrases, sentences, etc), both semantically and functionally, over multiple turns rather than one turn (Lee et al., 2006; Traum and Heeman, 1996) ."}, {"id": 10, "string": "Figure 1 illustrates semantic connectivities between segment pairs across context and response."}, {"id": 11, "string": "As demonstrated, generally there are two kinds of matched segment pairs at different granularities across context and response: (1) surface text relevance, for example the lexical overlap of words \"packages\"-\"package\" and phrases \"debian package manager\"-\"debian pack-age manager\"."}, {"id": 12, "string": "(2) latent dependencies upon which segments are semantically/functionally related to each other."}, {"id": 13, "string": "Such as the word \"it\" in the response, which refers to \"dpkg\" in the context, as well as the phrase \"its just reassurance\" in the response, which latently points to \"what packages are installed on my system\", the question that speaker A wants to double-check."}, {"id": 14, "string": "Previous studies show that capturing those matched segment pairs at different granularities across context and response is the key to multiturn response selection (Wu et al., 2017) ."}, {"id": 15, "string": "However, existing models only consider the textual relevance, which suffers from matching response that latently depends on previous turns."}, {"id": 16, "string": "Moreover, Recurrent Neural Networks (RNN) are conveniently used for encoding texts, which is too costly to use for capturing multi-grained semantic representations (Lowe et al., 2015; Wu et al., 2017) ."}, {"id": 17, "string": "As an alternative, we propose to match a response with multi-turn context using dependency information based entirely on attention mechanism."}, {"id": 18, "string": "Our solution is inspired by the recently proposed Transformer in machine translation (Vaswani et al., 2017) , which addresses the issue of sequence-to-sequence generation only using attention, and we extend the key attention mechanism of Transformer in two ways: self-attention By making a sentence attend to itself, we can capture its intra word-level dependencies."}, {"id": 19, "string": "Phrases, such as \"debian package manager\", can be modeled with wordlevel self-attention over word-embeddings, and sentence-level representations can be constructed in a similar way with phraselevel self-attention."}, {"id": 20, "string": "By hierarchically stacking self-attention from word embeddings, we can gradually construct semantic representations at different granularities."}, {"id": 21, "string": "cross-attention By making context and response attend to each other, we can generally capture dependencies between those latently matched segment pairs, which is able to provide complementary information to textual relevance for matching response with multi-turn context."}, {"id": 22, "string": "We jointly introduce self-attention and crossattention in one uniform neural matching network, namely the Deep Attention Matching Network (DAM), for multi-turn response selection."}, {"id": 23, "string": "In practice, DAM takes each single word of an utterance in context or response as the centric-meaning of an abstractive semantic segment, and hierarchically enriches its representation with stacked self-attention, gradually producing more and more sophisticated segment representations surrounding the centric-word."}, {"id": 24, "string": "Each utterance in context and response are matched based on segment pairs at different granularities, considering both textual relevance and dependency information."}, {"id": 25, "string": "In this way, DAM generally captures matching information between the context and the response from word-level to sentence-level, important matching features are then distilled with convolution & maxpooling operations, and finally fused into one single matching score via a single-layer perceptron."}, {"id": 26, "string": "We test DAM on two large-scale public multiturn response selection datasets, the Ubuntu Corpus v1 and Douban Conversation Corpus."}, {"id": 27, "string": "Experimental results show that our model significantly outperforms the state-of-the-art models, and the improvement to the best baseline model on R 10 @1 is over 4%."}, {"id": 28, "string": "What is more, DAM is expected to be convenient to deploy in practice because most attention computation can be fully parallelized (Vaswani et al., 2017) ."}, {"id": 29, "string": "Our contributions are two-folds: (1) we propose a new matching model for multi-turn response selection with selfattention and cross-attention."}, {"id": 30, "string": "(2) empirical results show that our proposed model significantly outperforms the state-of-the-art baselines on public datasets, demonstrating the effectiveness of selfattention and cross-attention."}, {"id": 31, "string": "Related Work Conversational System To build an automatic conversational agent is a long cherished goal in Artificial Intelligence (AI) (Turing, 1950) ."}, {"id": 32, "string": "Previous researches include taskoriented dialogue system, which focuses on completing tasks in vertical domain, and chatbots, which aims to consistently and naturally converse with human-beings on open-domain topics."}, {"id": 33, "string": "Most modern chatbots are data-driven, either in a fashion of information-retrieval (Ji et al., 2014; Banchs and Li, 2012; Nio et al., 2014; Ameixa et al., 2014) or sequence-generation (Ritter et al., 2011) ."}, {"id": 34, "string": "The retrieval-based systems enjoy the advantage of informative and fluent responses because it searches a large dialogue repository and selects candidate that best matches the current context."}, {"id": 35, "string": "The generation-based models, on the other hand, learn patterns of responding from dialogues and can directly generalize new responses."}, {"id": 36, "string": "Response Selection Researches on response selection can be generally categorized into single-turn and multi-turn."}, {"id": 37, "string": "Most early studies are single-turn that only consider the last utterance for matching response (Wang et al., 2013 (Wang et al., , 2015 ."}, {"id": 38, "string": "Recent works extend it to multiturn conversation scenario, Lowe et al.,(2015) and  use RNN to read context and response, use the last hidden states to represent context and response as two semantic vectors, and measure their relevance."}, {"id": 39, "string": "Instead of only considering the last states of RNN, Wu et al.,(2017) take hidden state at each time step as a text segment representation, and measure the distance between context and response via segment-segment matching matrixes."}, {"id": 40, "string": "Nevertheless, matching with dependency information is generally ignored in previous works."}, {"id": 41, "string": "Attention Attention has been proven to be very effective in Natural Language Processing (NLP) (Bahdanau et al., 2015; Yin et al., 2016; Lin et al., 2017) and other research areas (Xu et al., 2015) ."}, {"id": 42, "string": "Recently, Vaswani et al.,(2017) propose a novel sequenceto-sequence generation network, the Transformer, which is entirely based on attention."}, {"id": 43, "string": "Not only Transformer can achieve better translation results than convenient RNN-based models, but also it is very fast in training/predicting as the computation of attention can be fully parallelized."}, {"id": 44, "string": "Previous works on attention mechanism show the superior ability of attention to capture semantic dependencies, which inspires us to improve multi-turn response selection with attention mechanism."}, {"id": 45, "string": "3 Deep Attention Matching Network Problem Formalization Given a dialogue data set D = {(c, r, y) Z } N Z=1 , where c = {u 0 , ..., u n\u22121 } represents a conversation context with {u i } n\u22121 i=0 as utterances and r as a response candidate."}, {"id": 46, "string": "y \u2208 {0, 1} is a binary label, indicating whether r is a proper response for c. Our goal is to learn a matching model g(c, r) with D, which can measure the relevance between any context c and candidate response r. Figure 2 gives an overview of DAM, which generally follows the representation-matchingaggregation framework to match response with multi-turn context."}, {"id": 47, "string": "For each utterance Model Overview u i = [w u i ,k ] nu i \u22121 k=0 in a context and its response candidate r = [w r,t ] nr\u22121 t=0 , where n u i and n r stand for the numbers of words, DAM first looks up a shared word embedding table and represents u i and r as sequences of word embeddings, namely U 0 i = [e 0 u i ,0 , ..., e 0 u i ,nu i \u22121 ] and R 0 = [e 0 r,0 , ..., e 0 r,nr\u22121 ] respectively, where e \u2208 R d denotes a d-dimension word embedding."}, {"id": 48, "string": "A representation module then starts to construct semantic representations at different granularities for u i and r. Practically, L identical layers of self-attention are hierarchically stacked, each l th self-attention layer takes the output of the l \u2212 1 th layer as its input, and composites the input semantic vectors into more sophisticated representations based on self-attention."}, {"id": 49, "string": "In this way, multigrained representations of u i and r are gradually constructed, denoted as [U l i ] L l=0 and [R l ] L l=0 re- spectively."}, {"id": 50, "string": "Given [U 0 i , ..., U L i ] and [R 0 , ..., R L ] , utterance u i and response r are then matched with each other in a manner of segment-segment similarity matrix."}, {"id": 51, "string": "Practically, for each granularity l \u2208 [0...L], two kinds of matching matrixes are constructed, i.e., the self-attention-match M u i ,r,l self and cross-attention-match M u i ,r,l cross , measuring the relevance between utterance and response with textual information and dependency information respectively."}, {"id": 52, "string": "Those matching scores are finally merged into a 3D matching image Q 1 ."}, {"id": 53, "string": "Each dimension of Q represents each utterance in context, each word in utterance and each word in response respectively."}, {"id": 54, "string": "Important matching information between segment pairs across multi-turn context and candidate response is then extracted via convolution with max-pooling operations, and further fused into one matching score via a single-layer perceptron, representing the matching degree between the response candidate and the whole context."}, {"id": 55, "string": "Specifically, we use a shared component, the Attentive Module, to implement both selfattention in representation and cross-attention in matching."}, {"id": 56, "string": "We will discuss in detail the implementation of Attentive Module and how we used it to implement both self-attention and cross-attention in following sections."}, {"id": 57, "string": "Figure 3 shows the structure of Attentive Module, which is similar to that used in Transformer (Vaswani et al., 2017) ."}, {"id": 58, "string": "Attentive Module has three input sentences: the query sentence, the key sentence and the value sentence, namely Q = Attentive Module [e i ] n Q \u22121 i=0 , K = [e i ] n K \u22121 i=0 , V = [e i ] n V \u22121 i=0 respec- 1 We refer to it as Q because it is like a cube."}, {"id": 59, "string": "tively, where n Q , n K and n V denote the number of words in each sentence and e i stands for a ddimension embedding, n K is equal to n V ."}, {"id": 60, "string": "The Attentive Module first takes each word in the query sentence to attend to words in the key sentence via Scaled Dot-Product Attention (Vaswani et al., 2017) , then applies those attention results upon the value sentence, which is defined as: Att(Q, K) = sof tmax( Q[i] \u00b7 K T \u221a d ) n Q \u22121 i=0 (1) V att = Att(Q, K) \u00b7 V \u2208 R n Q \u00d7d (2) where Q[i] is the i th embedding in the query sen- tence Q."}, {"id": 61, "string": "Each row of V att , denoted as V att [i] , stores the fused semantic information of words in the value sentence that possibly have dependencies to the i th word in query sentence."}, {"id": 62, "string": "For each i, V att [i] and Q[i] are then added up together, compositing them into a new representation that contains their joint meanings."}, {"id": 63, "string": "A layer normalization operation (Ba et al., 2016) is then applied, which prevents vanishing or exploding of gradients."}, {"id": 64, "string": "A feed-forward network FFN with RELU (LeCun et al., 2015) activation is then applied upon the normalization result, in order to further process the fused embeddings, defined as: FFN(x) = max(0, xW 1 + b 1 )W 2 + b 2 (3) where, x is a 2D-tensor in the same shape of query sentence Q and W 1 , b 1 , W 2 , b 2 are learnt parameters."}, {"id": 65, "string": "This kind of activation is empirically useful in other works, and we also adapt it in our model."}, {"id": 66, "string": "The result FFN(x) is a 2D-tensor that has the same shape as x, FFN(x) is then residually added (He et al., 2016) to x, and the fusion result is then normalized as the final outputs."}, {"id": 67, "string": "We refer to the whole Attentive Module as: AttentiveModule(Q, K, V) (4) As described, Attentive Module can capture dependencies across query sentence and key sentence, and further use the dependency information to composite elements in the query sentence and the value sentence into compositional representations."}, {"id": 68, "string": "We exploit this property of the Attentive Module to construct multi-grained semantic representations as well as match with dependency information."}, {"id": 69, "string": "Representation Given U 0 i or R 0 , the word-level embedding representations for utterance u i or response r, DAM takes U 0 i ro R 0 as inputs and hierarchically stacks the Attentive Module to construct multi-grained representations of u i and r, which is formulated as: U l+1 i = AttentiveModule(U l i , U l i , U l i ) (5) R l+1 = AttentiveModule(R l , R l , R l ) (6) where l ranges from 0 to L \u2212 1, denoting the different levels of granularity."}, {"id": 70, "string": "By this means, words in each utterance or response repeatedly function together to composite more and more holistic representations, we refer to those multi-grained representations as [U 0 i , ..., U L i ] and [R 0 , ..., R L ] here- after."}, {"id": 71, "string": "Utterance-Response Matching Given [U l i ] L l=0 and [R l ] L l=0 , two kinds of segmentsegment matching matrixes are constructed at each level of granularity l, i.e., the self-attention-match M u i ,r,l self and cross-attention-match M u i ,r,l cross ."}, {"id": 72, "string": "M u i ,r,l self is defined as: M u i ,r,l self = {U l i [k] T \u00b7 R l [t]} nu i \u00d7nr (7) in which, each element in the matrix is the dot- product of U l i [k] and R l [t] , the k th embedding in U l i and the t th embedding in R l , reflecting the textual relevance between the k th segment in u i and t th segment in r at the l th granularity."}, {"id": 73, "string": "The crossattention-match matrix is based on cross-attention, which is defined as: U l i = AttentiveModule(U l i , R l , R l ) (8) R l = AttentiveModule(R l , U l i , U l i ) (9) M u i ,r,l cross = { U l i [k] T \u00b7 R l [t]} nu i \u00d7nr (10) where we use Attentive Module to make U l i and R l crossly attend to each other, constructing two new representations for both of them, written as U l i and R l respectively."}, {"id": 74, "string": "Both U l i and R l implicitly capture semantic structures that cross the utterance and response."}, {"id": 75, "string": "In this way, those inter-dependent segment pairs are close to each other in representations, and dot-products between those latently inter-dependent pairs could get increased, providing dependency-aware matching information."}, {"id": 76, "string": "Aggregation DAM finally aggregates all the segmental matching degrees across each utterance and response into a 3D matching image Q, which is defined as: Q = {Q i,k,t } n\u00d7nu i \u00d7nr (11) where each pixel Q i,k,t is formulated as: Q i,k,t = [M u i ,r,l self [k, t]] L l=0 \u2295 [M u i ,r,l cross [k, t]] L l=0 (12) \u2295 is concatenation operation, and each pixel has 2(L + 1) channels, storing the matching degrees between one certain segment pair at different levels of granularity."}, {"id": 77, "string": "DAM then leverages twolayered 3D convolution with max-pooling operations to distill important matching features from the whole image."}, {"id": 78, "string": "The operation of 3D convolution with max-pooling is the extension of typical 2D convolution, whose filters and strides are 3D cubes 2 ."}, {"id": 79, "string": "We finally compute matching score g(c, r) based on the extracted matching features f match (c, r) via a single-layer perceptron, which is formulated as: g(c, r) = \u03c3(W 3 f match (c, r) + b 3 ) (13) where W 3 and b 3 are learnt parameters, and \u03c3 is sigmoid function that gives the probability if r is a proper candidate to c. The loss function of DAM is the negative log likelihood, defined as: p(y|c, r) = g(c, r)y + (1 \u2212 g(c, r))(1 \u2212 y) (14) L(\u00b7) = \u2212 (c, Dataset We test DAM on two public multi-turn response selection datasets, the Ubuntu Corpus V1 (Lowe et al., 2015) and the Douban Conversation Corpus (Wu et al., 2017) ."}, {"id": 80, "string": "The former one contains multiturn dialogues about Ubuntu system troubleshooting in English and the later one is crawled from a Chinese social networking on open-domain topics."}, {"id": 81, "string": "The Ubuntu training set contains 0.5 million multiturn contexts, and each context has one positive response that generated by human and one negative response which is randomly sampled."}, {"id": 82, "string": "Both validation and testing sets of Ubuntu Corpus have 50k contexts, where each context is provided with one positive response and nine negative replies."}, {"id": 83, "string": "The Douban corpus is constructed in a similar way to the Ubuntu Corpus, except that its validation set contains 50k instances with 1:1 positive-negative ratios and the testing set of Douban corpus is consisted of 10k instances, where each context has 10 candidate responses, collected via a tiny invertedindex system (Lucene 3 ), and labels are manually annotated."}, {"id": 84, "string": "Evaluation Metric We use the same evaluation metrics as in previous works (Wu et al., 2017) ."}, {"id": 85, "string": "Each comparison model is asked to select k best-matched response from n available candidates for the given conversation context c, and we calculate the recall of the true positive replies among the k selected ones as the main evaluation metric, denoted as R n @k = k i=1 y i n i=1 y i , where y i is the binary label for each candidate."}, {"id": 86, "string": "In addition to R n @k, we use MAP (Mean Average Precision) (Baeza-3 https://lucenent.apache.org/ Yates et al., 1999) , MRR (Mean Reciprocal Rank) (Voorhees et al., 1999) , and Precision-at-one P @1 especially for Douban corpus, following the setting of previous works (Wu et al., 2017) ."}, {"id": 87, "string": "Ablation : To verify the effects of multi-grained representation, we setup two comparison models, i.e., DAM f irst and DAM last , which dispense with the multi-grained representations in DAM, and use representation results from the 0 th layer and L th layer of self-attention instead."}, {"id": 88, "string": "Moreover, we setup DAM self and DAM cross , which only use self-attention-match or cross-attention-match respectively, in order to examine the effectiveness of both self-attention-match and cross-attention-match."}, {"id": 89, "string": "Comparison Methods RNN-based models Model Training We copy the reported evaluation results of all baselines for comparison."}, {"id": 90, "string": "DAM is implemented in tensorflow 4 , and the used vocabularies, word em-bedding sizes for Ubuntu corpus and Douban corpus are all set as same as the SMN (Wu et al., 2017) ."}, {"id": 91, "string": "We consider at most 9 turns and 50 words for each utterance (response) in our experiments, word embeddings are pre-trained using training sets via word2vec (Mikolov et al., 2013) , similar to previous works."}, {"id": 92, "string": "We use zero-pad to handle the variable-sized input and parameters in FFN are set to 200, same as word-embedding size."}, {"id": 93, "string": "We test stacking 1-7 self-attention layers, and reported our results with 5 stacks of self-attention because it gains the best scores on validation set."}, {"id": 94, "string": "The 1 st convolution layer has 32 [3,3,3] filters with [1,1,1] stride, and its max-pooling size is [3, 3, 3] with [3,3,3] stride."}, {"id": 95, "string": "The 2 nd convolution layer has 16 [3,3,3] filters with [1,1,1] stride, and its maxpooling size is also [3, 3, 3] with [3,3,3] stride."}, {"id": 96, "string": "We tune DAM and the other ablation models with adam optimizer (Le et al., 2011) to minimize loss function defined in Eq 15."}, {"id": 97, "string": "Learning rate is initialized as 1e-3 and gradually decreased during training, and the batch-size is 256."}, {"id": 98, "string": "We use validation sets to select the best models and report their performances on test sets."}, {"id": 99, "string": ", which is the state-of-the-art baseline, demonstrating the superior power of attention mechanism in matching response with multi-turn context."}, {"id": 100, "string": "Besides, both the performances of DAM f irst and DAM self decrease a lot compared with DAM, which shows the effectiveness of self-attention and cross-attention."}, {"id": 101, "string": "Both DAM f irst and DAM last underperform DAM, which demonstrates the benefits of using multigrained representations."}, {"id": 102, "string": "Also the absence of self-attention-match brings down the precision, as shown in DAM cross , exhibiting the necessity of jointly considering textual relevance and dependency information in response selection."}, {"id": 103, "string": "One notable point is that, while DAM f irst is able to achieve close performance to SMN dynamic , it is about 2.3 times faster than SMN dynamic in our implementation as it is very simple in computation."}, {"id": 104, "string": "We believe that DAM f irst is more suitable to the scenario that has limitations in computation time or memories but requires high precise, such as industry application or working as an component in other neural networks like GANs."}, {"id": 105, "string": "Experiment Result Analysis We use the Ubuntu Corpus for analyzing how selfattention and cross-attention work in DAM from both quantity analysis as well as visualization."}, {"id": 106, "string": "Quantity Analysis We first study how DAM performs in different utterance number of context."}, {"id": 107, "string": "The left part in Figure 4 shows the changes of R 10 @1 on Ubuntu Corpus across contexts with different number of utterance."}, {"id": 108, "string": "As demonstrated, while being good at matching response with long context that has more than 4 utterances, DAM can still stably deal with short context that only has 2 turns."}, {"id": 109, "string": "Moreover, the right part of Figure 4 gives the comparison of performance across different contexts with different average utterance text length and self-attention stack depth."}, {"id": 110, "string": "As demonstrated, stacking self-attention can consistently improve matching performance for contexts having different average utterance text length, implying the stability advantage of using multi-grained semantic representations."}, {"id": 111, "string": "The performance of matching short utterances, that have less than 10 words, is obviously lower than the other longer ones."}, {"id": 112, "string": "This is because the shorter the utterance text is, the fewer information it contains, and the more difficult for selecting the next utterance, while stacking self-attention can still help in this case."}, {"id": 113, "string": "However for long utterances like containing more than 30 words, stacking self-attention can significantly improve the matching performance, which means that the more information an utterance contains, the more stacked self-attention it needs to capture its intra semantic structures."}, {"id": 114, "string": "prior-match posterior-match self-attention cross-attention self-attention-match in stack 0 self-attention-match in stack 2 self-attention-match in stack 4 cross-attention-match in stack 4 self-attention-match cross-attention-match Figure 5 : Visualization of self-attention-match, cross-attention-match as well as the distribution of self-attention and crossattention in matching response with the first utterance in Figure 1 ."}, {"id": 115, "string": "Each colored grid represents the matching degree or attention score between two words."}, {"id": 116, "string": "The deeper the color is, the more important this grid is."}, {"id": 117, "string": "Visualization We study the case in Figure 1 for analyzing in detail how self-attention and cross-attention work."}, {"id": 118, "string": "Practically, we apply a softmax operation over self-attention-match and cross-attention-match, to examine the variance of dominating matching pairs during stacking self-attention or applying cross-attention."}, {"id": 119, "string": "Figure 5 gives the visualization results of the 0 th , 2 nd and 4 th self-attention-match matrixes, the 4 th cross-attention-match matrix, as well as the distribution of self-attention and crossattention in the 4 th layer in matching response with the first utterance (turn 0) due to space limitation."}, {"id": 120, "string": "As demonstrated, important matching pairs in selfattention-match in stack 0 are nouns, verbs, like \"package\" and \"packages\", those are similar in topics."}, {"id": 121, "string": "However matching scores between prepositions or pronouns pairs, such as \"do\" and \"what\", become more important in self-attention-match in stack 4."}, {"id": 122, "string": "The visualization results of self-attention show the reason why matching between prepositions or pronouns matters, as demonstrated, selfattention generally capture the semantic structure of \"no clue what do you need package manager\" for \"do\" in response and \"what packages are installed\" for \"what\" in utterance, making segments surrounding \"do\" and \"what\" close to each other in representations, thus increases their dot-product results."}, {"id": 123, "string": "Also as shown in Figure 5 , self-attentionmatch and cross-attention-match capture complementary information in matching utterance with response."}, {"id": 124, "string": "Words like \"reassurance\" and \"its\" in response significantly get larger matching scores in cross-attention-match compared with self-attention-match."}, {"id": 125, "string": "According to the visualization of cross-attention, \"reassurance\" generally depends on \"system\" \"don't\" and \"held\" in utterance, which makes it close to words like \"list\", \"installed\" or \"held\" of utterance."}, {"id": 126, "string": "Scores of crossattention-match trend to centralize on several segments, which probably means that those segments in response generally capture structure-semantic information across utterance and response, amplifying their matching scores against the others."}, {"id": 127, "string": "Error Analysis To understand the limitations of DAM and where the future improvements might lie, we analyze 100 strong bad cases from test-set that fail in R 10 @5."}, {"id": 128, "string": "We find two major kinds of bad cases: (1) fuzzycandidate, where response candidates are basically proper for the conversation context, except for a few improper details."}, {"id": 129, "string": "(2) logical-error, where response candidates are wrong due to logical mismatch, for example, given a conversation context A: \"I just want to stay at home tomorrow."}, {"id": 130, "string": "\", B: \"Why not go hiking?"}, {"id": 131, "string": "I can go with you."}, {"id": 132, "string": "\", response candidate like \"Sure, I was planning to go out tomorrow.\""}, {"id": 133, "string": "is logically wrong because it is contradictory to the first utterance of speaker A."}, {"id": 134, "string": "We believe generating adversarial examples, rather than randomly sampling, during training procedure may be a good idea for addressing both fuzzy-candidate and logical-error, and to capture logic-level information hidden behind conversation text is also worthy to be studied in the future."}, {"id": 135, "string": "Conclusion In this paper, we investigate matching a response with its multi-turn context using dependency information based entirely on attention."}, {"id": 136, "string": "Our solution extends the attention mechanism of Transformer in two ways: (1) using stacked selfattention to harvest multi-grained semantic representations."}, {"id": 137, "string": "(2) utilizing cross-attention to match with dependency information."}, {"id": 138, "string": "Empirical results on two large-scale datasets demonstrate the effectiveness of self-attention and cross-attention in multi-turn response selection."}, {"id": 139, "string": "We believe that both self-attention and cross-attention could benefit other research area, including spoken language understanding, dialogue state tracking or seq2seq dialogue generation."}, {"id": 140, "string": "We would like to explore in depth how attention can help improve neural dialogue modeling for both chatbots and taskoriented dialogue systems in our future work."}], "headers": [{"section": "Introduction", "n": "1", "start": 0, "end": 30}, {"section": "Conversational System", "n": "2.1", "start": 31, "end": 35}, {"section": "Response Selection", "n": "2.2", "start": 36, "end": 40}, {"section": "Attention", "n": "2.3", "start": 41, "end": 43}, {"section": "Problem Formalization", "n": "3.1", "start": 44, "end": 46}, {"section": "Model Overview", "n": "3.2", "start": 47, "end": 57}, {"section": "Attentive Module", "n": "3.3", "start": 58, "end": 67}, {"section": "Representation", "n": "3.4", "start": 68, "end": 70}, {"section": "Utterance-Response Matching", "n": "3.5", "start": 71, "end": 75}, {"section": "Aggregation", "n": "3.6", "start": 76, "end": 79}, {"section": "Dataset", "n": "4.1", "start": 80, "end": 83}, {"section": "Evaluation Metric", "n": "4.2", "start": 84, "end": 88}, {"section": "Model Training", "n": "4.4", "start": 89, "end": 104}, {"section": "Analysis", "n": "5", "start": 105, "end": 105}, {"section": "Quantity Analysis", "n": "5.1", "start": 106, "end": 116}, {"section": "Visualization", "n": "5.2", "start": 117, "end": 126}, {"section": "Error Analysis", "n": "5.3", "start": 127, "end": 134}, {"section": "Conclusion", "n": "6", "start": 135, "end": 140}], "figures": [{"filename": "../figure/image/1333-Figure1-1.png", "caption": "Figure 1: Example of human conversation on Ubuntu system troubleshooting. Speaker A is seeking for a solution of package management in his/her system and speaker B recommend using, the debian package manager, dpkg. But speaker A does not know dpkg, and asks a backchannel-question (Stolcke et al., 2000), i.e., \u201cno clue what do you need it for?\u201d, aiming to double-check if dpkg could solve his/her problem. Text segments with underlines in the same color across context and response can be seen as matched pairs.", "page": 0, "bbox": {"x1": 317.76, "x2": 515.04, "y1": 260.15999999999997, "y2": 361.91999999999996}}, {"filename": "../figure/image/1333-Table1-1.png", "caption": "Table 1: Experimental results of DAM and other comparison approaches on Ubuntu Corpus V1 and Douban Conversation Corpus.", "page": 5, "bbox": {"x1": 75.84, "x2": 522.24, "y1": 62.879999999999995, "y2": 204.95999999999998}}, {"filename": "../figure/image/1333-Figure4-1.png", "caption": "Figure 4: DAM\u2019s performance on Ubuntu Corpus across different contexts. The left part shows the performance in different utterance number of context. The right part shows performance in different average utterance text length of context as well as self-attention stack depth.", "page": 6, "bbox": {"x1": 306.71999999999997, "x2": 535.1999999999999, "y1": 334.56, "y2": 403.2}}, {"filename": "../figure/image/1333-Figure2-1.png", "caption": "Figure 2: Overview of Deep Attention Matching Network.", "page": 2, "bbox": {"x1": 100.8, "x2": 496.32, "y1": 64.8, "y2": 294.24}}, {"filename": "../figure/image/1333-Figure3-1.png", "caption": "Figure 3: Attentive Module.", "page": 3, "bbox": {"x1": 368.64, "x2": 461.28, "y1": 62.879999999999995, "y2": 162.23999999999998}}]}