{"title": "Strong Baselines for Neural Semi-Supervised Learning under Domain Shift", "abstract": "Novel neural models have been proposed in recent years for learning under domain shift. Most models, however, only evaluate on a single task, on proprietary datasets, or compare to weak baselines, which makes comparison of models difficult. In this paper, we re-evaluate classic general-purpose bootstrapping approaches in the context of neural networks under domain shifts vs. recent neural approaches and propose a novel multi-task tri-training method that reduces the time and space complexity of classic tri-training. Extensive experiments on two benchmarks are negative: while our novel method establishes a new state-of-the-art for sentiment analysis, it does not fare consistently the best. More importantly, we arrive at the somewhat surprising conclusion that classic tri-training, with some additions, outperforms the state of the art. We conclude that classic approaches constitute an important and strong baseline.", "text": [{"id": 0, "string": "Introduction Deep neural networks (DNNs) excel at learning from labeled data and have achieved state of the art in a wide array of supervised NLP tasks such as dependency parsing (Dozat and Manning, 2017) , named entity recognition (Lample et al., 2016) , and semantic role labeling (He et al., 2017) ."}, {"id": 1, "string": "In contrast, learning from unlabeled data, especially under domain shift, remains a challenge."}, {"id": 2, "string": "This is common in many real-world applications where the distribution of the training and test data differs."}, {"id": 3, "string": "Many state-of-the-art domain adaptation approaches leverage task-specific characteristics such as sentiment words (Blitzer et al., 2006; Wu and Huang, 2016) or distributional features (Schn-abel and Sch\u00fctze, 2014; Yin et al., 2015) which do not generalize to other tasks."}, {"id": 4, "string": "Other approaches that are in theory more general only evaluate on proprietary datasets (Kim et al., 2017) or on a single benchmark (Zhou et al., 2016) , which carries the risk of overfitting to the task."}, {"id": 5, "string": "In addition, most models only compare against weak baselines and, strikingly, almost none considers evaluating against approaches from the extensive semi-supervised learning (SSL) literature (Chapelle et al., 2006) ."}, {"id": 6, "string": "In this work, we make the argument that such algorithms make strong baselines for any task in line with recent efforts highlighting the usefulness of classic approaches (Melis et al., 2017; Denkowski and Neubig, 2017) ."}, {"id": 7, "string": "We re-evaluate bootstrapping algorithms in the context of DNNs."}, {"id": 8, "string": "These are general-purpose semi-supervised algorithms that treat the model as a black box and can thus be used easily-with a few additions-with the current generation of NLP models."}, {"id": 9, "string": "Many of these methods, though, were originally developed with in-domain performance in mind, so their effectiveness in a domain adaptation setting remains unexplored."}, {"id": 10, "string": "In particular, we re-evaluate three traditional bootstrapping methods, self-training (Yarowsky, 1995) , tri-training (Zhou and Li, 2005) , and tritraining with disagreement (S\u00f8gaard, 2010) for neural network-based approaches on two NLP tasks with different characteristics, namely, a sequence prediction and a classification task (POS tagging and sentiment analysis)."}, {"id": 11, "string": "We evaluate the methods across multiple domains on two wellestablished benchmarks, without taking any further task-specific measures, and compare to the best results published in the literature."}, {"id": 12, "string": "We make the somewhat surprising observation that classic tri-training outperforms task-agnostic state-of-the-art semi-supervised learning (Laine and Aila, 2017) and recent neural adaptation approaches (Ganin et al., 2016; Saito et al., 2017) ."}, {"id": 13, "string": "In addition, we propose multi-task tri-training, which reduces the main deficiency of tri-training, namely its time and space complexity."}, {"id": 14, "string": "It establishes a new state of the art on unsupervised domain adaptation for sentiment analysis but it is outperformed by classic tri-training for POS tagging."}, {"id": 15, "string": "Contributions Our contributions are: a) We propose a novel multi-task tri-training method."}, {"id": 16, "string": "b) We show that tri-training can serve as a strong and robust semi-supervised learning baseline for the current generation of NLP models."}, {"id": 17, "string": "c) We perform an extensive evaluation of bootstrapping 1 algorithms compared to state-of-the-art approaches on two benchmark datasets."}, {"id": 18, "string": "d) We shed light on the task and data characteristics that yield the best performance for each model."}, {"id": 19, "string": "Neural bootstrapping methods We first introduce three classic bootstrapping methods, self-training, tri-training, and tri-training with disagreement and detail how they can be used with neural networks."}, {"id": 20, "string": "For in-depth details we refer the reader to (Abney, 2007; Chapelle et al., 2006; Zhu and Goldberg, 2009 )."}, {"id": 21, "string": "We introduce our novel multitask tri-training method in \u00a72.3."}, {"id": 22, "string": "Self-training Self-training (Yarowsky, 1995; McClosky et al., 2006b ) is one of the earliest and simplest bootstrapping approaches."}, {"id": 23, "string": "In essence, it leverages the model's own predictions on unlabeled data to obtain additional information that can be used during training."}, {"id": 24, "string": "Typically the most confident predictions are taken at face value, as detailed next."}, {"id": 25, "string": "Self-training trains a model m on a labeled training set L and an unlabeled data set U ."}, {"id": 26, "string": "At each iteration, the model provides predictions m(x) in the form of a probability distribution over classes for all unlabeled examples x in U ."}, {"id": 27, "string": "If the probability assigned to the most likely class is higher than a predetermined threshold \u03c4 , x is added to the labeled examples with p(x) = arg max m(x) as pseudo-label."}, {"id": 28, "string": "This instantiation is the most widely used and shown in Algorithm 1."}, {"id": 29, "string": "Calibration It is well-known that output probabilities in neural networks are poorly calibrated (Guo et al., 2017) ."}, {"id": 30, "string": "Using a fixed threshold \u03c4 is thus Algorithm 1 Self-training (Abney, 2007) if max m(x) > \u03c4 then 5: L \u2190 L \u222a {(x, p(x))} 6: until no more predictions are confident not the best choice."}, {"id": 31, "string": "While the absolute confidence value is inaccurate, we can expect that the relative order of confidences is more robust."}, {"id": 32, "string": "For this reason, we select the top n unlabeled examples that have been predicted with the highest confidence after every epoch and add them to the labeled data."}, {"id": 33, "string": "This is one of the many variants for self-training, called throttling (Abney, 2007) ."}, {"id": 34, "string": "We empirically confirm that this outperforms the classic selection in our experiments."}, {"id": 35, "string": "Online learning In contrast to many classic algorithms, DNNs are trained online by default."}, {"id": 36, "string": "We compare training setups and find that training until convergence on labeled data and then training until convergence using self-training performs best."}, {"id": 37, "string": "Classic self-training has shown mixed success."}, {"id": 38, "string": "In parsing it proved successful only with small datasets (Reichart and Rappoport, 2007) or when a generative component is used together with a reranker in high-data conditions (McClosky et al., 2006b; Suzuki and Isozaki, 2008) ."}, {"id": 39, "string": "Some success was achieved with careful task-specific data selection (Petrov and McDonald, 2012) , while others report limited success on a variety of NLP tasks (Plank, 2011; Van Asch and Daelemans, 2016; van der Goot et al., 2017) ."}, {"id": 40, "string": "Its main downside is that the model is not able to correct its own mistakes and errors are amplified, an effect that is increased under domain shift."}, {"id": 41, "string": "Tri-training Tri-training (Zhou and Li, 2005 ) is a classic method that reduces the bias of predictions on unlabeled data by utilizing the agreement of three independently trained models."}, {"id": 42, "string": "Tri-training (cf."}, {"id": 43, "string": "Algorithm 2) first trains three models m 1 , m 2 , and m 3 on bootstrap samples of the labeled data L. An unlabeled data point is added to the training set of a model m i if the other two models m j and m k agree on its label."}, {"id": 44, "string": "Training stops when the classifiers do not change anymore."}, {"id": 45, "string": "Tri-training with disagreement (S\u00f8gaard, 2010) Algorithm 2 Tri-training (Zhou and Li, 2005) L i \u2190 \u2205 7: for x \u2208 U do 8: if p j (x) = p k (x)(j, k = i) then 9: L i \u2190 L i \u222a {(x, p j (x))} m i \u2190 train_model(L \u222a L i ) 10: until none of m i changes 11: apply majority vote over m i is based on the intuition that a model should only be strengthened in its weak points and that the labeled data should not be skewed by easy data points."}, {"id": 46, "string": "In order to achieve this, it adds a simple modification to the original algorithm (altering line 8 in Algorithm 2), requiring that for an unlabeled data point on which m j and m k agree, the other model m i disagrees on the prediction."}, {"id": 47, "string": "Tri-training with disagreement is more data-efficient than tritraining and has achieved competitive results on part-of-speech tagging (S\u00f8gaard, 2010) ."}, {"id": 48, "string": "Sampling unlabeled data Both tri-training and tri-training with disagreement can be very expensive in their original formulation as they require to produce predictions for each of the three models on all unlabeled data samples, which can be in the millions in realistic applications."}, {"id": 49, "string": "We thus propose to sample a number of unlabeled examples at every epoch."}, {"id": 50, "string": "For all traditional bootstrapping approaches we sample 10k candidate instances in each epoch."}, {"id": 51, "string": "For the neural approaches we use a linearly growing candidate sampling scheme proposed by (Saito et al., 2017) , increasing the candidate pool size as the models become more accurate."}, {"id": 52, "string": "Confidence thresholding Similar to selftraining, we can introduce an additional requirement that pseudo-labeled examples are only added if the probability of the prediction of at least one model is higher than some threshold \u03c4 ."}, {"id": 53, "string": "We did not find this to outperform prediction without threshold for traditional tri-training, but thresholding proved essential for our method ( \u00a72.3)."}, {"id": 54, "string": "The most important condition for tri-training and tri-training with disagreement is that the models are diverse."}, {"id": 55, "string": "Typically, bootstrap samples are used to create this diversity (Zhou and Li, 2005; S\u00f8gaard, 2010) ."}, {"id": 56, "string": "However, training separate models on bootstrap samples of a potentially large amount of training data is expensive and takes a lot of time."}, {"id": 57, "string": "This drawback motivates our approach."}, {"id": 58, "string": "Multi-task tri-training In order to reduce both the time and space complexity of tri-training, we propose Multi-task Tritraining (MT-Tri)."}, {"id": 59, "string": "MT-Tri leverages insights from multi-task learning (MTL) (Caruana, 1993) to share knowledge across models and accelerate training."}, {"id": 60, "string": "Rather than storing and training each model separately, we propose to share the parameters of the models and train them jointly using MTL."}, {"id": 61, "string": "2 All models thus collaborate on learning a joint representation, which improves convergence."}, {"id": 62, "string": "The output softmax layers are model-specific and are only updated for the input of the respective model."}, {"id": 63, "string": "We show the model in Figure 1 (as instantiated for POS tagging)."}, {"id": 64, "string": "As the models leverage a joint representation, we need to ensure that the features used for prediction in the softmax layers of the different models are as diverse as possible, so that the models can still learn from each other's predictions."}, {"id": 65, "string": "In contrast, if the parameters in all output softmax layers were the same, the method would degenerate to self-training."}, {"id": 66, "string": "To guarantee diversity, we introduce an orthogonality constraint (Bousmalis et al., 2016) as an additional loss term, which we define as follows: L orth = W m 1 W m 2 2 F (1) where | \u00b7 2 F is the squared Frobenius norm and W m 1 and W m 2 are the softmax output parameters of the two source and pseudo-labeled output layers m 1 and m 2 , respectively."}, {"id": 67, "string": "The orthogonality constraint encourages the models not to rely on the same features for prediction."}, {"id": 68, "string": "As enforcing pairwise orthogonality between three matrices is not possible, we only enforce orthogonality between the softmax output layers of m 1 and m 2 , 3 while m 3 is gradually trained to be more target-specific."}, {"id": 69, "string": "We parameterize L orth by \u03b3=0.01 following ."}, {"id": 70, "string": "We do not further tune \u03b3."}, {"id": 71, "string": "More formally, let us illustrate the model by taking the sequence prediction task (Figure 1 ) as illustration."}, {"id": 72, "string": "Given an utterance with labels y 1 , .., y n , our Multi-task Tri-training loss consists of three task-specific (m 1 , m 2 , m 3 ) tagging loss functions (where h is the uppermost Bi-LSTM encoding): (2) In contrast to classic tri-training, we can train the multi-task model with its three model-specific outputs jointly and without bootstrap sampling on the labeled source domain data until convergence, as the orthogonality constraint enforces different representations between models m 1 and m 2 ."}, {"id": 73, "string": "From this point, we can leverage the pair-wise agreement of two output layers to add pseudo-labeled examples as training data to the third model."}, {"id": 74, "string": "We train the third output layer m 3 only on pseudo-labeled target instances in order to make tri-training more robust to a domain shift."}, {"id": 75, "string": "For the final prediction, majority voting of all three output layers is used, which resulted in the best instantiation, together with confidence thresholding (\u03c4 = 0.9, except for highresource POS where \u03c4 = 0.8 performed slightly better)."}, {"id": 76, "string": "We also experimented with using a domainadversarial loss (Ganin et al., 2016) on the jointly learned representation, but found this not to help."}, {"id": 77, "string": "The full pseudo-code is given in Algorithm 3."}, {"id": 78, "string": "L(\u03b8) = \u2212 i 1,..,n log P m i (y| h) + \u03b3L orth Computational complexity The motivation for MT-Tri was to reduce the space and time complexity of tri-training."}, {"id": 79, "string": "We thus give an estimate of its efficiency gains."}, {"id": 80, "string": "MT-Tri is~3\u00d7 more spaceefficient than regular tri-training; tri-training stores one set of parameters for each of the three models, while MT-Tri only stores one set of parameters (we use three output layers, but these make up a comparatively small part of the total parameter budget)."}, {"id": 81, "string": "In terms of time efficiency, tri-training first 3 We also tried enforcing orthogonality on a hidden layer rather than the output layer, but this did not help."}, {"id": 82, "string": "L i \u2190 \u2205 5: for x \u2208 U do 6: if p j (x) = p k (x)(j, k = i) then 7: L i \u2190 L i \u222a {(x, p j (x))} 8: if i = 3 then m i = train_model(L i ) 9: elsem i \u2190 train_model(L \u222a L i ) 10: until end condition is met 11: apply majority vote over m i requires to train each of the models from scratch."}, {"id": 83, "string": "The actual tri-training takes about the same time as training from scratch and requires a separate forward pass for each model, effectively training three independent models simultaneously."}, {"id": 84, "string": "In contrast, MT-Tri only necessitates one forward pass as well as the evaluation of the two additional output layers (which takes a negligible amount of time) and requires about as many epochs as tri-training until convergence (see Table 3 , second column) while adding fewer unlabeled examples per epoch (see Section 3.4)."}, {"id": 85, "string": "In our experiments, MT-Tri trained about 5-6\u00d7 faster than traditional tri-training."}, {"id": 86, "string": "MT-Tri can be seen as a self-ensembling technique, where different variations of a model are used to create a stronger ensemble prediction."}, {"id": 87, "string": "Recent approaches in this line are snapshot ensembling ) that ensembles models converged to different minima during a training run, asymmetric tri-training (Saito et al., 2017) (ASYM) that leverages agreement on two models as information for the third, and temporal ensembling (Laine and Aila, 2017) , which ensembles predictions of a model at different epochs."}, {"id": 88, "string": "We tried to compare to temporal ensembling in our experiments, but were not able to obtain consistent results."}, {"id": 89, "string": "4 We compare to the closest most recent method, asymmetric tritraining (Saito et al., 2017) ."}, {"id": 90, "string": "It differs from ours in two aspects: a) ASYM leverages only pseudolabels from data points on which m 1 and m 2 agree, and b) it uses only one task (m 3 ) as final predictor."}, {"id": 91, "string": "In essence, our formulation of MT-Tri is closer to the original tri-training formulation (agreements on two provide pseudo-labels to the third) thereby incorporating more diversity."}, {"id": 92, "string": "(Petrov and McDonald, 2012) for POS tagging (above) and the Amazon Reviews dataset (Blitzer et al., 2006) for sentiment analysis (below)."}, {"id": 93, "string": "Experiments In order to ascertain which methods are robust across different domains, we evaluate on two widely used unsupervised domain adaptation datasets for two tasks, a sequence labeling and a classification task, cf."}, {"id": 94, "string": "Table 1 for data statistics."}, {"id": 95, "string": "POS tagging For POS tagging we use the SANCL 2012 shared task dataset (Petrov and McDonald, 2012) and compare to the top results in both low and high-data conditions (Schnabel and Sch\u00fctze, 2014; Yin et al., 2015) ."}, {"id": 96, "string": "Both are strong baselines, as the FLORS tagger has been developed for this challenging dataset and it is based on contextual distributional features (excluding the word's identity), and hand-crafted suffix and shape features (including some languagespecific morphological features)."}, {"id": 97, "string": "We want to gauge to what extent we can adopt a nowadays fairly standard (but more lexicalized) general neural tagger."}, {"id": 98, "string": "Our POS tagging model is a state-of-the-art Bi-LSTM tagger (Plank et al., 2016) with word and 100-dim character embeddings."}, {"id": 99, "string": "Word embeddings are initialized with the 100-dim Glove embeddings (Pennington et al., 2014) ."}, {"id": 100, "string": "The BiLSTM has one hidden layer with 100 dimensions."}, {"id": 101, "string": "The base POS model is trained on WSJ with early stopping on the WSJ development set, using patience 2, Gaussian noise with \u03c3 = 0.2 and word dropout with p = 0.25 (Kiperwasser and Goldberg, 2016) ."}, {"id": 102, "string": "Regarding data, the source domain is the Ontonotes 4.0 release of the Penn treebank Wall Street Journal (WSJ) annotated for 48 fine-grained POS tags."}, {"id": 103, "string": "This amounts to 30,060 labeled sen-tences."}, {"id": 104, "string": "We use 100,000 WSJ sentences from 1988 as unlabeled data, following Schnabel and Sch\u00fctze (2014) ."}, {"id": 105, "string": "5 As target data, we use the five SANCL domains (answers, emails, newsgroups, reviews, weblogs)."}, {"id": 106, "string": "We restrict the amount of unlabeled data for each SANCL domain to the first 100k sentences, and do not do any pre-processing."}, {"id": 107, "string": "We consider the development set of ANSWERS as our only target dev set to set hyperparameters."}, {"id": 108, "string": "This may result in suboptimal per-domain settings but better resembles an unsupervised adaptation scenario."}, {"id": 109, "string": "Sentiment analysis For sentiment analysis, we evaluate on the Amazon reviews dataset (Blitzer et al., 2006) ."}, {"id": 110, "string": "Reviews with 1 to 3 stars are ranked as negative, while reviews with 4 or 5 stars are ranked as positive."}, {"id": 111, "string": "The dataset consists of four domains, yielding 12 adaptation scenarios."}, {"id": 112, "string": "We use the same pre-processing and architecture as used in (Ganin et al., 2016; Saito et al., 2017) : 5,000-dimensional tf-idf weighted unigram and bigram features as input; 2k labeled source samples and 2k unlabeled target samples for training, 200 labeled target samples for validation, and between 3k-6k samples for testing."}, {"id": 113, "string": "The model is an MLP with one hidden layer with 50 dimensions, sigmoid activations, and a softmax output."}, {"id": 114, "string": "We compare against the Variational Fair Autoencoder (VFAE) (Louizos et al., 2015) model and domain-adversarial neural networks (DANN) (Ganin et al., 2016) ."}, {"id": 115, "string": "Baselines Besides comparing to the top results published on both datasets, we include the following baselines: a) the task model trained on the source domain; b) self-training (Self); c) tri-training (Tri); d) tri-training with disagreement (Tri-D); and e) asymmetric tri-training (Saito et al., 2017) ."}, {"id": 116, "string": "Our proposed model is multi-task tri-training (MT-Tri)."}, {"id": 117, "string": "We implement our models in DyNet ."}, {"id": 118, "string": "Reporting single evaluation scores might result in biased results (Reimers and Gurevych, 2017) ."}, {"id": 119, "string": "Throughout the paper, we report mean accuracy and standard deviation over five runs for POS tagging and over ten runs for Results Sentiment analysis We show results for sentiment analysis for all 12 domain adaptation scenarios in Figure 2 ."}, {"id": 120, "string": "For clarity, we also show the accuracy scores averaged across each target domain as well as a global macro average in Table 2 Self-training achieves surprisingly good results but is not able to compete with tri-training."}, {"id": 121, "string": "Tritraining with disagreement is only slightly better than self-training, showing that the disagreement component might not be useful when there is a strong domain shift."}, {"id": 122, "string": "Tri-training achieves the best average results on two target domains and clearly outperforms the state of the art on average."}, {"id": 123, "string": "MT-Tri finally outperforms the state of the art on 3/4 domains, and even slightly traditional tritraining, resulting in the overall best method."}, {"id": 124, "string": "This improvement is mainly due to the B->E and D->E scenarios, on which tri-training struggles."}, {"id": 125, "string": "These domain pairs are among those with the highest Adistance (Blitzer et al., 2007) , which highlights that tri-training has difficulty dealing with a strong shift in domain."}, {"id": 126, "string": "Our method is able to mitigate this deficiency by training one of the three output layers only on pseudo-labeled target domain examples."}, {"id": 127, "string": "In addition, MT-Tri is more efficient as it adds a smaller number of pseudo-labeled examples than tri-training at every epoch."}, {"id": 128, "string": "For sentiment analysis, tri-training adds around 1800-1950/2000 unlabeled examples at every epoch, while MT-Tri only adds around 100-300 in early epochs."}, {"id": 129, "string": "This shows that the orthogonality constraint is useful for inducing diversity."}, {"id": 130, "string": "In addition, adding fewer examples poses a smaller risk of swamping the learned representations with useless signals and is more akin to fine-tuning, the standard method for supervised domain adaptation (Howard and Ruder, 2018) ."}, {"id": 131, "string": "We observe an asymmetry in the results between some of the domain pairs, e.g."}, {"id": 132, "string": "B->D and D->B."}, {"id": 133, "string": "We hypothesize that the asymmetry may be due to properties of the data and that the domains are relatively far apart e.g., in terms of A-distance."}, {"id": 134, "string": "In fact, asymmetry in these domains is already reflected Table 4 : Accuracy for POS tagging on the dev and test sets of the SANCL domains, models trained on full source data setup."}, {"id": 135, "string": "Values for methods with * are from (Schnabel and Sch\u00fctze, 2014) ."}, {"id": 136, "string": "in the results of Blitzer et al."}, {"id": 137, "string": "(2007) and is corroborated in the results for asymmetric tri-training (Saito et al., 2017) and our method."}, {"id": 138, "string": "We note a weakness of this dataset is high variance."}, {"id": 139, "string": "Existing approaches only report the mean, which makes an objective comparison difficult."}, {"id": 140, "string": "For this reason, we believe it is essential to evaluate proposed approaches also on other tasks."}, {"id": 141, "string": "POS tagging Results for tagging in the low-data regime (10% of WSJ) are given in Table 3 ."}, {"id": 142, "string": "Self-training does not work for the sequence prediction task."}, {"id": 143, "string": "We report only the best instantia-tion (throttling with n=800)."}, {"id": 144, "string": "Our results contribute to negative findings regarding self-training (Plank, 2011; Van Asch and Daelemans, 2016 )."}, {"id": 145, "string": "In the low-data setup, tri-training with disagreement works best, reaching an overall average accuracy of 89.70, closely followed by classic tritraining, and significantly outperforming the baseline on 4/5 domains."}, {"id": 146, "string": "The exception is newsgroups, a difficult domain with high OOV rate where none of the approches beats the baseline (see \u00a73.4)."}, {"id": 147, "string": "Our proposed MT-Tri is better than asymmetric tritraining, but falls below classic tri-training."}, {"id": 148, "string": "It beats  the baseline significantly on only 2/5 domains (answers and emails)."}, {"id": 149, "string": "The FLORS tagger (Yin et al., 2015) fares better."}, {"id": 150, "string": "Its contextual distributional features are particularly helpful on unknown word-tag combinations (see \u00a7 3.4), which is a limitation of the lexicalized generic bi-LSTM tagger."}, {"id": 151, "string": "For the high-data setup (Table 4 ) results are similar."}, {"id": 152, "string": "Disagreement, however, is only favorable in the low-data setups; the effect of avoiding easy points no longer holds in the full data setup."}, {"id": 153, "string": "Classic tritraining is the best method."}, {"id": 154, "string": "In particular, traditional tri-training is complementary to word embedding initialization, pushing the non-pre-trained baseline to the level of SRC with Glove initalization."}, {"id": 155, "string": "Tritraining pushes performance even further and results in the best model, significantly outperforming the baseline again in 4/5 cases, and reaching FLORS performance on weblogs."}, {"id": 156, "string": "Multi-task tritraining is often slightly more effective than asymmetric tri-training (Saito et al., 2017) ; however, improvements for both are not robust across domains, sometimes performance even drops."}, {"id": 157, "string": "The model likely is too simplistic for such a high-data POS setup, and exploring shared-private models might prove more fruitful ."}, {"id": 158, "string": "On the test sets, tri-training performs consistently the best."}, {"id": 159, "string": "POS analysis We analyze POS tagging accuracy with respect to word frequency 6 and unseen word-tag combinations (UWT) on the dev sets."}, {"id": 160, "string": "known tags, OOVs and unknown word-tag (UWT) rate."}, {"id": 161, "string": "The SANCL dataset is overall very challenging: OOV rates are high (6.8-11% compared to 2.3% in WSJ), so is the unknown word-tag (UWT) rate (answers and emails contain 2.91% and 3.47% UWT compared to 0.61% on WSJ) and almost all target domains even contain unknown tags (Schnabel and Sch\u00fctze, 2014 ) (unknown tags: ADD,GW,NFP,XX), except for weblogs."}, {"id": 162, "string": "Email is the domain with the highest OOV rate and highest unknown-tag-for-known-words rate."}, {"id": 163, "string": "We plot accuracy with respect to word frequency on email in Figure 3 , analyzing how the three methods fare in comparison to the baseline on this difficult domain."}, {"id": 164, "string": "Regarding OOVs, the results in Table 5 (second part) show that classic tri-training outperforms the source model (trained on only source data) on 3/5 domains in terms of OOV accuracy, except on two domains with high OOV rate (newsgroups and weblogs)."}, {"id": 165, "string": "In general, we note that tri-training works best on OOVs and on low-frequency tokens, which is also shown in Figure 3 (leftmost bins)."}, {"id": 166, "string": "Both other methods fall typically below the baseline in terms of OOV accuracy, but MT-Tri still outperforms Asym in 4/5 cases."}, {"id": 167, "string": "Table 5 (last part) also shows that no bootstrapping method works well on unknown word-tag combinations."}, {"id": 168, "string": "UWT tokens are very difficult to predict correctly using an unsupervised approach; the less lexicalized and more context-driven approach taken by FLORS is clearly superior for these cases, resulting in higher UWT accuracies for 4/5 domains."}, {"id": 169, "string": "Related work Learning under Domain Shift There is a large body of work on domain adaptation."}, {"id": 170, "string": "Studies on unsupervised domain adaptation include early work on bootstrapping (Steedman et al., 2003; McClosky et al., 2006a) , shared feature representations (Blitzer et al., 2006 (Blitzer et al., , 2007 and instance weighting (Jiang and Zhai, 2007) ."}, {"id": 171, "string": "Recent ap-proaches include adversarial learning (Ganin et al., 2016) and fine-tuning (Sennrich et al., 2016) ."}, {"id": 172, "string": "There is almost no work on bootstrapping approaches for recent neural NLP, in particular under domain shift."}, {"id": 173, "string": "Tri-training is less studied, and only recently re-emerged in the vision community (Saito et al., 2017) , albeit is not compared to classic tri-training."}, {"id": 174, "string": "Neural network ensembling Related work on self-ensembling approaches includes snapshot ensembling  or temporal ensembling (Laine and Aila, 2017) ."}, {"id": 175, "string": "In general, the line between \"explicit\" and \"implicit\" ensembling , like dropout (Srivastava et al., 2014) or temporal ensembling (Saito et al., 2017) , is more fuzzy."}, {"id": 176, "string": "As we noted earlier our multi-task learning setup can be seen as a form of self-ensembling."}, {"id": 177, "string": "Multi-task learning in NLP Neural networks are particularly well-suited for MTL allowing for parameter sharing (Caruana, 1993) ."}, {"id": 178, "string": "Recent NLP conferences witnessed a \"tsunami\" of deep learning papers (Manning, 2015) , followed by what we call a multi-task learning \"wave\": MTL has been successfully applied to a wide range of NLP tasks (Cohn and Specia, 2013; Cheng et al., 2015; Luong et al., 2015; Plank et al., 2016; Fang and Cohn, 2016; Ruder et al., 2017; Augenstein et al., 2018) ."}, {"id": 179, "string": "Related to it is the pioneering work on adversarial learning (DANN) (Ganin et al., 2016) ."}, {"id": 180, "string": "For sentiment analysis we found tri-training and our MT-Tri model to outperform DANN."}, {"id": 181, "string": "Our MT-Tri model lends itself well to shared-private models such as those proposed recently Kim et al., 2017) , which extend upon (Ganin et al., 2016) by having separate source and target-specific encoders."}, {"id": 182, "string": "Conclusions We re-evaluate a range of traditional generalpurpose bootstrapping algorithms in the context of neural network approaches to semi-supervised learning under domain shift."}, {"id": 183, "string": "For the two examined NLP tasks classic tri-training works the best and even outperforms a recent state-of-the-art method."}, {"id": 184, "string": "The drawback of tri-training it its time and space complexity."}, {"id": 185, "string": "We therefore propose a more efficient multi-task tri-training model, which outperforms both traditional tri-training and recent alternatives in the case of sentiment analysis."}, {"id": 186, "string": "For POS tagging, classic tri-training is superior, performing especially well on OOVs and low frequency to-kens, which suggests it is less affected by error propagation."}, {"id": 187, "string": "Overall we emphasize the importance of comparing neural approaches to strong baselines and reporting results across several runs."}], "headers": [{"section": "Introduction", "n": "1", "start": 0, "end": 18}, {"section": "Neural bootstrapping methods", "n": "2", "start": 19, "end": 21}, {"section": "Self-training", "n": "2.1", "start": 22, "end": 40}, {"section": "Tri-training", "n": "2.2", "start": 41, "end": 57}, {"section": "Multi-task tri-training", "n": "2.3", "start": 58, "end": 91}, {"section": "Experiments", "n": "3", "start": 92, "end": 94}, {"section": "POS tagging", "n": "3.1", "start": 95, "end": 108}, {"section": "Sentiment analysis", "n": "3.2", "start": 109, "end": 114}, {"section": "Baselines", "n": "3.3", "start": 115, "end": 168}, {"section": "Related work", "n": "4", "start": 169, "end": 181}, {"section": "Conclusions", "n": "5", "start": 182, "end": 187}], "figures": [{"filename": "../figure/image/989-Table2-1.png", "caption": "Table 2: Average accuracy scores for each SA target domain. *: result from Saito et al. (2017).", "page": 5, "bbox": {"x1": 72.0, "x2": 288.0, "y1": 501.59999999999997, "y2": 633.12}}, {"filename": "../figure/image/989-Figure2-1.png", "caption": "Figure 2: Average results for unsupervised domain adaptation on the Amazon dataset. Domains: B (Book), D (DVD), E (Electronics), K (Kitchen). Results for VFAE, DANN, and Asym are from Saito et al. (2017).", "page": 5, "bbox": {"x1": 72.0, "x2": 543.36, "y1": 61.44, "y2": 280.32}}, {"filename": "../figure/image/989-Table4-1.png", "caption": "Table 4: Accuracy for POS tagging on the dev and test sets of the SANCL domains, models trained on full source data setup. Values for methods with * are from (Schnabel and Sch\u00fctze, 2014).", "page": 6, "bbox": {"x1": 72.0, "x2": 526.0799999999999, "y1": 235.67999999999998, "y2": 538.0799999999999}}, {"filename": "../figure/image/989-Table3-1.png", "caption": "Table 3: Accuracy scores on dev set of target domain for POS tagging for 10% labeled data. Avg: average over the 5 SANCL domains. Hyperparameter ep (epochs) is tuned on Answers dev. \u00b5pseudo: average amount of added pseudo-labeled data. FLORS: results for Batch (u:big) from (Yin et al., 2015) (see \u00a73).", "page": 6, "bbox": {"x1": 72.0, "x2": 526.0799999999999, "y1": 65.75999999999999, "y2": 174.23999999999998}}, {"filename": "../figure/image/989-Figure1-1.png", "caption": "Figure 1: Multi-task tri-training (MT-Tri).", "page": 2, "bbox": {"x1": 317.76, "x2": 515.04, "y1": 61.44, "y2": 178.07999999999998}}, {"filename": "../figure/image/989-Figure3-1.png", "caption": "Figure 3: POS accuracy per binned log frequency.", "page": 7, "bbox": {"x1": 306.71999999999997, "x2": 526.0799999999999, "y1": 61.44, "y2": 163.2}}, {"filename": "../figure/image/989-Table5-1.png", "caption": "Table 5: Accuracy scores on dev sets for OOV and unknown word-tag (UWT) tokens.", "page": 7, "bbox": {"x1": 72.0, "x2": 291.36, "y1": 62.879999999999995, "y2": 262.08}}, {"filename": "../figure/image/989-Table1-1.png", "caption": "Table 1: Number of labeled and unlabeled sentences for each domain in the SANCL 2012 dataset (Petrov and McDonald, 2012) for POS tagging (above) and the Amazon Reviews dataset (Blitzer et al., 2006) for sentiment analysis (below).", "page": 4, "bbox": {"x1": 89.75999999999999, "x2": 270.24, "y1": 62.4, "y2": 190.07999999999998}}]}