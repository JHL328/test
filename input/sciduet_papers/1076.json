{"title": "A Transition-Based Directed Acyclic Graph Parser for UCCA", "abstract": "We present the first parser for UCCA, a cross-linguistically applicable framework for semantic representation, which builds on extensive typological work and supports rapid annotation. UCCA poses a challenge for existing parsing techniques, as it exhibits reentrancy (resulting in DAG structures), discontinuous structures and non-terminal nodes corresponding to complex semantic units. To our knowledge, the conjunction of these formal properties is not supported by any existing parser. Our transition-based parser, which uses a novel transition set and features based on bidirectional LSTMs, has value not just for UCCA parsing: its ability to handle more general graph structures can inform the development of parsers for other semantic DAG structures, and in languages that frequently use discontinuous structures.", "text": [{"id": 0, "string": "Introduction Universal Conceptual Cognitive Annotation (UCCA, Abend and Rappoport, 2013) is a crosslinguistically applicable semantic representation scheme, building on the established Basic Linguistic Theory typological framework (Dixon, 2010a (Dixon, ,b, 2012 , and Cognitive Linguistics literature (Croft and Cruse, 2004) ."}, {"id": 1, "string": "It has demonstrated applicability to multiple languages, including English, French, German and Czech, support for rapid annotation by non-experts (assisted by an accessible annotation interface ), and stability under translation (Sulem et al., 2015) ."}, {"id": 2, "string": "It has also proven useful for machine translation evaluation (Birch et al., 2016) ."}, {"id": 3, "string": "UCCA differs from syntactic schemes in terms of content and formal structure."}, {"id": 4, "string": "It exhibits reentrancy, discontinuous nodes and non-terminals, which no single existing parser supports."}, {"id": 5, "string": "Lacking a parser, UCCA's applicability has been so far limited, a gap this work addresses."}, {"id": 6, "string": "We present the first UCCA parser, TUPA (Transition-based UCCA Parser), building on recent advances in discontinuous constituency and dependency graph parsing, and further introducing novel transitions and features for UCCA."}, {"id": 7, "string": "Transition-based techniques are a natural starting point for UCCA parsing, given the conceptual similarity of UCCA's distinctions, centered around predicate-argument structures, to distinctions expressed by dependency schemes, and the achievements of transition-based methods in dependency parsing (Dyer et al., 2015; Andor et al., 2016; Kiperwasser and Goldberg, 2016) ."}, {"id": 8, "string": "We are further motivated by the strength of transition-based methods in related tasks, including dependency graph parsing (Sagae and Tsujii, 2008; Ribeyre et al., 2014; Tokg\u00f6z and Eryigit, 2015) , constituency parsing (Sagae and Lavie, 2005; Zhang and Clark, 2009; Zhu et al., 2013; Maier, 2015; Maier and Lichte, 2016) , AMR parsing (Wang et al., 2015a (Wang et al., ,b, 2016 Misra and Artzi, 2016; Goodman et al., 2016; Zhou et al., 2016; Damonte et al., 2017) and CCG parsing (Zhang and Clark, 2011; Ambati et al., 2015 Ambati et al., , 2016 ."}, {"id": 9, "string": "We evaluate TUPA on the English UCCA corpora, including in-domain and out-of-domain settings."}, {"id": 10, "string": "To assess the ability of existing parsers to tackle the task, we develop a conversion procedure from UCCA to bilexical graphs and trees."}, {"id": 11, "string": "Results show superior performance for TUPA, demonstrating the effectiveness of the presented approach."}, {"id": 12, "string": "1 The rest of the paper is structured as follows: Section 2 describes UCCA in more detail."}, {"id": 13, "string": "Section 3 introduces TUPA."}, {"id": 14, "string": "Section 4 discusses the data and experimental setup."}, {"id": 15, "string": "Section 5 presents the experimental results."}, {"id": 16, "string": "Section 6 summarizes related work, and Section 7 concludes the paper."}, {"id": 17, "string": "2 The UCCA Scheme UCCA graphs are labeled, directed acyclic graphs (DAGs), whose leaves correspond to the tokens of the text."}, {"id": 18, "string": "A node (or unit) corresponds to a terminal or to several terminals (not necessarily contiguous) viewed as a single entity according to semantic or cognitive considerations."}, {"id": 19, "string": "Edges bear a category, indicating the role of the sub-unit in the parent relation."}, {"id": 20, "string": "Figure 1 presents a few examples."}, {"id": 21, "string": "UCCA is a multi-layered representation, where each layer corresponds to a \"module\" of semantic distinctions."}, {"id": 22, "string": "UCCA's foundational layer, targeted in this paper, covers the predicate-argument structure evoked by predicates of all grammatical categories (verbal, nominal, adjectival and others), the inter-relations between them, and other major linguistic phenomena such as coordination and multi-word expressions."}, {"id": 23, "string": "The layer's basic notion is the scene, describing a state, action, movement or some other relation that evolves in time."}, {"id": 24, "string": "Each scene contains one main relation (marked as either a Process or a State), as well as one or more Participants."}, {"id": 25, "string": "For example, the sentence \"After graduation, John moved to Paris\" (Figure 1a ) contains two scenes, whose main relations are \"graduation\" and \"moved\"."}, {"id": 26, "string": "\"John\" is a Participant in both scenes, while \"Paris\" only in the latter."}, {"id": 27, "string": "Further categories account for inter-scene relations and the internal structure of complex arguments and relations (e.g."}, {"id": 28, "string": "coordination, multi-word expressions and modification)."}, {"id": 29, "string": "One incoming edge for each non-root node is marked as primary, and the rest (mostly used for implicit relations and arguments) as remote edges, a distinction made by the annotator."}, {"id": 30, "string": "The primary edges thus form a tree structure, whereas the remote edges enable reentrancy, forming a DAG."}, {"id": 31, "string": "While parsing technology in general, and transition-based parsing in particular, is wellestablished for syntactic parsing, UCCA has several distinct properties that distinguish it from syntactic representations, mostly UCCA's tendency to abstract away from syntactic detail that do not affect argument structure."}, {"id": 32, "string": "For instance, consider the following examples where the concept of a scene has a different rationale from the syntactic concept of a clause."}, {"id": 33, "string": "First, non-verbal predicates in UCCA are represented like verbal ones, such as when they appear in copula clauses or noun phrases."}, {"id": 34, "string": "Indeed, in Figure 1a , \"graduation\" and \"moved\" are considered separate events, despite appearing in the same clause."}, {"id": 35, "string": "Second, in the same example, \"John\" is marked as a (remote) Participant in the graduation scene, despite not being overtly marked."}, {"id": 36, "string": "Third, consider the possessive construction in Fig These examples demonstrate that a UCCA parser, and more generally semantic parsers, face an additional level of ambiguity compared to their syntactic counterparts (e.g., \"after graduation\" is formally very similar to \"after 2pm\", which does not evoke a scene)."}, {"id": 37, "string": "Section 6 discusses UCCA in the context of other semantic schemes, such as AMR (Banarescu et al., 2013) ."}, {"id": 38, "string": "Alongside recent progress in dependency parsing into projective trees, there is increasing interest in parsing into representations with more general structural properties (see Section 6)."}, {"id": 39, "string": "One such property is reentrancy, namely the sharing of semantic units between predicates."}, {"id": 40, "string": "For instance, in Figure 1a , \"John\" is an argument of both \"gradu-ation\" and \"moved\", yielding a DAG rather than a tree."}, {"id": 41, "string": "A second property is discontinuity, as in Figure 1b , where \"gave up\" forms a discontinuous semantic unit."}, {"id": 42, "string": "Discontinuities are pervasive, e.g., with multi-word expressions ."}, {"id": 43, "string": "Finally, unlike most dependency schemes, UCCA uses non-terminal nodes to represent units comprising more than one word."}, {"id": 44, "string": "The use of non-terminal nodes is motivated by constructions with no clear head, including coordination structures (e.g., \"John and Mary\" in Figure 1c ), some multi-word expressions (e.g., \"The Haves and the Have Nots\"), and prepositional phrases (either the preposition or the head noun can serve as the constituent's head)."}, {"id": 45, "string": "To our knowledge, no existing parser supports all structural properties required for UCCA parsing."}, {"id": 46, "string": "Transition-based UCCA Parsing We now turn to presenting TUPA."}, {"id": 47, "string": "Building on previous work on parsing reentrancies, discontinuities and non-terminal nodes, we define an extended set of transitions and features that supports the conjunction of these properties."}, {"id": 48, "string": "Transition-based parsers (Nivre, 2003) scan the text from start to end, and create the parse incrementally by applying a transition at each step to the parser's state, defined using three data structures: a buffer B of tokens and nodes to be processed, a stack S of nodes currently being processed, and a graph G = (V, E, ) of constructed nodes and edges, where V is the set of nodes, E is the set of edges, and : E \u2192 L is the label function, L being the set of possible labels."}, {"id": 49, "string": "Some states are marked as terminal, meaning that G is the final output."}, {"id": 50, "string": "A classifier is used at each step to select the next transition based on features encoding the parser's current state."}, {"id": 51, "string": "During training, an oracle creates training instances for the classifier, based on gold-standard annotations."}, {"id": 52, "string": "Transition Set."}, {"id": 53, "string": "Given a sequence of tokens w 1 , ."}, {"id": 54, "string": "."}, {"id": 55, "string": "."}, {"id": 56, "string": ", w n , we predict a UCCA graph G over the sequence."}, {"id": 57, "string": "Parsing starts with a single node on the stack (an artificial root node), and the input tokens in the buffer."}, {"id": 58, "string": "Figure 2 shows the transition set."}, {"id": 59, "string": "In addition to the standard SHIFT and RE-DUCE operations, we follow previous work in transition-based constituency parsing (Sagae and Lavie, 2005) , adding the NODE transition for creating new non-terminal nodes."}, {"id": 60, "string": "For every X \u2208 L, NODE X creates a new node on the buffer as a par-ent of the first element on the stack, with an Xlabeled edge."}, {"id": 61, "string": "LEFT-EDGE X and RIGHT-EDGE X create a new primary X-labeled edge between the first two elements on the stack, where the parent is the left or the right node, respectively."}, {"id": 62, "string": "As a UCCA node may only have one incoming primary edge, EDGE transitions are disallowed if the child node already has an incoming primary edge."}, {"id": 63, "string": "LEFT-REMOTE X and RIGHT-REMOTE X do not have this restriction, and the created edge is additionally marked as remote."}, {"id": 64, "string": "We distinguish between these two pairs of transitions to allow the parser to create remote edges without the possibility of producing invalid graphs."}, {"id": 65, "string": "To support the prediction of multiple parents, node and edge transitions leave the stack unchanged, as in other work on transition-based dependency graph parsing (Sagae and Tsujii, 2008; Ribeyre et al., 2014; Tokg\u00f6z and Eryigit, 2015) ."}, {"id": 66, "string": "REDUCE pops the stack, to allow removing a node once all its edges have been created."}, {"id": 67, "string": "To handle discontinuous nodes, SWAP pops the second node on the stack and adds it to the top of the buffer, as with the similarly named transition in previous work (Nivre, 2009; Maier, 2015) ."}, {"id": 68, "string": "Finally, FINISH pops the root node and marks the state as terminal."}, {"id": 69, "string": "Classifier."}, {"id": 70, "string": "The choice of classifier and feature representation has been shown to play an important role in transition-based parsing (Chen and Manning, 2014; Andor et al., 2016; Kiperwasser and Goldberg, 2016) ."}, {"id": 71, "string": "To investigate the impact of the type of transition classifier in UCCA parsing, we experiment with three different models."}, {"id": 72, "string": "1."}, {"id": 73, "string": "Starting with a simple and common choice (e.g., Maier and Lichte, 2016) , TUPA Sparse uses a linear classifier with sparse features, trained with the averaged structured perceptron algorithm (Collins and Roark, 2004) S x | B V E SHIFT S | x B V E \u2212 S | x B V E REDUCE S B V E \u2212 S | x B V E NODE X S | x y | B V \u222a {y} E \u222a {(y, x) X } \u2212 x = root S | y, x B V E LEFT-EDGE X S | y, x B V E \u222a {(x, y) X } \u2212 \uf8f1 \uf8f2 \uf8f3 x \u2208 w 1:n , y = root, y ; G x S | x, y B V E RIGHT-EDGE X S | x, y B V E \u222a {(x, y) X } \u2212 S | y, x B V E LEFT-REMOTE X S | y, x B V E \u222a {(x, y) * X } \u2212 S | x, y B V E RIGHT-REMOTE X S | x, y B V E \u222a {(x, y) * X } \u2212 S | x, y B V E SWAP S | y x | B V E \u2212 i(x) < i(y) [root] \u2205 V E FINISH \u2205 \u2205 V E + Figure 2: The transition set of TUPA."}, {"id": 74, "string": "We write the stack with its top to the right and the buffer with its head to the left."}, {"id": 75, "string": "(\u00b7, \u00b7)X denotes a primary X-labeled edge, and (\u00b7, \u00b7) * X a remote X-labeled edge."}, {"id": 76, "string": "i(x) is a running index for the created nodes."}, {"id": 77, "string": "In addition to the specified conditions, the prospective child in an EDGE transition must not already have a primary parent."}, {"id": 78, "string": "instead of one layer with cube activation."}, {"id": 79, "string": "The embeddings and classifier are trained jointly."}, {"id": 80, "string": "3."}, {"id": 81, "string": "Finally, TUPA BiLSTM uses a bidirectional LSTM for feature representation, on top of the dense embedding features, an architecture similar to Kiperwasser and Goldberg (2016) ."}, {"id": 82, "string": "The BiLSTM runs on the input tokens in forward and backward directions, yielding a vector representation that is then concatenated with dense features representing the parser state (e.g., existing edge labels and previous parser actions; see below)."}, {"id": 83, "string": "This representation is then fed into a feedforward network similar to TUPA MLP ."}, {"id": 84, "string": "The feedforward layers, BiLSTM and embeddings are all trained jointly."}, {"id": 85, "string": "For all classifiers, inference is performed greedily, i.e., without beam search."}, {"id": 86, "string": "Hyperparameters are tuned on the development set (see Section 4)."}, {"id": 87, "string": "Features."}, {"id": 88, "string": "TUPA Sparse uses binary indicator features representing the words, POS tags, syntactic dependency labels and existing edge labels related to the top four stack elements and the next three buffer elements, in addition to their children and grandchildren in the graph."}, {"id": 89, "string": "We also use bi-and trigram features based on these values (Zhang and Clark, 2009; Zhu et al., 2013) , features related to discontinuous nodes (Maier, 2015 , including separating punctuation and gap type), features representing existing edges and the number of parents and children, as well as the past actions taken by the parser."}, {"id": 90, "string": "In addition, we use use a novel, UCCAspecific feature: number of remote children."}, {"id": 91, "string": "3 For TUPA MLP and TUPA BiLSTM , we replace all indicator features by a concatenation of the vector embeddings of all represented elements: words, 3 See Appendix A for a full list of used feature templates."}, {"id": 92, "string": "POS tags, syntactic dependency labels, edge labels, punctuation, gap type and parser actions."}, {"id": 93, "string": "These embeddings are initialized randomly."}, {"id": 94, "string": "We additionally use external word embeddings initialized with pre-trained word2vec vectors (Mikolov et al., 2013) , 4 updated during training."}, {"id": 95, "string": "In addition to dropout between NN layers, we apply word dropout (Kiperwasser and Goldberg, 2016) : with a certain probability, the embedding for a word is replaced with a zero vector."}, {"id": 96, "string": "We do not apply word dropout to the external word embeddings."}, {"id": 97, "string": "Finally, for all classifiers we add a novel realvalued feature to the input vector, ratio, corresponding to the ratio between the number of terminals to number of nodes in the graph G. This feature serves as a regularizer for the creation of new nodes, and should be beneficial for other transition-based constituency parsers too."}, {"id": 98, "string": "Training."}, {"id": 99, "string": "For training the transition classifiers, we use a dynamic oracle (Goldberg and Nivre, 2012) , i.e., an oracle that outputs a set of optimal transitions: when applied to the current parser state, the gold standard graph is reachable from the resulting state."}, {"id": 100, "string": "For example, the oracle would predict a NODE transition if the stack has on its top a parent in the gold graph that has not been created, but would predict a RIGHT-EDGE transition if the second stack element is a parent of the first element according to the gold graph and the edge between them has not been created."}, {"id": 101, "string": "The transition predicted by the classifier is deemed correct and is applied to the parser state to reach the subsequent state, if the transition is included in the set of optimal transitions."}, {"id": 102, "string": "Otherwise, a random optimal transition is applied, and for the perceptron- according to the perceptron update rule."}, {"id": 103, "string": "POS tags and syntactic dependency labels are extracted using spaCy (Honnibal and Johnson, 2015) ."}, {"id": 104, "string": "5 We use the categorical cross-entropy objective function and optimize the NN classifiers with the Adam optimizer (Kingma and Ba, 2014)."}, {"id": 105, "string": "UCCA edges can cross sentence boundaries, we adhere to the common practice in semantic parsing and train our parsers on individual sentences, discarding inter-relations between them (0.18% of the edges)."}, {"id": 106, "string": "We also discard linkage nodes and edges (as they often express inter-sentence relations and are thus mostly redundant when applied at the sentence level) as well as implicit nodes."}, {"id": 107, "string": "7 In the out-of-domain experiments, we apply the same parsers (trained on the Wiki training set) to the 20K Leagues corpus without parameter re-tuning."}, {"id": 108, "string": "Implementation."}, {"id": 109, "string": "We use the DyNet package (Neubig et al., 2017) for implementing the NN classifiers."}, {"id": 110, "string": "Unless otherwise noted, we use the default values provided by the package."}, {"id": 111, "string": "See Appendix C for the hyperparameter values we found by tuning on the development set."}, {"id": 112, "string": "Evaluation."}, {"id": 113, "string": "We define a simple measure for comparing UCCA structures G p = (V p , E p , p ) and G g = (V g , E g , g ), the predicted and goldstandard graphs, respectively, over the same sequence of terminals W = {w 1 , ."}, {"id": 114, "string": "."}, {"id": 115, "string": "."}, {"id": 116, "string": ", w n }."}, {"id": 117, "string": "For an edge e = (u, v) in either graph, u being the parent and v the child, its yield y(e) \u2286 W is the set of terminals in W that are descendants of v. Define the set of mutual edges between G p and G g : M (Gp, Gg) = {(e1, e2) \u2208 Ep \u00d7 Eg | y(e1) = y(e2) \u2227 p(e1) = g (e2)} Labeled precision and recall are defined by dividing |M (G p , G g )| by |E p | and |E g |, respectively, and F-score by taking their harmonic mean."}, {"id": 118, "string": "We report two variants of this measure: one where we consider only primary edges, and another for remote edges (see Section 2)."}, {"id": 119, "string": "Performance on remote edges is of pivotal importance in this investigation, which focuses on extending the class of graphs supported by statistical parsers."}, {"id": 120, "string": "We note that the measure collapses to the standard PARSEVAL constituency evaluation measure if G p and G g are trees."}, {"id": 121, "string": "Punctuation is excluded from the evaluation, but not from the datasets."}, {"id": 122, "string": "Comparison to bilexical graph parsers."}, {"id": 123, "string": "As no direct comparison with existing parsers is possible, we compare TUPA to bilexical dependency graph parsers, which support reentrancy and discontinuity but not non-terminal nodes."}, {"id": 124, "string": "To facilitate the comparison, we convert our training set into bilexical graphs (see examples in Figure 4 ), train each of the parsers, and evaluate them by applying them to the test set and then reconstructing UCCA graphs, which are compared with the gold standard."}, {"id": 125, "string": "The conversion to bilexical graphs is done by heuristically selecting a head terminal for each non-terminal node, and attaching all terminal descendents to the head terminal."}, {"id": 126, "string": "In the inverse conversion, we traverse the bilexical graph in topological order, creating non-terminal parents for all terminals, and attaching them to the previously-created non-terminals corresponding to the bilexical heads."}, {"id": 127, "string": "8 In Section 5 we report the upper bounds on the achievable scores due to the error resulting from the removal of non-terminal nodes."}, {"id": 128, "string": "Comparison to tree parsers."}, {"id": 129, "string": "For completeness, and as parsing technology is considerably more 8 See Appendix D for a detailed description of the conversion procedures."}, {"id": 130, "string": "mature for tree (rather than graph) parsing, we also perform a tree approximation experiment, converting UCCA to (bilexical) trees and evaluating constituency and dependency tree parsers on them (see examples in Figure 5 )."}, {"id": 131, "string": "Our approach is similar to the tree approximation approach used for dependency graph parsing (Agi\u0107 et al., 2015; Fern\u00e1ndez-Gonz\u00e1lez and Martins, 2015) , where dependency graphs were converted into dependency trees and then parsed by dependency tree parsers."}, {"id": 132, "string": "In our setting, the conversion to trees consists simply of removing remote edges from the graph, and then to bilexical trees by applying the same procedure as for bilexical graphs."}, {"id": 133, "string": "Baseline parsers."}, {"id": 134, "string": "We evaluate two bilexical graph semantic dependency parsers: DAGParser (Ribeyre et al., 2014) , the leading transition-based parser in SemEval 2014 (Oepen et al., 2014) and TurboParser (Almeida and Martins, 2015), a graph-based parser from SemEval 2015 ; UPARSE (Maier and Lichte, 2016) , a transition-based constituency parser supporting discontinuous constituents; and two bilexical tree parsers: MaltParser (Nivre et al., 2007) , and the stack LSTM-based parser of Dyer et al."}, {"id": 135, "string": "(2015, henceforce \"LSTM Parser\")."}, {"id": 136, "string": "Default settings are used in all cases."}, {"id": 137, "string": "9 DAGParser and UPARSE use beam search by default, with a beam size of 5 and 4 respectively."}, {"id": 138, "string": "The other parsers are greedy."}, {"id": 139, "string": "flecting the error resulting from the conversion."}, {"id": 140, "string": "10 DAGParser and UPARSE are most directly comparable to TUPA Sparse , as they also use a perceptron classifier with sparse features."}, {"id": 141, "string": "TUPA Sparse considerably outperforms both, where DAGParser does not predict any remote edges in the out-ofdomain setting."}, {"id": 142, "string": "TurboParser fares worse in this comparison, despite somewhat better results on remote edges."}, {"id": 143, "string": "The LSTM parser of Dyer et al."}, {"id": 144, "string": "(2015) obtains the highest primary F-score among the baseline parsers, with a considerable margin."}, {"id": 145, "string": "Results Using a feedforward NN and embedding features, TUPA MLP obtains higher scores than TUPA Sparse , but is outperformed by the LSTM parser on primary edges."}, {"id": 146, "string": "However, using better input encoding allowing virtual look-ahead and look-behind in the token representation, TUPA BiLSTM obtains substantially higher scores than TUPA MLP and all other parsers, on both primary and remote edges, both in the in-domain and out-of-domain settings."}, {"id": 147, "string": "Its performance in absolute terms, of 73.5% F-score on primary edges, is encouraging in light of UCCA's inter-annotator agreement of 80-85% F-score on them (Abend and Rappoport, 2013) ."}, {"id": 148, "string": "The parsers resulting from tree approximation 10 The low upper bound for remote edges is partly due to the removal of implicit nodes (not supported in bilexical representations), where the whole sub-graph headed by such nodes, often containing remote edges, must be discarded."}, {"id": 149, "string": "are unable to recover any remote edges, as these are removed in the conversion."}, {"id": 150, "string": "11 The bilexical DAG parsers are quite limited in this respect as well."}, {"id": 151, "string": "While some of the DAG parsers' difficulty can be attributed to the conversion upper bound of 58.3%, this in itself cannot account for their poor performance on remote edges, which is an order of magnitude lower than that of TUPA BiLSTM ."}, {"id": 152, "string": "Related Work While earlier work on anchored 12 semantic parsing has mostly concentrated on shallow semantic analysis, focusing on semantic role labeling of verbal argument structures, the focus has recently shifted to parsing of more elaborate representations that account for a wider range of phenomena ."}, {"id": 153, "string": "Grammar-Based Parsing."}, {"id": 154, "string": "Linguistically expressive grammars such as HPSG (Pollard and Sag, 1994) , CCG (Steedman, 2000) and TAG (Joshi and Schabes, 1997) provide a theory of the syntax-semantics interface, and have been used as a basis for semantic parsers by defining com- 11 We also experimented with a simpler version of TUPA lacking REMOTE transitions, obtaining an increase of up to 2 labeled F-score points on primary edges, at the cost of not being able to predict remote edges."}, {"id": 155, "string": "12 By anchored we mean that the semantic representation directly corresponds to the words and phrases of the text."}, {"id": 156, "string": "positional semantics on top of them (Flickinger, 2000; Bos, 2005, among others) ."}, {"id": 157, "string": "Depending on the grammar and the implementation, such semantic parsers can support some or all of the structural properties UCCA exhibits."}, {"id": 158, "string": "Nevertheless, this line of work differs from our approach in two important ways."}, {"id": 159, "string": "First, the representations are different."}, {"id": 160, "string": "UCCA does not attempt to model the syntaxsemantics interface and is thus less coupled with syntax."}, {"id": 161, "string": "Second, while grammar-based parsers explicitly model syntax, our approach directly models the relation between tokens and semantic structures, without explicit composition rules."}, {"id": 162, "string": "Broad-Coverage Semantic Parsing."}, {"id": 163, "string": "Most closely related to this work is Broad-Coverage Semantic Dependency Parsing (SDP), addressed in two SemEval tasks (Oepen et al., 2014 ."}, {"id": 164, "string": "Like UCCA parsing, SDP addresses a wide range of semantic phenomena, and supports discontinuous units and reentrancy."}, {"id": 165, "string": "In SDP, however, bilexical dependencies are used, and a head must be selected for every relation-even in constructions that have no clear head, such as coordination (Ivanova et al., 2012) ."}, {"id": 166, "string": "The use of non-terminal nodes is a simple way to avoid this liability."}, {"id": 167, "string": "SDP also differs from UCCA in the type of distinctions it makes, which are more tightly coupled with syntactic considerations, where UCCA aims to capture purely semantic cross-linguistically applicable notions."}, {"id": 168, "string": "For instance, the \"poss\" label in the DM target representation is used to annotate syntactic possessive constructions, regardless of whether they correspond to semantic ownership (e.g., \"John's dog\") or other semantic relations, such as marking an argument of a nominal predicate (e.g., \"John's kick\")."}, {"id": 169, "string": "UCCA reflects the difference between these constructions."}, {"id": 170, "string": "Recent interest in SDP has yielded numerous works on graph parsing (Ribeyre et al., 2014; Almeida and Martins, 2015; Du et al., 2015) , including tree approximation (Agi\u0107 and Koller, 2014; Schluter et al., 2014) and joint syntactic/semantic parsing (Henderson et al., 2013; Swayamdipta et al., 2016) ."}, {"id": 171, "string": "Abstract Meaning Representation."}, {"id": 172, "string": "Another line of work addresses parsing into AMRs Vanderwende et al., 2015; Pust et al., 2015; Artzi et al., 2015) , which, like UCCA, abstract away from syntactic distinctions and represent meaning directly, using OntoNotes predi-cates (Weischedel et al., 2013) ."}, {"id": 173, "string": "Events in AMR may also be evoked by non-verbal predicates, including possessive constructions."}, {"id": 174, "string": "Unlike in UCCA, the alignment between AMR concepts and the text is not explicitly marked."}, {"id": 175, "string": "While sharing much of this work's motivation, not anchoring the representation in the text complicates the parsing task, as it requires the alignment to be automatically (and imprecisely) detected."}, {"id": 176, "string": "Indeed, despite considerable technical effort Pourdamghani et al., 2014; Werling et al., 2015) , concept identification is only about 80%-90% accurate."}, {"id": 177, "string": "Furthermore, anchoring allows breaking down sentences into semantically meaningful sub-spans, which is useful for many applications (Fern\u00e1ndez-Gonz\u00e1lez and Martins, 2015; Birch et al., 2016) ."}, {"id": 178, "string": "Several transition-based AMR parsers have been proposed: CAMR assumes syntactically parsed input, processing dependency trees into AMR (Wang et al., 2015a (Wang et al., ,b, 2016 Goodman et al., 2016) ."}, {"id": 179, "string": "In contrast, the parsers of Damonte et al."}, {"id": 180, "string": "(2017) and Zhou et al."}, {"id": 181, "string": "(2016) do not require syntactic pre-processing."}, {"id": 182, "string": "Damonte et al."}, {"id": 183, "string": "(2017) perform concept identification using a simple heuristic selecting the most frequent graph for each token, and Zhou et al."}, {"id": 184, "string": "(2016) perform concept identification and parsing jointly."}, {"id": 185, "string": "UCCA parsing does not require separately aligning the input tokens to the graph."}, {"id": 186, "string": "TUPA creates non-terminal units as part of the parsing process."}, {"id": 187, "string": "Furthermore, existing transition-based AMR parsers are not general DAG parsers."}, {"id": 188, "string": "They are only able to predict a subset of reentrancies and discontinuities, as they may remove nodes before their parents have been predicted (Damonte et al., 2017) ."}, {"id": 189, "string": "They are thus limited to a sub-class of AMRs in particular, and specifically cannot produce arbitrary DAG parses."}, {"id": 190, "string": "TUPA's transition set, on the other hand, allows general DAG parsing."}, {"id": 191, "string": "13 Conclusion We present TUPA, the first parser for UCCA."}, {"id": 192, "string": "Evaluated in in-domain and out-of-domain settings, we show that coupled with a NN classifier and BiLSTM feature extractor, it accurately predicts UCCA graphs from text, outperforming a variety of strong baselines by a margin."}, {"id": 193, "string": "Despite the recent diversity of semantic pars-ing work, the effectiveness of different approaches for structurally and semantically different schemes is not well-understood (Kuhlmann and Oepen, 2016) ."}, {"id": 194, "string": "Our contribution to this literature is a general parser that supports multiple parents, discontinuous units and non-terminal nodes."}, {"id": 195, "string": "Future work will evaluate TUPA in a multilingual setting, assessing UCCA's cross-linguistic applicability."}, {"id": 196, "string": "We will also apply the TUPA transition scheme to different target representations, including AMR and SDP, exploring the limits of its generality."}, {"id": 197, "string": "In addition, we will explore different conversion procedures (Kong et al., 2015) to compare different representations, suggesting ways for a data-driven design of semantic annotation."}, {"id": 198, "string": "A parser for UCCA will enable using the framework for new tasks, in addition to existing applications such as machine translation evaluation (Birch et al., 2016) ."}, {"id": 199, "string": "We believe UCCA's merits in providing a cross-linguistically applicable, broadcoverage annotation will support ongoing efforts to incorporate deeper semantic structures into various applications, such as sentence simplification (Narayan and Gardent, 2014) and summarization (Liu et al., 2015) ."}], "headers": [{"section": "Introduction", "n": "1", "start": 0, "end": 45}, {"section": "Transition-based UCCA Parsing", "n": "3", "start": 46, "end": 144}, {"section": "Results", "n": "5", "start": 145, "end": 151}, {"section": "Related Work", "n": "6", "start": 152, "end": 190}, {"section": "Conclusion", "n": "7", "start": 191, "end": 199}], "figures": [{"filename": "../figure/image/1076-Figure4-1.png", "caption": "Figure 4: Bilexical graph approximation (dependency graph) for the sentences in Figure 1.", "page": 5, "bbox": {"x1": 79.67999999999999, "x2": 285.12, "y1": 62.879999999999995, "y2": 202.56}}, {"filename": "../figure/image/1076-Figure5-1.png", "caption": "Figure 5: Tree approximation (constituency) for the sentence in Figure 1a (top), and bilexical tree approximation (dependency) for the same sentence (bottom). These are identical to the original graphs, apart from the removal of remote edges.", "page": 5, "bbox": {"x1": 314.88, "x2": 520.3199999999999, "y1": 61.44, "y2": 195.84}}, {"filename": "../figure/image/1076-Table2-1.png", "caption": "Table 2: Experimental results, in percents, on the Wiki test set (left) and the 20K Leagues set (right). Columns correspond to labeled precision, recall and F-score, for both primary and remote edges. F-score upper bounds are reported for the conversions. For the tree approximation experiments, only primary edges scores are reported, as they are unable to predict remote edges. TUPABiLSTM obtains the highest F-scores in all metrics, surpassing the bilexical parsers, tree parsers and other classifiers.", "page": 6, "bbox": {"x1": 72.0, "x2": 520.3199999999999, "y1": 61.44, "y2": 296.15999999999997}}, {"filename": "../figure/image/1076-Figure2-1.png", "caption": "Figure 2: The transition set of TUPA. We write the stack with its top to the right and the buffer with its head to the left. (\u00b7, \u00b7)X denotes a primary X-labeled edge, and (\u00b7, \u00b7)\u2217X a remote X-labeled edge. i(x) is a running index for the created nodes. In addition to the specified conditions, the prospective child in an EDGE transition must not already have a primary parent.", "page": 3, "bbox": {"x1": 72.0, "x2": 533.28, "y1": 62.879999999999995, "y2": 189.12}}, {"filename": "../figure/image/1076-Table1-1.png", "caption": "Table 1: Statistics of the Wiki and 20K Leagues UCCA corpora. All counts exclude the root node, implicit nodes, and linkage nodes and edges.", "page": 4, "bbox": {"x1": 308.64, "x2": 532.3199999999999, "y1": 61.44, "y2": 236.16}}, {"filename": "../figure/image/1076-Figure3-1.png", "caption": "Figure 3: Illustration of the TUPA model. Top: parser state (stack, buffer and intermediate graph). Bottom: TUPABiLTSM architecture. Vector representation for the input tokens is computed by two layers of bidirectional LSTMs. The vectors for specific tokens are concatenated with embedding and numeric features from the parser state (for existing edge labels, number of children, etc.), and fed into the MLP for selecting the next transition.", "page": 4, "bbox": {"x1": 72.0, "x2": 296.15999999999997, "y1": 66.72, "y2": 371.52}}]}