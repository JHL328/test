{"title": "Arc-Hybrid Non-Projective Dependency Parsing with a Static-Dynamic Oracle", "abstract": "We extend the arc-hybrid transition system for dependency parsing with a SWAP transition that enables reordering of the words and construction of non-projective trees. Although this extension potentially breaks the arc-decomposability of the transition system, we show that the existing dynamic oracle can be modified and combined with a static oracle for the SWAP transition. Experiments on five languages with different degrees of non-projectivity show that the new system gives competitive accuracy and is significantly better than a system trained with a purely static oracle.", "text": [{"id": 0, "string": "Introduction Non-projective sentences are a notorious problem in dependency parsing."}, {"id": 1, "string": "Traditional algorithms like those developed by Nivre (2003 Nivre ( , 2004 for transition-based parsing only allow the construction of projective trees."}, {"id": 2, "string": "These algorithms make use of a stack, a buffer and a set of arcs, and parsing consists of performing a sequence of transitions on these structures."}, {"id": 3, "string": "Traditional algorithms have been extended in different ways to allow the construction of non-projective trees (Nivre and Nilsson, 2005; Attardi, 2006; Nivre, 2007; G\u00f3mez-Rodr\u00edguez and Nivre, 2010) ."}, {"id": 4, "string": "One method proposed by Nivre (2009) is based on the idea of word reordering."}, {"id": 5, "string": "This is achieved by adding a transition that swaps two items in the data structures used, enabling the construction of arbitrary non-projective trees while still only adding arcs between adjacent words (after possible reordering)."}, {"id": 6, "string": "This technique was previously used in the arc-standard transition system (Nivre, 2004) ."}, {"id": 7, "string": "The first contribution of this paper is to show that it can also be combined with the arc-hybrid system proposed by Kuhlmann et al."}, {"id": 8, "string": "(2011) ."}, {"id": 9, "string": "Recent advances in dependency parsing have demonstrated the benefit of using dynamic oracles for training dependency parsers (Goldberg and Nivre, 2013) ."}, {"id": 10, "string": "Traditionally, parsers were trained in a static way and were only exposed to configurations resulting from optimal transitions during training."}, {"id": 11, "string": "Dynamic oracles define optimal transition sequences for any configuration in which the parser may be."}, {"id": 12, "string": "The use of dynamic oracles enables training with exploration of errors, which mitigates the problem of error propagation at prediction time."}, {"id": 13, "string": "In order to define a dynamic oracle, we need to be able to compute the cost of any transition in any configuration, where cost is usually defined as minimum Hamming loss with respect to the best tree reachable from that configuration."}, {"id": 14, "string": "Goldberg and Nivre (2013) showed that this computation is straightforward for transition systems that satisfy the property of arc-decomposability, meaning that a tree is reachable from a configuration if and only if every arc in the tree is reachable in itself."}, {"id": 15, "string": "Based on this result, they defined dynamic oracles for the arc-eager (Nivre, 2003) , arc-hybrid (Kuhlmann et al., 2011) and easy-first (Goldberg and Elhadad, 2010) systems."}, {"id": 16, "string": "Transition systems that allow non-projective trees are in general not arc-decomposable and therefore require different methods for constructing dynamic oracles (G\u00f3mez-Rodr\u00edguez and Fern\u00e1ndez-Gonz\u00e1lez, 2015) ."}, {"id": 17, "string": "The online reordering system of Nivre (2009) is furthermore based on the arc-standard system, which is not even arc-decomposable in itself (Goldberg and Nivre, 2013) ."}, {"id": 18, "string": "The second contribution of this paper is to show that we can take advantage of the arcdecomposability of the arc-hybrid transition system and extend the existing dynamic oracle to deal with the added swap transition."}, {"id": 19, "string": "The resulting or-acle is static with respect to the new transition but remains dynamic for all other transitions."}, {"id": 20, "string": "We show experimentally that this static-dynamic oracle gives a significant advantage over the alternative static oracle and results in competitive results for non-projective parsing."}, {"id": 21, "string": "An Extended Transition System The arc-hybrid system has configurations of the form c = (\u03a3, B, A), where \u2022 \u03a3 is a stack (represented as a list with the head to the right), \u2022 B is a buffer (represented as a list with the head to the left), \u2022 A is a set of dependency arcs (represented as (h, d) pairs)."}, {"id": 22, "string": "1 Given a sentence W = w 1 , ."}, {"id": 23, "string": "."}, {"id": 24, "string": "."}, {"id": 25, "string": ", w n , the system is initialized to: c 0 = ([ ], [1, ."}, {"id": 26, "string": "."}, {"id": 27, "string": "."}, {"id": 28, "string": ", n, n+1], { }) where n+1 is a special root node, denoted r from now on."}, {"id": 29, "string": "Terminal configurations have the form: c = ([ ], [r], A) and the parse tree is given by the arc set A."}, {"id": 30, "string": "There are preconditions such that SHIFT is legal only if b = r, RIGHT only if |\u03a3| > 1 and LEFT only if |\u03a3| > 0."}, {"id": 31, "string": "In order to enforce that r has exactly one dependent, as required by some dependency grammar frameworks, we add a precondition such that LEFT is legal only if |\u03a3| = 1 or b = r. In the extended system, we add a SWAP transition to be able to construct non-projective trees using online reordering: \u2022 SWAP[(\u03c3|s 0 , b|\u03b2, A)] = (\u03c3, b|s 0 |\u03b2, A) There is a precondition making SWAP legal only if |\u03a3| > 0, |B| > 1 and s 0 < b."}, {"id": 32, "string": "3 The SWAP transition reorders nodes by moving the item on top of the stack (s 0 ) to the second position in the buffer, thus inverting the order of s 0 and b."}, {"id": 33, "string": "The SHIFT and SWAP transitions together implement a simple sorting algorithm, which allows us to permute the order of nodes arbitrarily."}, {"id": 34, "string": "As shown by (Nivre, 2009) , this implies that we can construct any non-projective tree by reordering and adding arcs between adjacent nodes using LEFT and RIGHT."}, {"id": 35, "string": "As already observed, the main advantage of the arc-hybrid system over the arc-standard system is that it is arc-decomposable, which allows us to construct a simple and efficient dynamic oracle."}, {"id": 36, "string": "The arc-eager system (Nivre, 2003) is also arcdecomposable but cannot be combined with SWAP because items on the stack in that system do not necessarily represent disjoint subtrees."}, {"id": 37, "string": "A Static-Dynamic Oracle The dynamic oracle for arc-hybrid parsing defined by Goldberg and Nivre (2013) computes the cost of a transition by counting the number of gold arcs that are made unreachable by applying that transition."}, {"id": 38, "string": "This presupposes that the system is arcdecomposable, a result that is proven in the same paper."}, {"id": 39, "string": "Our construction of an oracle for arc-hybrid parsing with online ordering is based on the conjecture that we can retain arc-decomposition by only making SWAP transitions that are necessary to make non-projective arcs reachable and by enforcing all such transitions."}, {"id": 40, "string": "Proving this conjecture is, however, outside the scope of this paper."}, {"id": 41, "string": "Auxiliary Functions and Notation We assume that gold trees are preprocessed at training time to compute the following information for each input node i: \u2022 PROJ(i) = the position of node i in the projective order."}, {"id": 42, "string": "4 \u2022 RDEPS(i) = the set of reachable dependents of i, initially all dependents of i."}, {"id": 43, "string": "\u2022 LEFT: C(LEFT) = |RDEPS(s 0 )| + [[h(s 0 ) = b and s 0 \u2208 RDEPS(h(s 0 ))]] Updates: Set RDEPS(s 0 ) = [ ] and remove s 0 from RDEPS(h(s 0 ))."}, {"id": 44, "string": "\u2022 RIGHT: C(RIGHT) = |RDEPS(s 0 )| + [[h(s 0 ) = s 1 and s 0 \u2208 RDEPS(h(s 0 ))]] Updates: Set RDEPS(s 0 ) = [ ] and remove s 0 from RDEPS(h(s 0 ))."}, {"id": 45, "string": "\u2022 SHIFT: We use h(i) to denote the head of a node i in the gold tree."}, {"id": 46, "string": "1."}, {"id": 47, "string": "If there exists a node i \u2208 B \u2212b such that b < i and PROJ(b) > PROJ(i): C(SHIFT) = 0 2."}, {"id": 48, "string": "Else: C(SHIFT) = |{d \u2208 RDEPS(b) | d \u2208 \u03a3}| + [[h(b) \u2208 \u03a3 \u2212s 0 and b \u2208 RDEPS(h(b))]] Updates: Remove b from RDEPS(h(b)) if h(b) \u2208 \u03a3 \u2212s 0 and remove d \u2208 \u03a3 from RDEPS(b)."}, {"id": 49, "string": "Static Oracle for SWAP Our oracle is fully dynamic with respect to SHIFT, LEFT and RIGHT but basically static with respect to SWAP."}, {"id": 50, "string": "This means that only optimal (zero cost) SWAP transitions are allowed during training and that we force the parser to apply the SWAP transition when needed."}, {"id": 51, "string": "Optimal: To prevent non-optimal SWAP transitions, we add a precondition so that SWAP is legal only if PROJ(s 0 ) > PROJ(b)."}, {"id": 52, "string": "Forced: To force necessary SWAP transitions, we bypass the oracle whenever PROJ(s 0 ) > PROJ(b)."}, {"id": 53, "string": "5 Dynamic Oracle Since we use a static oracle for SWAP transitions, these will always have zero cost."}, {"id": 54, "string": "The dynamic oracle thus only needs to define costs for the remaining three transitions."}, {"id": 55, "string": "To construct the oracle, we start from the old dynamic oracle for the projective system and extend it to account for the added flexibility introduced by SWAP."}, {"id": 56, "string": "Figure 1 defines the transition costs as well as the necessary updates to RDEPS after applying a transition."}, {"id": 57, "string": "\u2022 LEFT: Adding the arc (b, s 0 ) and popping s 0 from the stack means that s 0 will not be able to acquire a head different from b nor any of its reachable dependents."}, {"id": 58, "string": "In the old projective case, the loss was limited to a head in s 0 |\u03b2 and dependents in b|\u03b2, but because s 0 can potentially be swapped back to the buffer, we instead define reachability explicitly through RDEPS(s 0 ) (for dependents) and RDEPS(h(s 0 )) (for the head) and update these accordingly after applying the transition."}, {"id": 59, "string": "\u2022 RIGHT: Adding the arc (s 1 , s 0 ) and popping s 0 from the stack means that s 0 will not be able to acquire a head different from s 1 nor any of its reachable dependents."}, {"id": 60, "string": "In the old projective case, the loss was limited to a head and dependents in b|\u03b2, but because s 0 can potentially be swapped back to the buffer, we again define reachability explicitly through RDEPS(s 0 ) (for dependents) and RDEPS(h(s 0 )) (for the head) and update these accordingly after applying the transition."}, {"id": 61, "string": "1 2 3 4 s 1 s 0 b [ 1 2 ] \u03a3 [ 3 4 ] B RIGHT \u21d2 1 2 3 4 [ 1 ] \u03a3 [ 3 4 ] B SHIFT \u21d3 1 2 3 4 [ 1 2 3 ] \u03a3 [ 4 ] B 1 2 4 3 s 1 s 0 b [ 1 2 ] \u03a3 [ 4 3 ] B \u2022 SHIFT: In the projective case, shifting b onto the stack means that b will not be able to acquire a head in \u03a3 other than the top item s 0 nor any dependents in \u03a3."}, {"id": 62, "string": "With the SWAP transition and a static oracle, we also have to consider the case where b can later be swapped back to the buffer, in which case SHIFT has zero cost."}, {"id": 63, "string": "We therefore have two cases in Figure 1 ."}, {"id": 64, "string": "In the first case, no updates are needed."}, {"id": 65, "string": "In the second case, the updates are analogous to the old projective case."}, {"id": 66, "string": "To illustrate how the oracle works, let us look at some hypothetical configurations."}, {"id": 67, "string": "First, we can have a situation as in the top left corner of Figure 2 , where all nodes are in projective order given the gold tree displayed above the nodes."}, {"id": 68, "string": "For simplicity, the nodes are named after their projective order."}, {"id": 69, "string": "Applying a RIGHT transition in this configuration makes it impossible for s 0 (2) to be attached to its head (3) and therefore makes us lose the arc 3 \u2192 2, as shown in the top right corner."}, {"id": 70, "string": "If we instead apply a SHIFT transition, we lose the arc between b (3) and its head (1) as well as the arc 3 \u2192 2, as shown in the bottom left corner."}, {"id": 71, "string": "By contrast, a LEFT transition has zero cost, because no arcs are lost so the best tree reachable in the orig-inal configuration is still reachable after applying the LEFT transition."}, {"id": 72, "string": "Consider now a configuration, like the one in the bottom right corner of Figure 2 , where the nodes are not in projective order."}, {"id": 73, "string": "Here we can shift b (4) onto the stack without cost, because it will later be swapped back to the buffer to restore the projective order between 4 and 3."}, {"id": 74, "string": "A RIGHT transition makes us lose the head and dependent of s 0 (4 \u2192 2 and 2 \u2192 3)."}, {"id": 75, "string": "A LEFT transition makes us lose the dependent of s 0 (2 \u2192 3) ."}, {"id": 76, "string": "The combination of a dynamic oracle for LEFT, RIGHT and SHIFT with a static oracle for SWAP allows us to benefit from training with exploration in most situations and at the same time capture nonprojective dependencies."}, {"id": 77, "string": "Experiments We extend the parser we used in de Lhoneux et al."}, {"id": 78, "string": "(2017), a greedy transition-based parser that predicts the dependency tree given the raw words of a sentence."}, {"id": 79, "string": "That parser is itself an extension of the parser developed by Kiperwasser and Goldberg (2016) ."}, {"id": 80, "string": "It relies on a BiLSTM to learn informative features of words in context and a feed-forward network for predicting the next parsing transition."}, {"id": 81, "string": "It learns vector representations of the words as well as characters."}, {"id": 82, "string": "Contrary to parsing tradition, it makes no use of part-of-speech tags."}, {"id": 83, "string": "We released our system as UUparser 2.0, available at https: //github.com/UppsalaNLP/uuparser."}, {"id": 84, "string": "We first compare our system, which uses our static-dynamic oracle, with the same system using a static oracle."}, {"id": 85, "string": "This is to find out if we can benefit from error exploration using our partially dynamic oracle."}, {"id": 86, "string": "We use the same set of hyperparameters as in that paper in all our experiments."}, {"id": 87, "string": "We additionally compare our method to a different approach to handling non-projectivity, pseudo-projective parsing, as performed in de Lhoneux et al."}, {"id": 88, "string": "(2017) ."}, {"id": 89, "string": "Pseudo-projective parsing was developed by Nivre and Nilsson (2005) ."}, {"id": 90, "string": "In a pre-processing step, the training data is projectivised: some nodes get reattached to a close parent."}, {"id": 91, "string": "Parsed data are then 'deprojectivised' in a post-processing step."}, {"id": 92, "string": "In order for information about non-projectivity to be recoverable after parsing, when projectivising, arcs are renamed to encode information about the original parent of dependents which get re-attached."}, {"id": 93, "string": "Note that hyperparameters were tweaked for the pseudo-projective system, possibly giving an unfair advantage."}, {"id": 94, "string": "Lastly, we compare to a projective baseline, using a dynamic oracle but no SWAP transition."}, {"id": 95, "string": "6 This is to find out the extent to which dealing with non-projectivity is important."}, {"id": 96, "string": "We selected a sample of 5 treebanks from the Universal Dependencies CoNLL 2017 shared task data ."}, {"id": 97, "string": "We selected languages to have different frequencies of non-projectivity, both at the sentence level and at the level of individual arcs, ranging from a very high frequency (Ancient-Greek) to a low frequency (English), as well as some typological variety."}, {"id": 98, "string": "Non-projective frequencies were taken from Straka et al."}, {"id": 99, "string": "(2015) and are included in Table 1 , which report our results on the development sets (best out of 20 epochs)."}, {"id": 100, "string": "Comparing to the static baseline, we can verify that our static-dynamic oracle really preserves the benefits of training with error exploration, with improvements ranging from 0.5 to 3.5 points."}, {"id": 101, "string": "(All differences here are statistically significant with p<0.01, except for Portuguese, where the difference is statistically significant with p<0.05 according to the McNemar test)."}, {"id": 102, "string": "The new system achieves results largely on par with the pseudo-projective parser."}, {"id": 103, "string": "Our method is better by a small margin for 3 out of 5 languages Table 1 : LAS on dev sets with gold tokenization for our static-dynamic system (S-Dy), the static and projective baselines (Static, Proj) and the pseudo-projective system of de Lhoneux et al."}, {"id": 104, "string": "(2017) (PProj)."}, {"id": 105, "string": "%NP = percentage of nonprojective arcs/sentences."}, {"id": 106, "string": "and worse by a large margin for 1."}, {"id": 107, "string": "Overall, these results are encouraging given that our method is simpler and more efficient to train, with no need for pre-or post-processing and no extension of the dependency label set."}, {"id": 108, "string": "7 Comparing to the projective baseline, we see that strictly projective parsing can be slightly better than both online reordering and pseudoprojective parsing for a language with few non-projective arcs/sentences like English."}, {"id": 109, "string": "For all other languages, we see small (Arabic) to big (Ancient Greek) improvements from dealing with non-projectivity in some way."}, {"id": 110, "string": "Conclusion We have shown how the SWAP transition for online reordering can be integrated into the archybrid transition system for dependency parsing in such a way that we still benefit from training with exploration using a static-dynamic oracle."}, {"id": 111, "string": "In the future, we intend to test this further by evaluating our model on more languages with proper tuning of hyperparameters."}, {"id": 112, "string": "We are also interested in the question of whether it is possible to define a fully dynamic oracle for our system and allow exploration for the SWAP transition too."}], "headers": [{"section": "Introduction", "n": "1", "start": 0, "end": 20}, {"section": "An Extended Transition System", "n": "2", "start": 21, "end": 36}, {"section": "A Static-Dynamic Oracle", "n": "3", "start": 37, "end": 40}, {"section": "Auxiliary Functions and Notation", "n": "3.1", "start": 41, "end": 48}, {"section": "Static Oracle for SWAP", "n": "3.2", "start": 49, "end": 52}, {"section": "Dynamic Oracle", "n": "3.3", "start": 53, "end": 76}, {"section": "Experiments", "n": "4", "start": 77, "end": 108}, {"section": "Conclusion", "n": "5", "start": 109, "end": 112}], "figures": [{"filename": "../figure/image/1069-Figure1-1.png", "caption": "Figure 1: Transition costs and updates. Expressions of the form [[\u03a6]] evaluate to 1 if \u03a6 is true, 0 otherwise. We use s0 and s1 to refer to the top and second top item of the stack respectively and we use b to denote the first item of the buffer. \u03a3 refers to the stack and \u03a3\u2212s0 to the stack excluding s0 (if \u03a3 is not empty). B refers to the buffer and B\u2212b to the buffer excluding b.", "page": 2, "bbox": {"x1": 72.0, "x2": 533.28, "y1": 62.879999999999995, "y2": 321.12}}, {"filename": "../figure/image/1069-Table1-1.png", "caption": "Table 1: LAS on dev sets with gold tokenization for our static-dynamic system (S-Dy), the static and projective baselines (Static, Proj) and the pseudo-projective system of de Lhoneux et al. (2017) (PProj). %NP = percentage of nonprojective arcs/sentences.", "page": 4, "bbox": {"x1": 309.59999999999997, "x2": 523.1999999999999, "y1": 61.44, "y2": 144.96}}, {"filename": "../figure/image/1069-Figure2-1.png", "caption": "Figure 2: Top left: Configuration with all nodes in projective order and gold tree displayed above the nodes. Top right: Gold arc lost (the red dotted arc) when applying a RIGHT transition from the top left configuration. The arc added by the transition is in blue, it is not in the gold tree. Bottom left: Gold arcs lost (the red dotted arcs) when applying a SHIFT transition from the top left configuration. Bottom right: Configuration where b is higher in the projective order than a following node in the buffer.", "page": 3, "bbox": {"x1": 190.07999999999998, "x2": 407.52, "y1": 65.75999999999999, "y2": 232.79999999999998}}]}