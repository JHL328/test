{"title": "A Polynomial-Time Dynamic Programming Algorithm for Phrase-Based Decoding with a Fixed Distortion Limit", "abstract": "Decoding of phrase-based translation models in the general case is known to be NPcomplete, by a reduction from the traveling salesman problem (Knight, 1999) . In practice, phrase-based systems often impose a hard distortion limit that limits the movement of phrases during translation. However, the impact on complexity after imposing such a constraint is not well studied. In this paper, we describe a dynamic programming algorithm for phrase-based decoding with a fixed distortion limit. The runtime of the algorithm is O(nd!lh d+1 ) where n is the sentence length, d is the distortion limit, l is a bound on the number of phrases starting at any position in the sentence, and h is related to the maximum number of target language translations for any source word. The algorithm makes use of a novel representation that gives a new perspective on decoding of phrase-based models. 59", "text": [{"id": 0, "string": "Introduction Phrase-based translation models (Koehn et al., 2003; Och and Ney, 2004) are widely used in statistical machine translation."}, {"id": 1, "string": "The decoding problem for phrase-based translation models is known to be difficult: the results from Knight (1999) imply that in the general case decoding of phrase-based translation models is NP-complete."}, {"id": 2, "string": "The complexity of phrase-based decoding comes from reordering of phrases."}, {"id": 3, "string": "In practice, however, various constraints on reordering are often imposed in phrase-based translation systems."}, {"id": 4, "string": "A common constraint is a \"distortion limit\", which places a hard constraint on how far phrases can move."}, {"id": 5, "string": "The complexity of decoding with such a distortion limit is an open question: the NP-hardness result from Knight * On leave from Columbia University."}, {"id": 6, "string": "(1999) applies to a phrase-based model with no distortion limit."}, {"id": 7, "string": "This paper describes an algorithm for phrasebased decoding with a fixed distortion limit whose runtime is linear in the length of the sentence, and for a fixed distortion limit is polynomial in other factors."}, {"id": 8, "string": "More specifically, for a hard distortion limit d, and sentence length n, the runtime is O(nd!lh d+1 ), where l is a bound on the number of phrases starting at any point in the sentence, and h is related to the maximum number of translations for any word in the source language sentence."}, {"id": 9, "string": "The algorithm builds on the insight that decoding with a hard distortion limit is related to the bandwidth-limited traveling salesman problem (BTSP) (Lawler et al., 1985) ."}, {"id": 10, "string": "The algorithm is easily amenable to beam search."}, {"id": 11, "string": "It is quite different from previous methods for decoding of phrase-based models, potentially opening up a very different way of thinking about decoding algorithms for phrasebased models, or more generally for models in statistical NLP that involve reordering."}, {"id": 12, "string": "2 Related Work Knight (1999) proves that decoding of word-to-word translation models is NP-complete, assuming that there is no hard limit on distortion, through a reduction from the traveling salesman problem."}, {"id": 13, "string": "Phrasebased models are more general than word-to-word models, hence this result implies that phrase-based decoding with unlimited distortion is NP-complete."}, {"id": 14, "string": "Phrase-based systems can make use of both reordering constraints, which give a hard \"distortion limit\" on how far phrases can move, and reordering models, which give scores for reordering steps, often penalizing phrases that move long distances."}, {"id": 15, "string": "Moses (Koehn et al., 2007b ) makes use of a distortion limit, and a decoding algorithm that makes use of bit-strings representing which words have been translated."}, {"id": 16, "string": "We show in Section 5.2 of this paper that this can lead to at least 2 n/4 bit-strings for an input sentence of length n, hence an exhaustive version of this algorithm has worst-case runtime that is exponential in the sentence length."}, {"id": 17, "string": "The current paper is concerned with decoding phrase-based models with a hard distortion limit."}, {"id": 18, "string": "Various other reordering constraints have been considered."}, {"id": 19, "string": "Zens and Ney (2003) and Zens et al."}, {"id": 20, "string": "(2004) consider two types of hard constraints: the IBM constraints, and the ITG (inversion transduction grammar) constraints from the model of Wu (1997) ."}, {"id": 21, "string": "They give polynomial time dynamic programming algorithms for both of these cases."}, {"id": 22, "string": "It is important to note that the IBM and ITG constraints are different from the distortion limit constraint considered in the current paper."}, {"id": 23, "string": "Decoding algorithms with ITG constraints are further studied by Feng et al."}, {"id": 24, "string": "(2010) and Cherry et al."}, {"id": 25, "string": "(2012) ."}, {"id": 26, "string": "Kumar and Byrne (2005) describe a class of reordering constraints and models that can be encoded in finite state transducers."}, {"id": 27, "string": "Lopez (2009) shows that several translation models can be represented as weighted deduction problems and analyzes their complexities."}, {"id": 28, "string": "1 Koehn et al."}, {"id": 29, "string": "(2003) describe a beamsearch algorithm for phrase-based decoding that is in widespread use; see Section 5 for discussion."}, {"id": 30, "string": "A number of reordering models have been proposed, see for example Tillmann (2004) , Koehn et al."}, {"id": 31, "string": "(2007a) and Galley and Manning (2008) ."}, {"id": 32, "string": "DeNero and Klein (2008) consider the phrase alignment problem, that is, the problem of finding an optimal phrase-based alignment for a sourcelanguage/target-language sentence pair."}, {"id": 33, "string": "They show that in the general case, the phrase alignment problem is NP-hard."}, {"id": 34, "string": "It may be possible to extend the techniques in the current paper to the phrasealignment problem with a hard distortion limit."}, {"id": 35, "string": "Various methods for exact decoding of phrasebased translation models have been proposed."}, {"id": 36, "string": "Zaslavskiy et al."}, {"id": 37, "string": "(2009) describe the use of travel-1 An earlier version of this paper states the complexity of decoding with a distortion limit as O(I 3 2 d ) where d is the distortion limit and I is the number of words in the sentence; however (personal communication from Adam Lopez) this runtime is an error, and should be O(2 I ) i.e., exponential time in the length of the sentence."}, {"id": 38, "string": "A corrected version of the paper corrects this."}, {"id": 39, "string": "ing salesman algorithms for phrase-based decoding."}, {"id": 40, "string": "Chang and Collins (2011) describe an exact method based on Lagrangian relaxation."}, {"id": 41, "string": "Aziz et al."}, {"id": 42, "string": "(2014) describe a coarse-to-fine approach."}, {"id": 43, "string": "These algorithms all have exponential time runtime (in the length of the sentence) in the worst case."}, {"id": 44, "string": "Galley and Manning (2010) describe a decoding algorithm for phrase-based systems where phrases can have discontinuities in both the source and target languages."}, {"id": 45, "string": "The algorithm has some similarities to the algorithm we propose: in particular, it makes use of a state representation that contains a list of disconnected phrases."}, {"id": 46, "string": "However, the algorithms differ in several important ways: Galley and Manning (2010) make use of bit string coverage vectors, giving an exponential number of possible states; in contrast to our approach, the translations are not formed in strictly left-to-right ordering on the source side."}, {"id": 47, "string": "Background: The Traveling Salesman Problem on Bandwidth-Limited Graphs This section first defines the bandwidth-limited traveling salesman problem, then describes a polynomial time dynamic programming algorithm for the traveling salesman path problem on bandwidth limited graphs."}, {"id": 48, "string": "This algorithm is the algorithm proposed by Lawler et al."}, {"id": 49, "string": "(1985) 2 with small modifications to make the goal a path instead of a cycle, and to consider directed rather than undirected graphs."}, {"id": 50, "string": "Bandwidth-Limited TSPPs The input to the problem is a directed graph G = (V, E), where V is a set of vertices and E is a set of directed edges."}, {"id": 51, "string": "We assume that V = {1, 2, ."}, {"id": 52, "string": "."}, {"id": 53, "string": "."}, {"id": 54, "string": ", n}."}, {"id": 55, "string": "A directed edge is a pair (i, j) where i, j \u2208 V , and i = j."}, {"id": 56, "string": "Each edge (i, j) \u2208 E has an associated weight w i,j ."}, {"id": 57, "string": "Given an integer k \u2265 1, a graph is bandwidth-limited with bandwidth k if \u2200(i, j) \u2208 E, |i \u2212 j| \u2264 k The traveling salesman path problem (TSPP) on the graph G is defined as follows."}, {"id": 58, "string": "We will assume that vertex 1 is the \"source\" vertex and vertex n is the \"sink\" vertex."}, {"id": 59, "string": "The TSPP is to find the minimum cost directed path from vertex 1 to vertex n, which passes through each vertex exactly once."}, {"id": 60, "string": "An Algorithm for Bandwidth-Limited TSPPs The key idea of the dynamic-programming algorithm for TSPPs is the definition of equivalence classes corresponding to dynamic programming states, and an argument that the number of equivalence classes depends only on the bandwidth k. The input to our algorithm will be a directed graph G = (V, E), with weights w i,j , and with bandwidth k. We define a 1-n path to be any path from the source vertex 1 to the sink vertex n that visits each vertex in the graph exactly once."}, {"id": 61, "string": "A 1-n path is a subgraph (V , E ) of G, where V = V and E \u2286 E. We will make use of the following definition: Definition 1."}, {"id": 62, "string": "For any 1-n path H, define H j to be the subgraph that H induces on vertices 1, 2, ."}, {"id": 63, "string": "."}, {"id": 64, "string": "."}, {"id": 65, "string": "j, where 1 \u2264 j \u2264 n. That is, H j contains the vertices 1, 2, ."}, {"id": 66, "string": "."}, {"id": 67, "string": "."}, {"id": 68, "string": "j and the edges in H between these vertices."}, {"id": 69, "string": "For a given value for j, we divide the vertices V into three sets A j , B j and C j : \u2022 A j = {1, 2, ."}, {"id": 70, "string": "."}, {"id": 71, "string": "."}, {"id": 72, "string": ", (j \u2212 k)} (A j is the empty set if j \u2264 k)."}, {"id": 73, "string": "\u2022 B j = {1 ."}, {"id": 74, "string": "."}, {"id": 75, "string": "."}, {"id": 76, "string": "j} \\ A j ."}, {"id": 77, "string": "3 \u2022 C j = {j + 1, j + 2, ."}, {"id": 78, "string": "."}, {"id": 79, "string": "."}, {"id": 80, "string": ", n} (C j is the empty set if j = n)."}, {"id": 81, "string": "Note that the vertices in subgraph H j are the union of the sets A j and B j ."}, {"id": 82, "string": "A j is the empty set if j \u2264 k, but B j is always non-empty."}, {"id": 83, "string": "The following Lemma then applies: Lemma 1."}, {"id": 84, "string": "For any 1-n path H in a graph with bandwidth k, for any 1 \u2264 j \u2264 n, the subgraph H j has the following properties: 1."}, {"id": 85, "string": "If vertex 1 is in A j , then vertex 1 has degree one."}, {"id": 86, "string": "For any vertex v \u2208 A j with v \u2265 2, vertex v has degree two."}, {"id": 87, "string": "3."}, {"id": 88, "string": "H j contains no cycles."}, {"id": 89, "string": "Proof."}, {"id": 90, "string": "The first and second properties are true because of the bandwidth limit."}, {"id": 91, "string": "Under the constraint of bandwidth k, any edge (u, v) in H such that u \u2208 A j , must have v \u2208 A j \u222a B j = H j ."}, {"id": 92, "string": "This fol- lows because if v \u2208 C j = {j + 1, j + 2, ."}, {"id": 93, "string": "."}, {"id": 94, "string": "."}, {"id": 95, "string": "n} and u \u2208 A j = {1, 2, ."}, {"id": 96, "string": "."}, {"id": 97, "string": "."}, {"id": 98, "string": "j \u2212 k}, then |u \u2212 v| > k. Similarly any edge (u, v) \u2208 H such that v \u2208 A j must have u \u2208 A j \u222a B j = H j ."}, {"id": 99, "string": "It follows that for any vertex u \u2208 A j , with u > 1, there are edges (u, v) \u2208 H j and (v , u) \u2208 H j , hence vertex u has degree 2."}, {"id": 100, "string": "For vertex u \u2208 A j with u = 1, there is an edge (u, v) \u2208 H j , hence vertex u has degree 1."}, {"id": 101, "string": "The third property (no cycles) is true because H j is a subgraph of H, which has no cycles."}, {"id": 102, "string": "It follows that each connected component of H j is a directed path, that the start points of these paths are in the set {1} \u222a B j , and that the end points of these paths are in the set B j ."}, {"id": 103, "string": "We now define an equivalence relation on subgraphs."}, {"id": 104, "string": "Two subgraphs H j and H j are in the same equivalence class if the following conditions hold (taken from Lawler et al."}, {"id": 105, "string": "(1985) ): 1."}, {"id": 106, "string": "For any vertex v \u2208 B j , the degree of v in H j and H j is the same."}, {"id": 107, "string": "For each path (connected component) in H j there is a path in H j with the same start and end points, and conversely."}, {"id": 108, "string": "The significance of this definition is as follows."}, {"id": 109, "string": "Assume that H * is an optimal 1-n path in the graph, and that it induces the subgraph H j on vertices 1 ."}, {"id": 110, "string": "."}, {"id": 111, "string": "."}, {"id": 112, "string": "j."}, {"id": 113, "string": "Assume that H j is another subgraph over vertices 1 ."}, {"id": 114, "string": "."}, {"id": 115, "string": "."}, {"id": 116, "string": "j, which is in the same equivalence class as H j ."}, {"id": 117, "string": "For any subgraph H j , define c(H j ) to be the sum of edge weights in H j : c(H j ) = (u,v)\u2208H j w u,v Then it must be the case that c(H j ) \u2265 c(H j )."}, {"id": 118, "string": "Otherwise, we could simply replace H j by H j in H * , thereby deriving a new 1-n path with a lower cost, implying that H * is not optimal."}, {"id": 119, "string": "This observation underlies the dynamic programming approach."}, {"id": 120, "string": "Define \u03c3 to be a function that maps a subgraph H j to its equivalence class \u03c3(H j )."}, {"id": 121, "string": "The equivalence class \u03c3(H j ) is a data structure that stores the degrees of the vertices in B j , together with the start and end points of each connected component in H j ."}, {"id": 122, "string": "Next, define \u2206 to be a set of 0, 1 or 2 edges between vertex (j + 1) and the vertices in B j ."}, {"id": 123, "string": "For any subgraph H j+1 of a 1-n path, there is some \u2206, simply found by recording the edges incident to vertex (j + 1)."}, {"id": 124, "string": "For any H j , define \u03c4 (\u03c3(H j ), \u2206) to be the equivalence class resulting from adding the edges in \u2206 to the data structure \u03c3(H j )."}, {"id": 125, "string": "If adding the edges in \u2206 to \u03c3(H j ) results in an ill-formed subgraph-for example, a subgraph that has one or more cyclesthen \u03c4 (\u03c3(H j ), \u2206) is undefined."}, {"id": 126, "string": "The following recurrence then defines the dynamic program (see Eq."}, {"id": 127, "string": "20 of Lawler et al."}, {"id": 128, "string": "(1985) ): \u03b1(j + 1, S) = min \u2206,S :\u03c4 (S ,\u2206)=S \u03b1(j, S ) + c(\u2206) Here S is an equivalence class over vertices {1 ."}, {"id": 129, "string": "."}, {"id": 130, "string": "."}, {"id": 131, "string": "(j +1)}, and \u03b1(S, j +1) is the minimum score for any subgraph in equivalence class S. The min is taken over all equivalence classes S over vertices {1 ."}, {"id": 132, "string": "."}, {"id": 133, "string": "."}, {"id": 134, "string": "j}, together with all possible values for \u2206."}, {"id": 135, "string": "A Dynamic Programming Algorithm for Phrase-Based Decoding We now describe the dynamic programming algorithm for phrase-based decoding with a fixed distortion limit."}, {"id": 136, "string": "We first give basic definitions for phrasebased decoding, and then describe the algorithm."}, {"id": 137, "string": "Basic Definitions Consider decoding an input sentence consisting of words x 1 ."}, {"id": 138, "string": "."}, {"id": 139, "string": "."}, {"id": 140, "string": "x n for some integer n. We assume that x 1 = <s> and x n = </s> where <s> and </s> are the sentence start and end symbols respectively."}, {"id": 141, "string": "A phrase-based lexicon specifies a set of possible translations in the form of phrases p = (s, t, e), where s and t are integers such that 1 \u2264 s \u2264 t \u2264 n, and e is a sequence of m \u2265 1 target-language words e 1 ."}, {"id": 142, "string": "."}, {"id": 143, "string": "."}, {"id": 144, "string": "e m ."}, {"id": 145, "string": "This signifies that words x s ."}, {"id": 146, "string": "."}, {"id": 147, "string": "."}, {"id": 148, "string": "x t in the source language have a translation as e 1 ."}, {"id": 149, "string": "."}, {"id": 150, "string": "."}, {"id": 151, "string": "e m in the target language."}, {"id": 152, "string": "We use s(p), t(p) and e(p) to refer to the three components of a phrase p = (s, t, e), and e 1 (p) ."}, {"id": 153, "string": "."}, {"id": 154, "string": "."}, {"id": 155, "string": "e m (p) to refer to the words in the targetlanguage string e(p)."}, {"id": 156, "string": "We assume that (1, 1, <s>) and (n, n, </s>) are the only translation entries with s(p) \u2264 1 and t(p) \u2265 n respectively."}, {"id": 157, "string": "A derivation is then defined as follows: Definition 2 (Derivations)."}, {"id": 158, "string": "A derivation is a sequence of phrases p 1 ."}, {"id": 159, "string": "."}, {"id": 160, "string": "."}, {"id": 161, "string": "p L such that \u2022 p 1 = (1, 1, <s>) and p L = (n, n, </s>)."}, {"id": 162, "string": "\u2022 Each source word is translated exactly once."}, {"id": 163, "string": "\u2022 The distortion limit is satisfied for each pair of phrases p i\u22121 , p i , that is: |t(p i\u22121 ) + 1 \u2212 s(p i )| \u2264 d \u2200 i = 2 ."}, {"id": 164, "string": "."}, {"id": 165, "string": "."}, {"id": 166, "string": "L. where d is an integer specifying the distortion limit in the model."}, {"id": 167, "string": "Given a derivation p 1 ."}, {"id": 168, "string": "."}, {"id": 169, "string": "."}, {"id": 170, "string": "p L , a target-language translation can be obtained by concatenating the target-language strings e(p 1 ) ."}, {"id": 171, "string": "."}, {"id": 172, "string": "."}, {"id": 173, "string": "e(p L )."}, {"id": 174, "string": "The scoring function is defined as follows: f (p 1 ."}, {"id": 175, "string": "."}, {"id": 176, "string": "."}, {"id": 177, "string": "p L ) = \u03bb(e(p 1 ) ."}, {"id": 178, "string": "."}, {"id": 179, "string": "."}, {"id": 180, "string": "e(p L )) + L i=1 \u03ba(p i ) + L i=2 \u03b7 \u00d7 |t(p i\u22121 ) + 1 \u2212 s(p i )| (1) For each phrase p, \u03ba(p) is the translation score for the phrase."}, {"id": 181, "string": "The parameter \u03b7 is the distortion penalty, which is typically a negative constant."}, {"id": 182, "string": "\u03bb(e) is a language model score for the string e. We will assume a bigram language model: \u03bb(e 1 ."}, {"id": 183, "string": "."}, {"id": 184, "string": "."}, {"id": 185, "string": "e m ) = m i=2 \u03bb(e i |e i\u22121 )."}, {"id": 186, "string": "The generalization of our algorithm to higher-order n-gram language models is straightforward."}, {"id": 187, "string": "The goal of phrase-based decoding is to find y * = arg max y\u2208Y f (y) where Y is the set of valid derivations for the input sentence."}, {"id": 188, "string": "Remark (gap constraint): Note that a common restriction used in phrase-based decoding (Koehn et al., 2003; Chang and Collins, 2011) , is to impose an additional \"gap constraint\" while decoding."}, {"id": 189, "string": "See Chang and Collins (2011) for a description."}, {"id": 190, "string": "In this case it is impossible to have a dynamicprogramming state where word x i has not been translated, and where word x i+k has been translated, for k > d. This limits distortions further, and it can be shown in this case that the number of possible bitstrings is O(2 d ) where d is the distortion limit."}, {"id": 191, "string": "Without this constraint the algorithm of Koehn et al."}, {"id": 192, "string": "(2003) actually fails to produce translations for many input sentences (Chang and Collins, 2011) ."}, {"id": 193, "string": "H 1 = \u03c0 1 = 1, 1, <s> H 3 = \u03c0 1 = 1, 1, <s> 2, 3, we must H 4 = \u03c0 1 = 1, 1, <s> 2, 3, we must 4, 4, also H 6 = \u03c0 1 , \u03c0 2 = 1, 1, <s> 2, 3, we must 4, 4, also , 5, 6, these criticisms H 7 = \u03c0 1 , \u03c0 2 = 1, 1, <s> 2, 3, we must 4, 4, also , 5, 6, these criticisms 7, 7, seriously H 8 = \u03c0 1 = 1, 1, <s> 2, 3, we must 4, 4, also 8, 8, take 5, 6, these criticisms 7, 7, seriously H 9 = \u03c0 1 = 1, 1, <s> 2, 3, we must 4, 4, also 8, 8, take 5, 6, these criticisms 7, 7, seriously 9, 9, </s> 3, 4, 6, 7, 8, 9} induced by the full derivation H = (1, 1, <s>)(2, 3, we must)(4, 4, also)(8, 8, take)(5, 6, these criticisms)(7, 7, seriously)(9, 9</s>) ."}, {"id": 194, "string": "Note that H j includes the phrases that cover spans ending before or at position j. Sub-derivation H j is extended to another subderivation H j+i by incorporating a phrase of length i."}, {"id": 195, "string": "Figure 1: Sub-derivations H j for j \u2208 {1, The Algorithm We now describe the dynamic programming algorithm."}, {"id": 196, "string": "Intuitively the algorithm builds a derivation by processing the source-language sentence in strictly left-to-right order."}, {"id": 197, "string": "This is in contrast with the algorithm of Koehn et al."}, {"id": 198, "string": "(2007b) , where the targetlanguage sentence is constructed from left to right."}, {"id": 199, "string": "Throughout this section we will use \u03c0, or \u03c0 i for some integer i, to refer to a sequence of phrases: \u03c0 = p 1 ."}, {"id": 200, "string": "."}, {"id": 201, "string": "."}, {"id": 202, "string": "p l where each phrase p i = (s(p i ), t(p i ), e(p i )), as de- fined in the previous section."}, {"id": 203, "string": "We overload the s, t and e operators, so that if \u03c0 = p 1 ."}, {"id": 204, "string": "."}, {"id": 205, "string": "."}, {"id": 206, "string": "p l , we have s(\u03c0) = s(p 1 ), t(\u03c0) = t(p l ), and e(\u03c0) = e(p 1 ) \u00b7 e(p 2 ) ."}, {"id": 207, "string": "."}, {"id": 208, "string": "."}, {"id": 209, "string": "\u00b7 e(p l ), where x \u00b7 y is the concatenation of strings x and y."}, {"id": 210, "string": "A derivation H consists of a single phrase sequence \u03c0 = p 1 ."}, {"id": 211, "string": "."}, {"id": 212, "string": "."}, {"id": 213, "string": "p L : H = \u03c0 = p 1 ."}, {"id": 214, "string": "."}, {"id": 215, "string": "."}, {"id": 216, "string": "p L where the sequence p 1 ."}, {"id": 217, "string": "."}, {"id": 218, "string": "."}, {"id": 219, "string": "p L satisfies the constraints in definition 2."}, {"id": 220, "string": "We now give a definition of sub-derivations and complement sub-derivations: Definition 3 (Sub-derivations and Complement Sub- -derivations)."}, {"id": 221, "string": "For any H = p 1 ."}, {"id": 222, "string": "."}, {"id": 223, "string": "."}, {"id": 224, "string": "p L , for any j \u2208 {1 ."}, {"id": 225, "string": "."}, {"id": 226, "string": "."}, {"id": 227, "string": "n} such that \u2203 i \u2208 {1 ."}, {"id": 228, "string": "."}, {"id": 229, "string": "."}, {"id": 230, "string": "L} s.t."}, {"id": 231, "string": "t(p i ) = j, the sub-derivation H j and the complement sub- derivationH j are defined as H j = \u03c0 1 ."}, {"id": 232, "string": "."}, {"id": 233, "string": "."}, {"id": 234, "string": "\u03c0 r ,H j = \u03c0 1 ."}, {"id": 235, "string": "."}, {"id": 236, "string": ".\u03c0 r where the following properties hold: \u2022 r is an integer with r \u2265 1."}, {"id": 237, "string": "\u2022 Each \u03c0 i for i = 1 ."}, {"id": 238, "string": "."}, {"id": 239, "string": "."}, {"id": 240, "string": "r is a sequence of one or more phrases, where each phrase p \u2208 \u03c0 i has t(p) \u2264 j."}, {"id": 241, "string": "\u2022 Each\u03c0 i for i = 1 ."}, {"id": 242, "string": "."}, {"id": 243, "string": "."}, {"id": 244, "string": "(r \u2212 1) is a sequence of one or more phrases, where each phrase p \u2208\u03c0 i has s(p) > j."}, {"id": 245, "string": "\u2022\u03c0 r is a sequence of zero or more phrases, where each phrase p \u2208\u03c0 r has s(p) > j."}, {"id": 246, "string": "We have zero phrases in\u03c0 r iff j = n where n is the length of the sentence."}, {"id": 247, "string": "\u2022 Finally, \u03c0 1 \u00b7\u03c0 1 \u00b7 \u03c0 2 \u00b7\u03c0 2 ."}, {"id": 248, "string": "."}, {"id": 249, "string": "."}, {"id": 250, "string": "\u03c0 r \u00b7\u03c0 r = p 1 ."}, {"id": 251, "string": "."}, {"id": 252, "string": "."}, {"id": 253, "string": "p L where x \u00b7 y denotes the concatenation of phrase sequences x and y."}, {"id": 254, "string": "Note that for any j \u2208 {1 ."}, {"id": 255, "string": "."}, {"id": 256, "string": "."}, {"id": 257, "string": "n} such that i \u2208 {1 ."}, {"id": 258, "string": "."}, {"id": 259, "string": "."}, {"id": 260, "string": "L} such that t(p i ) = j, the sub-derivation H j and the complement sub-derivationH j is not defined."}, {"id": 261, "string": "Thus for each integer j such that there is a phrase in H ending at point j, we can divide the phrases in H into two sets: phrases p with t(p) \u2264 j, and phrases p with s(p) > j."}, {"id": 262, "string": "The sub-derivation H j lists all maximal sub-sequences of phrases with t(p) \u2264 j."}, {"id": 263, "string": "The complement sub-derivationH j lists all maximal sub-sequences of phrases with s(p) > j."}, {"id": 264, "string": "Figure 1 gives all sub-derivations H j for the derivation H = p 1 ."}, {"id": 265, "string": "."}, {"id": 266, "string": "."}, {"id": 267, "string": "p 7 = (1, 1, <s>)(2, 3, we must)(4, 4, also) (8, 8, take)(5, 6, these criticisms) (7, 7, seriously)(9, 9, </s>) As one example, the sub-derivation H 7 = \u03c0 1 , \u03c0 2 induced by H has two phrase sequences: \u03c0 1 = (1, 1, <s>)(2, 3, we must)(4, 4, also) \u03c0 2 = (5, 6, these criticisms)(7, 7, seriously) Note that the phrase sequences \u03c0 1 and \u03c0 2 give translations for all words x 1 ."}, {"id": 268, "string": "."}, {"id": 269, "string": "."}, {"id": 270, "string": "x 7 in the sentence."}, {"id": 271, "string": "There 63 are two disjoint phrase sequences because in the full derivation H, the phrase p = (8, 8, take), with t(p) = 8 > 7, is used to form a longer sequence of phrases \u03c0 1 p \u03c0 2 ."}, {"id": 272, "string": "For the above example, the complement sub-derivationH 7 is as follows: \u03c0 1 = (8, 8, take) \u03c0 2 = (9, 9, </s>) It can be verified that \u03c0 1 \u00b7\u03c0 1 \u00b7\u03c0 2 \u00b7\u03c0 2 = H as required by the definition of sub-derivations and complement sub-derivations."}, {"id": 273, "string": "We now state the following Lemma: Lemma 2."}, {"id": 274, "string": "For any derivation H = p 1 ."}, {"id": 275, "string": "."}, {"id": 276, "string": "."}, {"id": 277, "string": "p L , for any j such that \u2203i such that t(p i ) = j, the subderivation H j = \u03c0 1 ."}, {"id": 278, "string": "."}, {"id": 279, "string": "."}, {"id": 280, "string": "\u03c0 r satisfies the following properties: 1. s(\u03c0 1 ) = 1 and e 1 (\u03c0 1 ) = <s>."}, {"id": 281, "string": "2."}, {"id": 282, "string": "For all positions i \u2208 {1 ."}, {"id": 283, "string": "."}, {"id": 284, "string": "."}, {"id": 285, "string": "j}, there exists a phrase p \u2208 \u03c0, for some phrase sequence \u03c0 \u2208 H j , such that s(p) \u2264 i \u2264 t(p)."}, {"id": 286, "string": "For all i = 2 ."}, {"id": 287, "string": "."}, {"id": 288, "string": "."}, {"id": 289, "string": "r, s(\u03c0 i ) \u2208 {(j \u2212 d + 2) ."}, {"id": 290, "string": "."}, {"id": 291, "string": "."}, {"id": 292, "string": "j} 4."}, {"id": 293, "string": "For all i = 1 ."}, {"id": 294, "string": "."}, {"id": 295, "string": "."}, {"id": 296, "string": "r, t(\u03c0 i ) \u2208 {(j \u2212 d) ."}, {"id": 297, "string": "."}, {"id": 298, "string": "."}, {"id": 299, "string": "j} Here d is again the distortion limit."}, {"id": 300, "string": "This lemma is a close analogy of Lemma 1."}, {"id": 301, "string": "The proof is as follows: Proof of Property 1: For all values of j, the phrase p 1 = (1, 1, <s>) has t(p 1 ) \u2264 j, hence we must have \u03c0 1 = p 1 ."}, {"id": 302, "string": "."}, {"id": 303, "string": "."}, {"id": 304, "string": "p k for some k \u2208 {1 ."}, {"id": 305, "string": "."}, {"id": 306, "string": "."}, {"id": 307, "string": "L}."}, {"id": 308, "string": "It follows that s(\u03c0 1 ) = 1 and e 1 (\u03c0 1 ) = <s>."}, {"id": 309, "string": "Proof of Property 2: For any position i \u2208 {1 ."}, {"id": 310, "string": "."}, {"id": 311, "string": "."}, {"id": 312, "string": "j}, define the phrase (s, t, e) in the derivation H to be the phrase that covers word i; i.e., the phrase such that s \u2264 i \u2264 t. We must have s \u2208 {1 ."}, {"id": 313, "string": "."}, {"id": 314, "string": "."}, {"id": 315, "string": "j}, because s \u2264 i and i \u2264 j."}, {"id": 316, "string": "We must also have t \u2208 {1 ."}, {"id": 317, "string": "."}, {"id": 318, "string": "."}, {"id": 319, "string": "j}, because otherwise we have s \u2264 j < t, which contradicts the assumption that there is some i \u2208 {1 ."}, {"id": 320, "string": "."}, {"id": 321, "string": "."}, {"id": 322, "string": "L} such that t(p i ) = j."}, {"id": 323, "string": "It follows that the phrase (s, t, e) has t \u2264 j, and from the definition of sub-derivations it follows that the phrase is in one of the phrase sequences \u03c0 1 ."}, {"id": 324, "string": "."}, {"id": 325, "string": "."}, {"id": 326, "string": "\u03c0 r ."}, {"id": 327, "string": "Proof of Property 3: This follows from the distortion limit."}, {"id": 328, "string": "Consider the complement sub-derivation H j = \u03c0 1 ."}, {"id": 329, "string": "."}, {"id": 330, "string": ".\u03c0 r ."}, {"id": 331, "string": "For the distortion limit to be satisfied, for all i \u2208 {2 ."}, {"id": 332, "string": "."}, {"id": 333, "string": "."}, {"id": 334, "string": "r}, we must have |t(\u03c0 i\u22121 ) + 1 \u2212 s(\u03c0 i )| \u2264 d We must also have t(\u03c0 i\u22121 ) > j, and s(\u03c0 i ) \u2264 j, by the definition of sub-derivations."}, {"id": 335, "string": "It follows that s(\u03c0 i ) \u2208 {(j \u2212 d + 2) ."}, {"id": 336, "string": "."}, {"id": 337, "string": "."}, {"id": 338, "string": "j}."}, {"id": 339, "string": "Proof of Property 4: This follows from the distortion limit."}, {"id": 340, "string": "First consider the case where\u03c0 r is non-empty."}, {"id": 341, "string": "For the distortion limit to be satisfied, for all i \u2208 {1 ."}, {"id": 342, "string": "."}, {"id": 343, "string": "."}, {"id": 344, "string": "r}, we must have |t(\u03c0 i ) + 1 \u2212 s(\u03c0 i )| \u2264 d We must also have t(\u03c0 i ) \u2264 j, and s(\u03c0 i ) > j, by the definition of sub-derivations."}, {"id": 345, "string": "It follows that t(\u03c0 i ) \u2208 {(j \u2212 d) ."}, {"id": 346, "string": "."}, {"id": 347, "string": "."}, {"id": 348, "string": "j}."}, {"id": 349, "string": "Next consider the case where\u03c0 r is empty."}, {"id": 350, "string": "In this case we must have j = n. For the distortion limit to be satisfied, for all i \u2208 {1 ."}, {"id": 351, "string": "."}, {"id": 352, "string": "."}, {"id": 353, "string": "(r \u2212 1)}, we must have |t(\u03c0 i ) + 1 \u2212 s(\u03c0 i )| \u2264 d We must also have t(\u03c0 i ) \u2264 j, and s(\u03c0 i ) > j, by the definition of sub-derivations."}, {"id": 354, "string": "It follows that t(\u03c0 i ) \u2208 {(j \u2212 d) ."}, {"id": 355, "string": "."}, {"id": 356, "string": "."}, {"id": 357, "string": "j} for i \u2208 {1 ."}, {"id": 358, "string": "."}, {"id": 359, "string": "."}, {"id": 360, "string": "(r \u2212 1)}."}, {"id": 361, "string": "For i = r, we must have t(\u03c0 i ) = n, from which it again follows that t(\u03c0 r ) = n \u2208 {(j \u2212 d) ."}, {"id": 362, "string": "."}, {"id": 363, "string": "."}, {"id": 364, "string": "j}."}, {"id": 365, "string": "We now define an equivalence relation between sub-derivations, which will be central to the dynamic programming algorithm."}, {"id": 366, "string": "We define a function \u03c3 that maps a phrase sequence \u03c0 to its signature."}, {"id": 367, "string": "The signature is a four-tuple: \u03c3(\u03c0) = (s, w s , t, w t )."}, {"id": 368, "string": "where s is the start position, w s is the start word, t is the end position and w t is the end word of the phrase sequence."}, {"id": 369, "string": "We will use s(\u03c3), w s (\u03c3), t(\u03c3), and w t (\u03c3) to refer to each component of a signature \u03c3."}, {"id": 370, "string": "For example, given a phrase sequence \u03c0 = (1, 1, <s>) (2, 2, we) (4, 4, also) , its signature is \u03c3(\u03c0) = (1, <s>, 4, also)."}, {"id": 371, "string": "The signature of a sub-derivation H j = \u03c0 1 ."}, {"id": 372, "string": "."}, {"id": 373, "string": "."}, {"id": 374, "string": "\u03c0 r is defined to be \u03c3(H j ) = \u03c3(\u03c0 1 ) ."}, {"id": 375, "string": "."}, {"id": 376, "string": "."}, {"id": 377, "string": "\u03c3(\u03c0 r ) ."}, {"id": 378, "string": "For example, with H 7 as defined above, we have \u03c3(H 7 ) = 1, <s>, 4, also , 5, these, 7, seriously Two partial derivations H j and H j are in the same equivalence class iff \u03c3(H j ) = \u03c3(H j )."}, {"id": 379, "string": "We can now state the following Lemma: Lemma 3."}, {"id": 380, "string": "Define H * to be the optimal derivation for some input sentence, and H * j to be a subderivation of H * ."}, {"id": 381, "string": "Suppose H j is another subderivation with j words, such that \u03c3(H j ) = \u03c3(H * j )."}, {"id": 382, "string": "Then it must be the case that f (H * j ) \u2265 f (H j ), where f is the function defined in Section 4.1."}, {"id": 383, "string": "Proof."}, {"id": 384, "string": "Define the sub-derivation and complement sub-derivation of H * as H * j = \u03c0 1 ."}, {"id": 385, "string": "."}, {"id": 386, "string": "."}, {"id": 387, "string": "\u03c0 r H * j = \u03c0 1 ."}, {"id": 388, "string": "."}, {"id": 389, "string": ".\u03c0 r We then have f (H * ) = f (H * j ) + f (H * j ) + \u03b3 (2) where f (."}, {"id": 390, "string": "."}, {"id": 391, "string": ".)"}, {"id": 392, "string": "is as defined in Eq."}, {"id": 393, "string": "1, and \u03b3 takes into account the bigram language modeling scores and the distortion scores for the transitions \u03c0 1 \u2192\u03c0 1 , \u03c0 1 \u2192 \u03c0 2 , \u03c0 2 \u2192\u03c0 2 , etc."}, {"id": 394, "string": "The proof is by contradiction."}, {"id": 395, "string": "Define H j = \u03c0 1 ."}, {"id": 396, "string": "."}, {"id": 397, "string": "."}, {"id": 398, "string": "\u03c0 r and assume that f (H * j ) < f (H j )."}, {"id": 399, "string": "Now consider H = \u03c0 1\u03c0 1 \u03c0 2\u03c0 2 ."}, {"id": 400, "string": "."}, {"id": 401, "string": "."}, {"id": 402, "string": "\u03c0 r\u03c0 r This is a valid derivation because the transitions \u03c0 1 \u2192\u03c0 1 ,\u03c0 1 \u2192 \u03c0 2 , \u03c0 2 \u2192\u03c0 2 have the same distortion distances as \u03c0 1 \u2192\u03c0 1 ,\u03c0 1 \u2192 \u03c0 2 , \u03c0 2 \u2192\u03c0 2 , hence they must satisfy the distortion limit."}, {"id": 403, "string": "We have f (H ) = f (H j ) + f (H * j ) + \u03b3 (3) where \u03b3 has the same value as in Eq."}, {"id": 404, "string": "2."}, {"id": 405, "string": "This follows because the scores for the transitions \u03c0 1 \u2192\u03c0 1 , \u03c0 1 \u2192 \u03c0 2 , \u03c0 2 \u2192\u03c0 2 are identical to the scores for the transitions \u03c0 1 \u2192\u03c0 1 ,\u03c0 1 \u2192 \u03c0 2 , \u03c0 2 \u2192\u03c0 2 , because \u03c3(H * j ) = \u03c3(H j )."}, {"id": 406, "string": "It follows from Eq."}, {"id": 407, "string": "2 and Eq."}, {"id": 408, "string": "3 that if f (H j ) > f (H * j ), then f (H ) > f (H * )."}, {"id": 409, "string": "But this contradicts the assumption that H * is optimal."}, {"id": 410, "string": "It follows that we must have f (H j ) \u2264 f (H * j )."}, {"id": 411, "string": "This lemma leads to a dynamic programming algorithm."}, {"id": 412, "string": "Each dynamic programming state consists of an integer j \u2208 {1 ."}, {"id": 413, "string": "."}, {"id": 414, "string": "."}, {"id": 415, "string": "n} and a set of r signatures: T = (j, {\u03c3 1 ."}, {"id": 416, "string": "."}, {"id": 417, "string": "."}, {"id": 418, "string": "\u03c3 r }) Figure 2 shows the dynamic programming algorithm."}, {"id": 419, "string": "It relies on the following functions: Inputs: \u2022 An integer n specifying the length of the input sequence."}, {"id": 420, "string": "\u2022 A function \u03b4(T ) returning the set of valid transitions from state T ."}, {"id": 421, "string": "\u2022 A function \u03c4 (T, \u2206) returning the state reached from state T by transition \u2206 \u2208 \u03b4(T )."}, {"id": 422, "string": "\u2022 A function valid(T ) returning TRUE if state T is valid, otherwise FALSE."}, {"id": 423, "string": "\u2022 A function score(\u2206) that returns the score for any transition \u2206."}, {"id": 424, "string": "Initialization: {(1, <s>, 1, <s>) T 1 = (1, }) \u03b1(T 1 ) = 0 T 1 = {T 1 }, \u2200j \u2208 {2 ."}, {"id": 425, "string": "."}, {"id": 426, "string": "."}, {"id": 427, "string": "n}, T j = \u2205 for j = 1, ."}, {"id": 428, "string": "."}, {"id": 429, "string": "."}, {"id": 430, "string": ", n \u2212 1 for each state T \u2208 T j for each \u2206 \u2208 \u03b4(T ) T = \u03c4 (T, \u2206) if valid(T ) = FALSE: continue score = \u03b1(T ) + score(\u2206) Define t to be the integer such that T = (t, {\u03c3 1 ."}, {"id": 431, "string": "."}, {"id": 432, "string": "."}, {"id": 433, "string": "\u03c3r}) if T / \u2208 Tt Tt = Tt \u222a {T } \u03b1(T ) = score bp(T ) = (\u2206) else if score > \u03b1(T ) \u03b1(T ) = score bp(T ) = (\u2206) Return: the score of the state (n, {(1, <s>, n, </s>)}) in Tn, and backpointers bp defining the transitions leading to this state."}, {"id": 434, "string": "is the score for state T ."}, {"id": 435, "string": "The bp(T ) variables are backpointers used in recovering the highest scoring sequence of transitions."}, {"id": 436, "string": "\u2022 For any state T , \u03b4(T ) is the set of outgoing transitions from state T ."}, {"id": 437, "string": "\u2022 For any state T , for any transition \u2206 \u2208 \u03b4(T ), \u03c4 (T, \u2206) is the state reached by transition \u2206 from state T ."}, {"id": 438, "string": "\u2022 For any state T , valid(T ) checks if a resulting state is valid."}, {"id": 439, "string": "\u2022 For any transition \u2206, score(\u2206) is the score for the transition."}, {"id": 440, "string": "We next give full definitions of these functions."}, {"id": 441, "string": "Definitions of \u03b4(T ) and \u03c4 (T, \u2206) Recall that for any state T , \u03b4(T ) returns the set of possible transitions from state T ."}, {"id": 442, "string": "In addition \u03c4 (T, \u2206) returns the state reached when taking transition \u2206 \u2208 \u03b4(T )."}, {"id": 443, "string": "Given the state T = (j, {\u03c3 1 ."}, {"id": 444, "string": "."}, {"id": 445, "string": "."}, {"id": 446, "string": "\u03c3 r }), each transition is of the form \u03c8 1 p \u03c8 2 where \u03c8 1 , p and \u03c8 2 are defined as follows: \u2022 p is a phrase such that s(p) = j + 1."}, {"id": 447, "string": "\u2022 \u03c8 1 \u2208 {\u03c3 1 ."}, {"id": 448, "string": "."}, {"id": 449, "string": "."}, {"id": 450, "string": "\u03c3 r } \u222a {\u03c6}."}, {"id": 451, "string": "If \u03c8 1 = \u03c6, it must be the case that |t(\u03c8 1 ) + 1 \u2212 s(p)| \u2264 d and t(\u03c8 1 ) = n. \u2022 \u03c8 2 \u2208 {\u03c3 1 ."}, {"id": 452, "string": "."}, {"id": 453, "string": "."}, {"id": 454, "string": "\u03c3 r } \u222a {\u03c6}."}, {"id": 455, "string": "If \u03c8 2 = \u03c6, it must be the case that |t(p) + 1 \u2212 s(\u03c8 2 )| \u2264 d and s(\u03c8 2 ) = 1."}, {"id": 456, "string": "\u2022 If \u03c8 1 = \u03c6 and \u03c8 2 = \u03c6, then \u03c8 1 = \u03c8 2 ."}, {"id": 457, "string": "Thus there are four possible types of transition from a state T = (j, {\u03c3 1 ."}, {"id": 458, "string": "."}, {"id": 459, "string": "."}, {"id": 460, "string": "\u03c3 r }): Case 1: \u2206 = \u03c6 p \u03c6."}, {"id": 461, "string": "In this case the phrase p is incorporated as a stand-alone phrase."}, {"id": 462, "string": "The new state T is equal to (j , {\u03c3 1 ."}, {"id": 463, "string": "."}, {"id": 464, "string": "."}, {"id": 465, "string": "\u03c3 r+1 }) where j = t(p), where \u03c3 i = \u03c3 i for i = 1 ."}, {"id": 466, "string": "."}, {"id": 467, "string": "."}, {"id": 468, "string": "r, and \u03c3 r+1 = (s(p), e 1 (p), t(p), e m (p))."}, {"id": 469, "string": "Case 2: \u2206 = \u03c3 i p \u03c6 for some \u03c3 i \u2208 {\u03c3 1 ."}, {"id": 470, "string": "."}, {"id": 471, "string": "."}, {"id": 472, "string": "\u03c3 r }."}, {"id": 473, "string": "In this case the phrase p is appended to the signa- ture \u03c3 i ."}, {"id": 474, "string": "The new state T = \u03c4 (T, \u2206) is of the form (j , \u03c3 1 ."}, {"id": 475, "string": "."}, {"id": 476, "string": "."}, {"id": 477, "string": "\u03c3 r ), where j = t(p), where \u03c3 i is replaced by (s(\u03c3 i ), w s (\u03c3 i ), t(p), e m (p)), and where \u03c3 i = \u03c3 i for all i = i."}, {"id": 478, "string": "Case 3: \u2206 = \u03c6 p \u03c3 i for some \u03c3 i \u2208 {\u03c3 1 ."}, {"id": 479, "string": "."}, {"id": 480, "string": "."}, {"id": 481, "string": "\u03c3 r }."}, {"id": 482, "string": "In this case the phrase p is prepended to the signa- ture \u03c3 i ."}, {"id": 483, "string": "The new state T = \u03c4 (T, \u2206) is of the form (j , \u03c3 1 ."}, {"id": 484, "string": "."}, {"id": 485, "string": "."}, {"id": 486, "string": "\u03c3 r ), where j = t(p), where \u03c3 i is replaced by (s(p), e 1 (p), t(\u03c3 i ), w t (\u03c3 i )), and where \u03c3 i = \u03c3 i for all i = i."}, {"id": 487, "string": "Case 4: \u2206 = \u03c3 i p \u03c3 i for some \u03c3 i , \u03c3 i \u2208 {\u03c3 1 ."}, {"id": 488, "string": "."}, {"id": 489, "string": "."}, {"id": 490, "string": "\u03c3 r }, with i = i."}, {"id": 491, "string": "In this case phrase p is appended to signature \u03c3 i , and prepended to signature \u03c3 i , effectively joining the two signatures together."}, {"id": 492, "string": "In this case the new state T = \u03c4 (T, \u2206) is of the form (j , \u03c3 1 ."}, {"id": 493, "string": "."}, {"id": 494, "string": "."}, {"id": 495, "string": "\u03c3 r\u22121 ), where signatures \u03c3 i and \u03c3 i are replaced by a new signature (s(\u03c3 i ), w s (\u03c3 i ), t(\u03c3 i ), w t (\u03c3 i )), and all other signatures are copied across from T to T ."}, {"id": 496, "string": "Figure 3 gives the dynamic programming states and transitions for the derivation H in Figure 1 ."}, {"id": 497, "string": "For example, the sub-derivation H 7 = (1, 1, <s>)(2, 3, we must)(4, 4, also) , (5, 6, these criticisms)(7, 7, seriously) will be mapped to a state T = 7, \u03c3(H 7 ) = 7, (1, <s>, 4, also), (5, these, 7, seriously) 1, \u03c3 1 = 1, <s>, 1, <s> 3, \u03c3 1 = 1, <s>, 3, must 4, \u03c3 1 = 1, <s>, 4, also 6, \u03c3 1 = 1, <s>, 4, also , \u03c3 2 = 5, these, 6, criticisms 7, \u03c3 1 = 1, <s>, 4, also , \u03c3 2 = 5, these, 7, seriously 8, \u03c3 1 = 1, <s>, 7, seriously 9, \u03c3 1 = 1, <s>, 9, </s> \u03c3 1 (2, 3, we must) \u03c6 \u03c3 1 (4, 4, also) \u03c6 \u03c6 (5, 6, these criticisms) \u03c6 \u03c3 2 (7, 7, seriously) \u03c6 \u03c3 1 (8, 8, take) \u03c3 2 \u03c3 1 (9, 9, </s>) \u03c6 Figure 3 : Dynamic programming states and the transitions from one state to another, using the same example as in Figure 1 ."}, {"id": 498, "string": "Note that \u03c3 i = \u03c3(\u03c0 i ) for all \u03c0 i \u2208 H j ."}, {"id": 499, "string": "The transition \u03c3 1 (8, 8, take) \u03c3 2 from this state leads to a new state, T = 8, \u03c3 1 = (1, <s>, 7, seriously) 4.3 Definition of score(\u2206) Figure 4 gives the definition of score(\u2206), which incorporates the language model, phrase scores, and distortion penalty implied by the transition \u2206."}, {"id": 500, "string": "Figure 5 gives the definition of valid(T )."}, {"id": 501, "string": "This function checks that the start and end points of each signature are in the set of allowed start and end points given in Lemma 2."}, {"id": 502, "string": "Definition of valid(T ) A Bound on the Runtime of the Algorithm We now give a bound on the algorithm's run time."}, {"id": 503, "string": "This will be the product of terms N and M , where N is an upper bound on the number of states in the dynamic program, and M is an upper bound on the number of outgoing transitions from any state."}, {"id": 504, "string": "For any j \u2208 {1 ."}, {"id": 505, "string": "."}, {"id": 506, "string": "."}, {"id": 507, "string": "n}, define first(j) to be the set of target-language words that can begin at position j and last(j) to be the set of target-language \u2206 Resulting phrase sequence score(\u2206) \u03c6 p \u03c6 (s, e 1 , t, em)\u0175(p) \u03c3 i p \u03c6 (s(\u03c3 i ), ws(\u03c3 i ), t, em)\u0175(p) + \u03bb(e 1 |wt(\u03c3 i )) + \u03b7 \u00d7 |t(\u03c3 i ) + 1 \u2212 s| \u03c6 p \u03c3 i (s, e 1 , t(\u03c3 i ), wt(\u03c3 i ))\u0175(p) + \u03bb(ws(\u03c3 i )|em) Figure 4 : Four operations that can extend a state T = (j, {\u03c3 1 ."}, {"id": 508, "string": "."}, {"id": 509, "string": "."}, {"id": 510, "string": "\u03c3 r }) by a phrase p = (s, t, e 1 ."}, {"id": 511, "string": "."}, {"id": 512, "string": "."}, {"id": 513, "string": "e m ), and the scores incurred."}, {"id": 514, "string": "We define\u0175(p) = \u03ba(p) + m i=2 \u03bb(e i (p)|e i\u22121 (p))."}, {"id": 515, "string": "The function\u0175(p) includes the phrase translation model \u03ba and the language model scores that can be computed using p alone."}, {"id": 516, "string": "The weight \u03b7 is the distortion penalty."}, {"id": 517, "string": "+ \u03b7 \u00d7 |t + 1 \u2212 s(\u03c3 i )| \u03c3 i p \u03c3 i (s(\u03c3 i ), ws(\u03c3 i ), t(\u03c3 i ), wt(\u03c3 i ))\u0175(p) + \u03bb(e 1 |wt(\u03c3 i )) + \u03b7 \u00d7 |t(\u03c3 i ) + 1 \u2212 s| +\u03bb(ws(\u03c3 i )|em) + \u03b7 \u00d7 |t + 1 \u2212 s(\u03c3 i )| Function valid(T ) Input: In addition, define singles(j) to be the set of phrases that translate the single word at position j: singles(j) = {p : s(p) = j and t(p) = j} Next, define h to be the smallest integer such that for all j, |first(j)| \u2264 h, |last(j)| \u2264 h, and |singles(j)| \u2264 h. Thus h is a measure of the maximal ambiguity of any word x j in the input."}, {"id": 518, "string": "State T = j, {\u03c3 1 ."}, {"id": 519, "string": "."}, {"id": 520, "string": "."}, {"id": 521, "string": "\u03c3r} for i = 1 ."}, {"id": 522, "string": "."}, {"id": 523, "string": "."}, {"id": 524, "string": "r if s(\u03c3 i ) < j \u2212 d + 2 and s(\u03c3 i ) = 1 return FALSE if t(\u03c3 i ) < j \u2212 d return FALSE return TRUE Finally, for any position j, define start(j) to be the set of phrases starting at position j: start(j) = {p : s(p) = j} and define l to be the smallest integer such that for all j, |start(j)| \u2264 l. Given these definitions we can state the following result: Theorem 1."}, {"id": 525, "string": "The time complexity of the algorithm is O(nd!lh d+1 )."}, {"id": 526, "string": "To prove this we need the following definition: Definition 4 (p-structures)."}, {"id": 527, "string": "For any finite set A of integers with |A| = k, a p-structure is a set of r ordered pairs {(s i , t i )} r i=1 that satisfies the following properties: 1) 0 \u2264 r \u2264 k; 2) for each i \u2208 {1 ."}, {"id": 528, "string": "."}, {"id": 529, "string": "."}, {"id": 530, "string": "r}, s i \u2208 A and t i \u2208 A (both s i = t i and s i = t i are allowed); 3) for each j \u2208 A, there is at most one index i \u2208 {1 ."}, {"id": 531, "string": "."}, {"id": 532, "string": "."}, {"id": 533, "string": "r} such that (s i = j) or (t i = j) or (s i = j and t i = j)."}, {"id": 534, "string": "We use g(k) to denote the number of unique pstructures for a set A with |A| = k. We then have the following Lemmas: Lemma 4."}, {"id": 535, "string": "The function g(k) satisfies g(0) = 0, g(1) = 2, and the following recurrence for k \u2265 2: g(k) = 2g(k \u2212 1) + 2(n \u2212 1)g(k \u2212 2) Proof."}, {"id": 536, "string": "The proof is in Appendix A. Lemma 5."}, {"id": 537, "string": "Consider the function h(k) = k 2 \u00d7 g(k)."}, {"id": 538, "string": "h(k) is in O((k \u2212 2)!)."}, {"id": 539, "string": "Proof."}, {"id": 540, "string": "The proof is in Appendix B."}, {"id": 541, "string": "We can now prove the theorem: Proof of Theorem 1: First consider the number of states in the dynamic program."}, {"id": 542, "string": "Each state is of the form (j, {\u03c3 1 ."}, {"id": 543, "string": "."}, {"id": 544, "string": "."}, {"id": 545, "string": "\u03c3 r }) where the set {(s(\u03c3 i ), t(\u03c3 i ))} r i=1 is a p-structure over the set {1}\u222a {(j \u2212 d) ."}, {"id": 546, "string": "."}, {"id": 547, "string": "."}, {"id": 548, "string": "d}."}, {"id": 549, "string": "The number of possible values for {(s(\u03c3 i ), e(\u03c3 i ))} r i=1 is at most g(d + 2)."}, {"id": 550, "string": "For a fixed choice of {(s(\u03c3 i ), t(\u03c3 i ))} r i=1 we will argue that there are at most h d+1 possible values for {(w s (\u03c3 i ), w t (\u03c3 i ))} r i=1 ."}, {"id": 551, "string": "This follows because for each k \u2208 {(j \u2212 d) ."}, {"id": 552, "string": "."}, {"id": 553, "string": "."}, {"id": 554, "string": "j} there are at most h possible choices: if there is some i such that s(\u03c3 i ) = k, and t(\u03c3 i ) = k, then the associated word w s (\u03c3 i ) is in the set first(k); alternatively if there is some i such that t(\u03c3 i ) = k, and s(\u03c3 i ) = k, then the associated word w t (\u03c3 i ) is in the set last(k); alternatively if there is some i such that s(\u03c3 i ) = t(\u03c3 i ) = k then the associated words w s (\u03c3 i ), w t (\u03c3 i ) must be the first/last word of some phrase in singles(k); alternatively there is no i such that s(\u03c3 i ) = k or t(\u03c3 i ) = k, in which case there is no choice associated with position k in the sentence."}, {"id": 555, "string": "Hence there are at most h choices associated with each position k \u2208 {(j \u2212 d) ."}, {"id": 556, "string": "."}, {"id": 557, "string": "."}, {"id": 558, "string": "j}, giving h d+1 choices in total."}, {"id": 559, "string": "Combining these results, and noting that there are n choices of the variable j, implies that there are at most ng(d + 2)h d+1 states in the dynamic program."}, {"id": 560, "string": "Now consider the number of transitions from any state."}, {"id": 561, "string": "A transition is of the form \u03c8 1 p\u03c8 2 as defined in Section 4.2.1."}, {"id": 562, "string": "For a given state there are at most (d + 2) choices for \u03c8 1 and \u03c8 2 , and l choices for p, giving at most (d + 2) 2 l choices in total."}, {"id": 563, "string": "Multiplying the upper bounds on the number of states and number of transitions for each state gives an upper bound on the runtime of the algorithm as O(ng(d + 2)h d+1 (d + 2) 2 l)."}, {"id": 564, "string": "Hence by Lemma 5 the runtime is O(nd!lh d+1 ) time."}, {"id": 565, "string": "The bound g(d + 2) over the number of possible values for {(s(\u03c3 i ), e(\u03c3 i ))} r i=1 is somewhat loose, as the set of p-structures over {1} \u222a {(j \u2212 d) ."}, {"id": 566, "string": "."}, {"id": 567, "string": "."}, {"id": 568, "string": "d} in- cludes impossible values {(s i , t i )} r i=1 where for example there is no i such that s(\u03c3 i ) = 1."}, {"id": 569, "string": "However the bound is tight enough to give the O(d!)"}, {"id": 570, "string": "runtime."}, {"id": 571, "string": "Discussion We conclude the paper with discussion of some issues."}, {"id": 572, "string": "First we describe how the dynamic programming structures we have described can be used in conjunction with beam search."}, {"id": 573, "string": "Second, we give more analysis of the complexity of the widely-used decoding algorithm of Koehn et al."}, {"id": 574, "string": "(2003) ."}, {"id": 575, "string": "Beam Search Beam search is widely used in phrase-based decoding; it can also be applied to our dynamic programming construction."}, {"id": 576, "string": "We can replace the line for each state T \u2208 T j in the algorithm in Figure 2 with for each state T \u2208 beam(T j ) where beam is a function that returns a subset of T j , most often the highest scoring elements of T j under some scoring criterion."}, {"id": 577, "string": "A key question concerns the choice of scoring function \u03b3(T ) used to rank states."}, {"id": 578, "string": "One proposal is to define \u03b3(T ) = \u03b1(T ) + \u03b2(T ) where \u03b1(T ) is the score used in the dynamic program, and \u03b2(T ) = i:ws(\u03c3 i ) =<s> \u03bb u (w s (\u03c3 i ))."}, {"id": 579, "string": "Here \u03bb u (w) is the score of word w under a unigram language model."}, {"id": 580, "string": "The \u03b2(T ) scores allow different states in T j , which have different words w s (\u03c3 i ) at the start of signatures, to be comparable: for example it compensates for the case where w s (\u03c3 i ) is a rare word, which will incur a low probability when the bigram w w s (\u03c3 i ) for some word w is constructed during search."}, {"id": 581, "string": "The \u03b2(T ) values play a similar role to \"future scores\" in the algorithm of Koehn et al."}, {"id": 582, "string": "(2003) ."}, {"id": 583, "string": "However in the Koehn et al."}, {"id": 584, "string": "(2003) algorithm, different items in the same beam can translate different subsets of the input sentence, making futurescore estimation more involved."}, {"id": 585, "string": "In our case all items in T j translate all words x 1 ."}, {"id": 586, "string": "."}, {"id": 587, "string": "."}, {"id": 588, "string": "x j inclusive, which may make comparison of different hypotheses more straightforward."}, {"id": 589, "string": "Complexity of Decoding with Bit-string Representations A common method for decoding phrase-based models, as described in Koehn et al."}, {"id": 590, "string": "(2003) , is to use beam search in conjunction with a search algorithm that 1) creates the target language string in strictly left-to-right order; 2) uses a bit string with bits b i \u2208 {0, 1} for i = 1 ."}, {"id": 591, "string": "."}, {"id": 592, "string": "."}, {"id": 593, "string": "n representing at each point whether word i in the input has been translated."}, {"id": 594, "string": "A natural question is whether the number of possible bit strings for a model with a fixed distortion limit d can grow exponentially quickly with respect to the length of the input sentence."}, {"id": 595, "string": "This section gives an example that shows that this is indeed the case."}, {"id": 596, "string": "Assume that our sentence length n is such that (n \u2212 2)/4 is an integer."}, {"id": 597, "string": "Assume as before x 1 = <s> and x n = </s>."}, {"id": 598, "string": "For each k \u2208 {0 ."}, {"id": 599, "string": "."}, {"id": 600, "string": "."}, {"id": 601, "string": "((n \u2212 2)/4 \u2212 1)}, assume we have the following phrases for the words x 4k+2 ."}, {"id": 602, "string": "."}, {"id": 603, "string": "."}, {"id": 604, "string": "x 4k+5 : (4k + 2, 4k + 2, u k ) (4k + 3, 4k + 3, v k ) (4k + 4, 4k + 4, w k ) (4k + 5, 4k + 5, z k ) (4k + 4, 4k + 5, y k ) Note that the only source of ambiguity is for each k whether we use y k to translate the entire phrase x 4k+4 x 4k+5 , or whether we use w k and z k to translate x 4k+4 and x 4k+5 separately."}, {"id": 605, "string": "With a distortion limit d \u2265 5, the number of possible bit strings in this example is at least 2 (n\u22122)/4 ."}, {"id": 606, "string": "This follows because for any setting of the variables b 4k+4 \u2208 {0, 1} for k \u2208 {0 ."}, {"id": 607, "string": "."}, {"id": 608, "string": "."}, {"id": 609, "string": "((n \u2212 2)/4 \u2212 1)}, there is a valid derivation p 1 ."}, {"id": 610, "string": "."}, {"id": 611, "string": "."}, {"id": 612, "string": "p L such that the prefix p 1 ."}, {"id": 613, "string": "."}, {"id": 614, "string": "."}, {"id": 615, "string": "p l where l = 1 + (n \u2212 2)/4 gives this bit string."}, {"id": 616, "string": "Simply choose p 1 = (1, 1, <s>) and for l \u2208 {0 ."}, {"id": 617, "string": "."}, {"id": 618, "string": "."}, {"id": 619, "string": "(n \u2212 2)/4 \u2212 1} choose p l +2 = (4l + 4, 4l + 5, y i ) if b 4k+4 = 1, p l +2 = (4l + 5, 4l + 5, z i ) otherwise."}, {"id": 620, "string": "It can be verified that p 1 ."}, {"id": 621, "string": "."}, {"id": 622, "string": "."}, {"id": 623, "string": "p l is a valid prefix (there is a valid way to give a complete derivation from this prefix)."}, {"id": 624, "string": "As one example, for n = 10, and b 4 = 1 and b 8 = 0, a valid derivation is (1, 1, <s>)(4, 5, y 1 )(9, 9, z 2 )(7, 7, v 2 )(3, 3, v 1 ) (2, 2, u 1 )(6, 6, u 2 )(8, 8, w 2 )(10, 10, </s>) In this case the prefix (1, 1, <s>)(4, 5, y 1 )(9, 9, z 2 ) gives b 4 = 1 and b 8 = 0."}, {"id": 625, "string": "Other values for b 4 and b 8 can be given by using (5, 5, z 1 ) in place of (4, 5, y 1 ), and (8, 9, y 2 ) in place of (9, 9, z 2 ), with the following phrases modified appropriately."}, {"id": 626, "string": "Conclusion We have given a polynomial-time dynamic programming algorithm for phrase-based decoding with a fixed distortion limit."}, {"id": 627, "string": "The algorithm uses a quite different representation of states from previous decoding algorithms, is easily amenable to beam search, and leads to a new perspective on phrase-based decoding."}, {"id": 628, "string": "Future work should investigate the effectiveness of the algorithm in practice."}, {"id": 629, "string": "A Proof of Lemma 4 Without loss of generality assume A = {1, 2, 3, ."}, {"id": 630, "string": "."}, {"id": 631, "string": "."}, {"id": 632, "string": "k}."}, {"id": 633, "string": "We have g(1) = 2, because in this case the valid p-structures are {(1, 1)} and \u2205."}, {"id": 634, "string": "To calculate g(k) we can sum over four possibilities: Case 1: There are g(k \u2212 1) p-structures with s i = t i = 1 for some i \u2208 {1 ."}, {"id": 635, "string": "."}, {"id": 636, "string": "."}, {"id": 637, "string": "r}."}, {"id": 638, "string": "This follows because once s i = t i = 1 for some i, there are g(k \u2212 1) possible p-structures for the integers {2, 3, 4 ."}, {"id": 639, "string": "."}, {"id": 640, "string": "."}, {"id": 641, "string": "k}."}, {"id": 642, "string": "Case 2: There are g(k \u2212 1) p-structures such that s i = 1 and t i = 1 for all i \u2208 {1 ."}, {"id": 643, "string": "."}, {"id": 644, "string": "."}, {"id": 645, "string": "r}."}, {"id": 646, "string": "This follows because once s i = 1 and t i = 1 for all i, there are g(k \u2212 1) possible p-structures for the integers {2, 3, 4 ."}, {"id": 647, "string": "."}, {"id": 648, "string": "."}, {"id": 649, "string": "k}."}, {"id": 650, "string": "Case 3: There are (k \u2212 1) \u00d7 g(k \u2212 2) p-structures such that there is some i \u2208 {1 ."}, {"id": 651, "string": "."}, {"id": 652, "string": "."}, {"id": 653, "string": "r} with s i = 1 and t i = 1."}, {"id": 654, "string": "This follows because for the i such that s i = 1, there are (k \u2212 1) choices for the value for t i , and there are then g(k \u2212 2) possible p-structures for the remaining integers in the set {1 ."}, {"id": 655, "string": "."}, {"id": 656, "string": "."}, {"id": 657, "string": "k}/{1, t i }."}, {"id": 658, "string": "Case 4: There are (k \u2212 1) \u00d7 g(k \u2212 2) p-structures such that there is some i \u2208 {1 ."}, {"id": 659, "string": "."}, {"id": 660, "string": "."}, {"id": 661, "string": "r} with t i = 1 and s i = 1."}, {"id": 662, "string": "This follows because for the i such that t i = 1, there are (k \u2212 1) choices for the value for s i , and there are then g(k \u2212 2) possible p-structures for the remaining integers in the set {1 ."}, {"id": 663, "string": "."}, {"id": 664, "string": "."}, {"id": 665, "string": "k}/{1, s i }."}, {"id": 666, "string": "Summing over these possibilities gives the following recurrence: g(k) = 2g(k \u2212 1) + 2(k \u2212 1) \u00d7 g(k \u2212 2) B Proof of Lemma 5 Recall that h(k) = f (k) \u00d7 g(k) where f (k) = k 2 ."}, {"id": 667, "string": "Define k 0 to be the smallest integer such that for all k \u2265 k 0 , 2f (k) f (k \u2212 1) + 2f (k) f (k \u2212 2) \u00b7 k \u2212 1 k \u2212 3 \u2264 k \u2212 2 (4) For f (k) = k 2 we have k 0 = 9."}, {"id": 668, "string": "Now choose a constant c such that for all k \u2208 {1 ."}, {"id": 669, "string": "."}, {"id": 670, "string": "."}, {"id": 671, "string": "(k 0 \u2212 1)}, h(k) \u2264 c \u00d7 (k \u2212 2)!."}, {"id": 672, "string": "We will prove by induction that under these definitions of k 0 and c we have h(k) \u2264 c(k \u2212 2)!"}, {"id": 673, "string": "for all integers k, hence h(k) is in O((k \u2212 2)!)."}, {"id": 674, "string": "For values k \u2265 k 0 , we have h(k) = f (k)g(k) = 2f (k)g(k \u2212 1) + 2f (k)(k \u2212 1)g(k \u2212 2) (5) = 2f (k) f (k \u2212 1) h(k \u2212 1) + 2f (k) f (k \u2212 2) (k \u2212 1)h(k \u2212 2) \u2264 2cf (k) f (k \u2212 1) + 2cf (k) f (k \u2212 2) \u00b7 k \u2212 1 k \u2212 3 (k \u2212 3)!"}, {"id": 675, "string": "(6) \u2264 c(k \u2212 2)!"}, {"id": 676, "string": "(7) Eq."}, {"id": 677, "string": "5 follows from g(k) = 2g(k\u22121)+2(k\u22121)g(k\u2212 2)."}, {"id": 678, "string": "Eq."}, {"id": 679, "string": "6 follows by the inductive hypothesis that h(k \u2212 1) \u2264 c(k \u2212 3)!"}, {"id": 680, "string": "and h(k \u2212 2) \u2264 c(k \u2212 4)!."}, {"id": 681, "string": "Eq 7 follows because Eq."}, {"id": 682, "string": "4 holds for all k \u2265 k 0 ."}], "headers": [{"section": "Introduction", "n": "1", "start": 0, "end": 46}, {"section": "Background: The Traveling Salesman Problem on Bandwidth-Limited Graphs", "n": "3", "start": 47, "end": 49}, {"section": "Bandwidth-Limited TSPPs", "n": "3.1", "start": 50, "end": 59}, {"section": "An Algorithm for Bandwidth-Limited TSPPs", "n": "3.2", "start": 60, "end": 85}, {"section": "For any vertex", "n": "2.", "start": 86, "end": 106}, {"section": "For each path (connected component) in H j", "n": "2.", "start": 107, "end": 133}, {"section": "A Dynamic Programming Algorithm for", "n": "4", "start": 134, "end": 136}, {"section": "Basic Definitions", "n": "4.1", "start": 137, "end": 194}, {"section": "The Algorithm", "n": "4.2", "start": 195, "end": 285}, {"section": "For all", "n": "3.", "start": 286, "end": 440}, {"section": "Definitions of \u03b4(T ) and \u03c4 (T, \u2206)", "n": "4.2.1", "start": 441, "end": 501}, {"section": "A Bound on the Runtime of the Algorithm", "n": "4.5", "start": 502, "end": 570}, {"section": "Discussion", "n": "5", "start": 571, "end": 574}, {"section": "Beam Search", "n": "5.1", "start": 575, "end": 588}, {"section": "Complexity of Decoding with Bit-string Representations", "n": "5.2", "start": 589, "end": 625}, {"section": "Conclusion", "n": "6", "start": 626, "end": 682}], "figures": [{"filename": "../figure/image/1211-Figure4-1.png", "caption": "Figure 4: Four operations that can extend a state T = (j, {\u03c31 . . . \u03c3r}) by a phrase p = (s, t, e1 . . . em), and the scores incurred. We define w\u0302(p) = \u03ba(p) +\u2211m i=2 \u03bb(ei(p)|ei\u22121(p)). The function w\u0302(p) includes the phrase translation model \u03ba and the language model scores that can be computed using p alone. The weight \u03b7 is the distortion penalty.", "page": 8, "bbox": {"x1": 70.56, "x2": 299.03999999999996, "y1": 54.72, "y2": 171.35999999999999}}, {"filename": "../figure/image/1211-Figure5-1.png", "caption": "Figure 5: The valid function.", "page": 8, "bbox": {"x1": 70.56, "x2": 302.4, "y1": 269.76, "y2": 360.0}}, {"filename": "../figure/image/1211-Figure1-1.png", "caption": "Figure 1: Sub-derivations Hj for j \u2208 {1, 3, 4, 6, 7, 8, 9} induced by the full derivation H =\u2329\u2329 (1, 1,<s>)(2, 3,we must)(4, 4, also)(8, 8, take)(5, 6, these criticisms)(7, 7, seriously)(9, 9</s>) \u232a\u232a . Note that Hj includes the phrases that cover spans ending before or at position j. Sub-derivation Hj is extended to another subderivation Hj+i by incorporating a phrase of length i.", "page": 4, "bbox": {"x1": 94.56, "x2": 517.4399999999999, "y1": 53.28, "y2": 122.39999999999999}}, {"filename": "../figure/image/1211-Figure3-1.png", "caption": "Figure 3: Dynamic programming states and the transitions from one state to another, using the same example as in Figure 1. Note that \u03c3i = \u03c3(\u03c0i) for all \u03c0i \u2208 Hj .", "page": 7, "bbox": {"x1": 337.91999999999996, "x2": 513.12, "y1": 52.8, "y2": 296.15999999999997}}, {"filename": "../figure/image/1211-Figure2-1.png", "caption": "Figure 2: The phrase-based decoding algorithm. \u03b1(T ) is the score for state T . The bp(T ) variables are backpointers used in recovering the highest scoring sequence of transitions.", "page": 6, "bbox": {"x1": 312.96, "x2": 544.3199999999999, "y1": 54.72, "y2": 368.15999999999997}}]}